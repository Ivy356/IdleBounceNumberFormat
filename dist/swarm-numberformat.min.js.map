{"version":3,"sources":["swarm-numberformat.min.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","global","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","validate","condition","message","Error","_format","val","opts","backend","backends","normalize","index","suffix","suffixFn","Math","abs","minSuffix","minRound","floor","toLocaleString","undefined","maximumSignificantDigits","sigfigs","toExponential","replace","prefix","Object","defineProperty","value","formatShort","formatFull","format","Formatter","Formats","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","_standardSuffixes","_standardSuffixes2","_longScaleSuffixes","_longScaleSuffixes2","log10","ret","log","LN10","round","native","max","_ref","pow","toPrecision","decimal.js","_requireDecimal","config","Decimal","window","clone","_ref2","rounding","e","_ref3","div","dividedBy","defaultOptions","flavor","suffixGroup","suffixes","suffixGroups","standard","longScale","scientific","full","short","hybrid","slice","engineering","Flavors","formats","flavors","_this","keys","_normalizeOpts","charAt","toUpperCase","substr","formatFlavor","formatOptions","flavorOptions","numberformat","__WEBPACK_AMD_DEFINE_RESULT__","globalScope","digitsToString","d","k","ws","indexOfLastWord","str","w","LOG_BASE","getZeroString","checkInt32","min","invalidArgument","checkRoundingDigits","rm","repeating","di","r","rd","ceil","mathpow","convertBase","baseIn","baseOut","j","arrL","arr","strL","NUMERALS","indexOf","reverse","cosine","Ctor","x","y","len","toString","precision","taylorSeries","times","cos2x","minus","plus","finalise","sd","isTruncated","digits","roundUp","xd","xdi","constructor","out","push","s","BASE","pop","external","maxE","NaN","minE","finiteToString","isExp","isFinite","nonFiniteToString","getBase10Exponent","getLn10","pr","LN10_PRECISION","precisionLimitExceeded","getPi","PI_PRECISION","PI","getPrecision","zs","intPow","n","truncate","mathfloor","isOdd","maxOrMin","args","ltgt","naturalExponential","denominator","guard","sum","t","wpr","rep","divide","naturalLogarithm","c0","numerator","x1","x2","String","parseDecimal","search","substring","charCodeAt","parseOther","base","divisor","isFloat","xe","isHex","test","toLowerCase","isBinary","isOctal","sine","sqrt","sin2_x","d5","d16","d20","isHyperbolic","u","toLessThanHalfPi","isNeg","pi","halfPi","lte","quadrant","divToInt","isZero","toStringBinary","MAX_DIGITS","inexact","unshift","acos","acosh","add","asin","asinh","atan","atanh","atan2","cbrt","decimalError","v","ps","EXP_LIMIT","crypto","getRandomValues","randomBytes","cryptoUnavailable","cos","cosh","isDecimal","P","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","exp","hypot","ln","log2","mod","mul","random","sign","sin","sinh","sub","tan","tanh","trunc","Uint32Array","copy","shift","modulo","toExpNeg","toExpPos","MAX_SAFE_INTEGER","absoluteValue","comparedTo","cmp","xdL","ydL","yd","xs","ys","neg","cubeRoot","t3","t3plusx","eq","decimalPlaces","dp","dividedToIntegerBy","equals","greaterThan","gt","greaterThanOrEqualTo","gte","hyperbolicCosine","one","cosh2_x","d8","hyperbolicSine","sinh2_x","hyperbolicTangent","inverseCosine","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","xsd","inverseSine","inverseTangent","px","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","isBase10","inf","num","arg","xLTy","q","negated","carry","z","squareRoot","tangent","rL","toBinary","toDecimalPlaces","toDP","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yIsInt","yn","toSignificantDigits","toSD","truncated","valueOf","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz"],"mappings":"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rB,GAE1B,MADAA,GAAO1B,KAAKoH,eAAe1F,GACpBmB,OAAOsE,KAAKzF,EAAKsF,aAIrB7D,KAGLwE,EAAe,GAAIxE,EACvBwE,GAAazB,eAAiBA,EAC9ByB,EAAaxE,UAAYA,EACzBvD,EAAQmB,QAAU4G,CAeL/H,GAAQsD,OAAS,SAAgBzB,EAAKC,GACjD,MAAOiG,GAAazE,OAAOzB,EAAKC,IAWjB9B,EAAQqD,WAAa,SAAoBxB,EAAKC,GAC7D,MAAOiG,GAAaH,aAAa/F,EAAK,OAAQC,IAW9B9B,EAAQoD,YAAc,SAAqBvB,EAAKC,GAChE,MAAOiG,GAAaH,aAAa/F,EAAK,QAASC,MAEpBnB,KAAKX,EAAU,WAAa,MAAOI,WAI3D,SAASH,EAAQD,GAEtBC,EAAOD,SACN+G,OACC,GACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,MACA,KACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,MACA,OAEDD,MACC,GACA,YACA,WACA,WACA,YACA,eACA,eACA,cACA,cACA,aACA,aACA,aACA,eACA,gBACA,gBACA,qBACA,oBACA,eACA,mBACA,iBACA,kBACA,gBACA,kBACA,mBACA,oBACA,wBACA,uBACA,mBACA,sBACA,oBACA,qBACA,iBACA,mBACA,oBACA,qBACA,yBACA,wBACA,oBACA,uBACA,qBACA,sBACA,oBACA,sBACA,uBACA,wBACA,4BACA,2BACA,uBACA,0BACA,wBACA,yBACA,qBACA,uBACA,wBACA,yBACA,6BACA,4BACA,wBACA,2BACA,yBACA,0BACA,kBACA,oBACA,qBACA,qBACA,0BACA,yBACA,oBACA,wBACA,sBACA,uBACA,oBACA,sBACA,uBACA,uBACA,4BACA,2BACA,sBACA,0BACA,wBACA,yBACA,kBACA,oBACA,wBAMG,SAAS7G,EAAQD,GAEtBC,EAAOD,SACN+G,OACC,GACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,QAEDD,MACC,GACA,YACA,WACA,YACA,WACA,YACA,YACA,aACA,eACA,gBACA,eACA,gBACA,cACA,eACA,cACA,eACA,aACA,cACA,aACA,cACA,aACA,cACA,eACA,gBACA,gBACA,iBACA,gBACA,iBACA,qBACA,sBACA,oBACA,qBACA,eACA,gBACA,mBACA,oBACA,iBACA,kBACA,kBACA,mBACA,gBACA,iBACA,kBACA,mBACA,mBACA,oBACA,oBACA,qBACA,wBACA,yBACA,uBACA,wBACA,mBACA,oBACA,sBACA,uBACA,oBACA,qBACA,qBACA,sBACA,iBACA,kBACA,mBACA,oBACA,oBACA,qBACA,qBACA,sBACA,yBACA,0BACA,wBACA,yBACA,oBACA,qBACA,uBACA,wBACA,qBACA,sBACA,sBACA,uBACA,oBACA,qBACA,sBACA,0BAMG,SAAS7G,EAAQD,EAASM,GAE/B,GAAI0H,IACH,SAAWC,GACV,YAq8EA,SAASC,GAAeC,GACtB,GAAIvE,GAAGwE,EAAGC,EACRC,EAAkBH,EAAErE,OAAS,EAC7ByE,EAAM,GACNC,EAAIL,EAAE,EAER,IAAIG,EAAkB,EAAG,CAEvB,IADAC,GAAOC,EACF5E,EAAI,EAAGA,EAAI0E,EAAiB1E,IAC/ByE,EAAKF,EAAEvE,GAAK,GACZwE,EAAIK,GAAWJ,EAAGvE,OACdsE,IAAGG,GAAOG,EAAcN,IAC5BG,GAAOF,CAGTG,GAAIL,EAAEvE,GACNyE,EAAKG,EAAI,GACTJ,EAAIK,GAAWJ,EAAGvE,OACdsE,IAAGG,GAAOG,EAAcN,QACvB,IAAU,IAANI,EACT,MAAO,GAIT,MAAOA,EAAI,KAAO,GAAIA,GAAK,EAE3B,OAAOD,GAAMC,EAIf,QAASG,GAAW/E,EAAGgF,EAAKtD,GAC1B,GAAI1B,MAAQA,GAAKA,EAAIgF,GAAOhF,EAAI0B,EAC9B,KAAM3D,OAAMkH,GAAkBjF,GAUlC,QAASkF,GAAoBX,EAAGvE,EAAGmF,EAAIC,GACrC,GAAIC,GAAIb,EAAGc,EAAGC,CAGd,KAAKf,EAAID,EAAE,GAAIC,GAAK,GAAIA,GAAK,KAAMxE,CAwCnC,SArCMA,EAAI,GACRA,GAAK6E,GACLQ,EAAK,IAELA,EAAK5G,KAAK+G,MAAMxF,EAAI,GAAK6E,IACzB7E,GAAK6E,IAMPL,EAAIiB,GAAQ,GAAIZ,GAAW7E,GAC3BuF,EAAKhB,EAAEc,GAAMb,EAAI,EAEA,MAAbY,EACEpF,EAAI,GACG,GAALA,EAAQuF,EAAKA,EAAK,IAAM,EACd,GAALvF,IAAQuF,EAAKA,EAAK,GAAK,GAChCD,EAAIH,EAAK,GAAW,OAANI,GAAeJ,EAAK,GAAW,OAANI,GAAqB,KAANA,GAAqB,GAANA,GAErED,GAAKH,EAAK,GAAKI,EAAK,GAAKf,GAAKW,EAAK,GAAKI,EAAK,GAAKf,EAAI,KACnDD,EAAEc,EAAK,GAAKb,EAAI,IAAM,IAAMiB,GAAQ,GAAIzF,EAAI,GAAK,IAC/CuF,GAAMf,EAAI,GAAW,GAANe,IAAyC,IAA5BhB,EAAEc,EAAK,GAAKb,EAAI,IAAM,GAGrDxE,EAAI,GACG,GAALA,EAAQuF,EAAKA,EAAK,IAAO,EACf,GAALvF,EAAQuF,EAAKA,EAAK,IAAM,EACnB,GAALvF,IAAQuF,EAAKA,EAAK,GAAK,GAChCD,GAAKF,GAAaD,EAAK,IAAY,MAANI,IAAeH,GAAaD,EAAK,GAAW,MAANI,GAEnED,IAAMF,GAAaD,EAAK,IAAMI,EAAK,GAAKf,IACtCY,GAAaD,EAAK,GAAMI,EAAK,GAAKf,EAAI,KACrCD,EAAEc,EAAK,GAAKb,EAAI,IAAO,IAAMiB,GAAQ,GAAIzF,EAAI,GAAK,EAIlDsF,EAOT,QAASI,GAAYf,EAAKgB,EAAQC,GAOhC,IANA,GAAIC,GAEFC,EADAC,GAAO,GAEP/F,EAAI,EACJgG,EAAOrB,EAAIzE,OAENF,EAAIgG,GAAO,CAChB,IAAKF,EAAOC,EAAI7F,OAAQ4F,KAASC,EAAID,IAASH,CAE9C,KADAI,EAAI,IAAME,GAASC,QAAQvB,EAAId,OAAO7D,MACjC6F,EAAI,EAAGA,EAAIE,EAAI7F,OAAQ2F,IACtBE,EAAIF,GAAKD,EAAU,IACF,SAAfG,EAAIF,EAAI,KAAeE,EAAIF,EAAI,GAAK,GACxCE,EAAIF,EAAI,IAAME,EAAIF,GAAKD,EAAU,EACjCG,EAAIF,IAAMD,GAKhB,MAAOG,GAAII,UASb,QAASC,GAAOC,EAAMC,GACpB,GAAI9B,GAAG+B,EACLC,EAAMF,EAAE/B,EAAErE,MAMRsG,GAAM,IACRhC,EAAI/F,KAAK+G,KAAKgB,EAAM,GACpBD,EAAI9H,KAAKmD,IAAI,GAAI4C,GAAGiC,aAEpBjC,EAAI,GACJ+B,EAAI,gCAGNF,EAAKK,WAAalC,EAElB8B,EAAIK,EAAaN,EAAM,EAAGC,EAAEM,MAAML,GAAI,GAAIF,GAAK,GAG/C,KAAK,GAAIrG,GAAIwE,EAAGxE,KAAM,CACpB,GAAI6G,GAAQP,EAAEM,MAAMN,EACpBA,GAAIO,EAAMD,MAAMC,GAAOC,MAAMD,GAAOD,MAAM,GAAGG,KAAK,GAKpD,MAFAV,GAAKK,WAAalC,EAEX8B,EAmRR,QAASU,GAASV,EAAGW,EAAI9B,EAAI+B,GAC5B,GAAIC,GAAQnH,EAAG6F,EAAGrB,EAAGe,EAAI6B,EAASxC,EAAGyC,EAAIC,EACvCjB,EAAOC,EAAEiB,WAGXC,GAAK,GAAU,MAANP,EAAY,CAInB,GAHAI,EAAKf,EAAE/B,GAGF8C,EAAI,MAAOf,EAWhB,KAAKa,EAAS,EAAG3C,EAAI6C,EAAG,GAAI7C,GAAK,GAAIA,GAAK,GAAI2C,GAI9C,IAHAnH,EAAIiH,EAAKE,EAGLnH,EAAI,EACNA,GAAK6E,GACLgB,EAAIoB,EACJrC,EAAIyC,EAAGC,EAAM,GAGb/B,EAAKX,EAAIa,GAAQ,GAAI0B,EAAStB,EAAI,GAAK,GAAK,MAI5C,IAFAyB,EAAM7I,KAAK+G,MAAMxF,EAAI,GAAK6E,IAC1BL,EAAI6C,EAAGnH,OACHoH,GAAO9C,EAAG,CACZ,IAAI0C,EASF,KAAMM,EANN,MAAOhD,KAAO8C,GAAMD,EAAGI,KAAK,EAC5B7C,GAAIW,EAAK,EACT4B,EAAS,EACTnH,GAAK6E,GACLgB,EAAI7F,EAAI6E,GAAW,MAIhB,CAIL,IAHAD,EAAIJ,EAAI6C,EAAGC,GAGNH,EAAS,EAAG3C,GAAK,GAAIA,GAAK,GAAI2C,GAGnCnH,IAAK6E,GAILgB,EAAI7F,EAAI6E,GAAWsC,EAGnB5B,EAAKM,EAAI,EAAI,EAAIjB,EAAIa,GAAQ,GAAI0B,EAAStB,EAAI,GAAK,GAAK,EAoB5D,GAfAqB,EAAcA,GAAeD,EAAK,GAChB,SAAhBI,EAAGC,EAAM,KAAkBzB,EAAI,EAAIjB,EAAIA,EAAIa,GAAQ,GAAI0B,EAAStB,EAAI,IAMtEuB,EAAUjC,EAAK,GACVI,GAAM2B,KAAuB,GAAN/B,GAAWA,IAAOmB,EAAEoB,EAAI,EAAI,EAAI,IACxDnC,EAAK,GAAW,GAANA,IAAkB,GAANJ,GAAW+B,GAAqB,GAAN/B,IAG9CnF,EAAI,EAAI6F,EAAI,EAAIjB,EAAIa,GAAQ,GAAI0B,EAAStB,GAAK,EAAIwB,EAAGC,EAAM,IAAM,GAAM,GACvEnC,IAAOmB,EAAEoB,EAAI,EAAI,EAAI,IAEvBT,EAAK,IAAMI,EAAG,GAgBhB,MAfAA,GAAGnH,OAAS,EACRkH,GAGFH,GAAMX,EAAEhE,EAAI,EAGZ+E,EAAG,GAAK5B,GAAQ,IAAKZ,GAAWoC,EAAKpC,IAAYA,IACjDyB,EAAEhE,GAAK2E,GAAM,GAIbI,EAAG,GAAKf,EAAEhE,EAAI,EAGTgE,CAiBT,IAbS,GAALtG,GACFqH,EAAGnH,OAASoH,EACZ9C,EAAI,EACJ8C,MAEAD,EAAGnH,OAASoH,EAAM,EAClB9C,EAAIiB,GAAQ,GAAIZ,GAAW7E,GAI3BqH,EAAGC,GAAOzB,EAAI,GAAKjB,EAAIa,GAAQ,GAAI0B,EAAStB,GAAKJ,GAAQ,GAAII,GAAK,GAAKrB,EAAI,GAGzE4C,EACF,OAAS,CAGP,GAAW,GAAPE,EAAU,CAGZ,IAAKtH,EAAI,EAAG6F,EAAIwB,EAAG,GAAIxB,GAAK,GAAIA,GAAK,GAAI7F,GAEzC,KADA6F,EAAIwB,EAAG,IAAM7C,EACRA,EAAI,EAAGqB,GAAK,GAAIA,GAAK,GAAIrB,GAG1BxE,IAAKwE,IACP8B,EAAEhE,IACE+E,EAAG,IAAMM,KAAMN,EAAG,GAAK,GAG7B,OAGA,GADAA,EAAGC,IAAQ9C,EACP6C,EAAGC,IAAQK,GAAM,KACrBN,GAAGC,KAAS,EACZ9C,EAAI,EAMV,IAAKxE,EAAIqH,EAAGnH,OAAoB,IAAZmH,IAAKrH,IAAWqH,EAAGO,MAsBzC,MAnBIC,MAGEvB,EAAEhE,EAAI+D,EAAKyB,MAGbxB,EAAE/B,EAAI,KACN+B,EAAEhE,EAAIyF,KAGGzB,EAAEhE,EAAI+D,EAAK2B,OAGpB1B,EAAEhE,EAAI,EACNgE,EAAE/B,GAAK,KAKJ+B,EAIT,QAAS2B,GAAe3B,EAAG4B,EAAOjB,GAChC,IAAKX,EAAE6B,WAAY,MAAOC,GAAkB9B,EAC5C,IAAI9B,GACFlC,EAAIgE,EAAEhE,EACNqC,EAAML,EAAegC,EAAE/B,GACvBiC,EAAM7B,EAAIzE,MAwBZ,OAtBIgI,IACEjB,IAAOzC,EAAIyC,EAAKT,GAAO,EACzB7B,EAAMA,EAAId,OAAO,GAAK,IAAMc,EAAItB,MAAM,GAAKyB,EAAcN,GAChDgC,EAAM,IACf7B,EAAMA,EAAId,OAAO,GAAK,IAAMc,EAAItB,MAAM,IAGxCsB,EAAMA,GAAO2B,EAAEhE,EAAI,EAAI,IAAM,MAAQgE,EAAEhE,GAC9BA,EAAI,GACbqC,EAAM,KAAOG,GAAexC,EAAI,GAAKqC,EACjCsC,IAAOzC,EAAIyC,EAAKT,GAAO,IAAG7B,GAAOG,EAAcN,KAC1ClC,GAAKkE,GACd7B,GAAOG,EAAcxC,EAAI,EAAIkE,GACzBS,IAAOzC,EAAIyC,EAAK3E,EAAI,GAAK,IAAGqC,EAAMA,EAAM,IAAMG,EAAcN,OAE3DA,EAAIlC,EAAI,GAAKkE,IAAK7B,EAAMA,EAAItB,MAAM,EAAGmB,GAAK,IAAMG,EAAItB,MAAMmB,IAC3DyC,IAAOzC,EAAIyC,EAAKT,GAAO,IACrBlE,EAAI,IAAMkE,IAAK7B,GAAO,KAC1BA,GAAOG,EAAcN,KAIlBG,EAKT,QAAS0D,GAAkBlB,EAAQ7E,GAGjC,IAAK,GAAItC,GAAI,EAAG4E,EAAIuC,EAAO,GAAIvC,GAAK,GAAIA,GAAK,GAAI5E,GACjD,OAAOA,GAAIsC,EAAIuC,GAAW,EAI3B,QAASyD,GAAQjC,EAAMY,EAAIsB,GAC1B,GAAItB,EAAKuB,GAKP,KAFAX,KAAW,EACPU,IAAIlC,EAAKK,UAAY6B,GACnBxK,MAAM0K,GAEd,OAAOzB,GAAS,GAAIX,GAAK9E,IAAO0F,EAAI,GAAG,GAIzC,QAASyB,GAAMrC,EAAMY,EAAI9B,GACvB,GAAI8B,EAAK0B,GAAc,KAAM5K,OAAM0K,GACnC,OAAOzB,GAAS,GAAIX,GAAKuC,IAAK3B,EAAI9B,GAAI,GAIxC,QAAS0D,GAAa1B,GACpB,GAAIvC,GAAIuC,EAAOjH,OAAS,EACtBsG,EAAM5B,EAAIC,GAAW,CAKvB,IAHAD,EAAIuC,EAAOvC,GAGJ,CAGL,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAI4B,GAG7B,KAAK5B,EAAIuC,EAAO,GAAIvC,GAAK,GAAIA,GAAK,GAAI4B,IAGxC,MAAOA,GAIT,QAAS1B,GAAcN,GAErB,IADA,GAAIsE,GAAK,GACFtE,KAAMsE,GAAM,GACnB,OAAOA,GAWT,QAASC,GAAO1C,EAAMC,EAAG0C,EAAGT,GAC1B,GAAIrB,GACF5B,EAAI,GAAIe,GAAK,GAIb7B,EAAI/F,KAAK+G,KAAK+C,EAAK1D,GAAW,EAIhC,KAFAgD,IAAW,IAEF,CAOP,GANImB,EAAI,IACN1D,EAAIA,EAAEsB,MAAMN,GACR2C,EAAS3D,EAAEf,EAAGC,KAAI0C,GAAc,IAGtC8B,EAAIE,GAAUF,EAAI,GACR,IAANA,EAAS,CAGXA,EAAI1D,EAAEf,EAAErE,OAAS,EACbgH,GAA0B,IAAX5B,EAAEf,EAAEyE,MAAY1D,EAAEf,EAAEyE,EACvC,OAGF1C,EAAIA,EAAEM,MAAMN,GACZ2C,EAAS3C,EAAE/B,EAAGC,GAKhB,MAFAqD,KAAW,EAEJvC,EAIT,QAAS6D,GAAMH,GACb,MAA6B,GAAtBA,EAAEzE,EAAEyE,EAAEzE,EAAErE,OAAS,GAO1B,QAASkJ,GAAS/C,EAAMgD,EAAMC,GAK5B,IAJA,GAAI/C,GACFD,EAAI,GAAID,GAAKgD,EAAK,IAClBrJ,EAAI,IAEGA,EAAIqJ,EAAKnJ,QAAS,CAEzB,GADAqG,EAAI,GAAIF,GAAKgD,EAAKrJ,KACbuG,EAAEmB,EAAG,CACRpB,EAAIC,CACJ,OACSD,EAAEgD,GAAM/C,KACjBD,EAAIC,GAIR,MAAOD,GAmCT,QAASiD,GAAmBjD,EAAGW,GAC7B,GAAIuC,GAAaC,EAAO5D,EAAGjE,EAAK8H,EAAKC,EAAGC,EACtCC,EAAM,EACN7J,EAAI,EACJwE,EAAI,EACJ6B,EAAOC,EAAEiB,YACTpC,EAAKkB,EAAKhE,SACVkG,EAAKlC,EAAKK,SAGZ,KAAKJ,EAAE/B,IAAM+B,EAAE/B,EAAE,IAAM+B,EAAEhE,EAAI,GAE3B,MAAO,IAAI+D,GAAKC,EAAE/B,EACb+B,EAAE/B,EAAE,GAAS+B,EAAEoB,EAAI,EAAI,EAAI,EAAI,EAAtB,EACVpB,EAAEoB,EAAIpB,EAAEoB,EAAI,EAAI,EAAIpB,EAAI,IAa9B,KAVU,MAANW,GACFY,IAAW,EACX+B,EAAMrB,GAENqB,EAAM3C,EAGR0C,EAAI,GAAItD,GAAK,QAGNC,EAAEhE,GAAI,GAGXgE,EAAIA,EAAEM,MAAM+C,GACZnF,GAAK,CAUP,KALAiF,EAAQhL,KAAK6C,IAAImE,GAAQ,EAAGjB,IAAM/F,KAAK8C,KAAO,EAAI,EAAI,EACtDqI,GAAOH,EACPD,EAAc5H,EAAM8H,EAAM,GAAIrD,GAAK,GACnCA,EAAKK,UAAYkD,IAER,CAKP,GAJAhI,EAAMoF,EAASpF,EAAIgF,MAAMN,GAAIsD,EAAK,GAClCJ,EAAcA,EAAY5C,QAAQ5G,GAClC2J,EAAID,EAAI3C,KAAK+C,GAAOlI,EAAK4H,EAAaI,EAAK,IAEvCtF,EAAeqF,EAAEpF,GAAGlB,MAAM,EAAGuG,KAAStF,EAAeoF,EAAInF,GAAGlB,MAAM,EAAGuG,GAAM,CAE7E,IADA/D,EAAIrB,EACGqB,KAAK6D,EAAM1C,EAAS0C,EAAI9C,MAAM8C,GAAME,EAAK,EAOhD,IAAU,MAAN3C,EAYF,MADAZ,GAAKK,UAAY6B,EACVmB,CAVP,MAAIG,EAAM,GAAK3E,EAAoBwE,EAAInF,EAAGqF,EAAMH,EAAOtE,EAAI0E,IAMzD,MAAO7C,GAAS0C,EAAKrD,EAAKK,UAAY6B,EAAIpD,EAAI0C,IAAW,EALzDxB,GAAKK,UAAYkD,GAAO,GACxBJ,EAAc5H,EAAM+H,EAAI,GAAItD,GAAK,GACjCrG,EAAI,EACJ6J,IAUNH,EAAMC,GAoBV,QAASI,GAAiBxD,EAAGU,GAC3B,GAAIhK,GAAG+M,EAAIR,EAAalH,EAAG2H,EAAWJ,EAAKH,EAAKC,EAAGC,EAAKM,EAAIC,EAC1DnB,EAAI,EACJS,EAAQ,GACRnD,EAAIC,EACJc,EAAKf,EAAE/B,EACP8B,EAAOC,EAAEiB,YACTpC,EAAKkB,EAAKhE,SACVkG,EAAKlC,EAAKK,SAGZ,IAAIJ,EAAEoB,EAAI,IAAML,IAAOA,EAAG,KAAOf,EAAEhE,GAAc,GAAT+E,EAAG,IAAwB,GAAbA,EAAGnH,OACvD,MAAO,IAAImG,GAAKgB,IAAOA,EAAG,IAAK,EAAK,EAAW,GAAPf,EAAEoB,EAASK,IAAMV,EAAK,EAAIf,EAcpE,IAXU,MAANW,GACFY,IAAW,EACX+B,EAAMrB,GAENqB,EAAM3C,EAGRZ,EAAKK,UAAYkD,GAAOH,EACxBxM,EAAIqH,EAAe+C,GACnB2C,EAAK/M,EAAE4G,OAAO,KAEVpF,KAAKC,IAAI4D,EAAIgE,EAAEhE,GAAK,OAqCtB,MAJAqH,GAAIrB,EAAQjC,EAAMuD,EAAM,EAAGrB,GAAI3B,MAAMtE,EAAI,IACzCgE,EAAIyD,EAAiB,GAAI1D,GAAK2D,EAAK,IAAM/M,EAAEoG,MAAM,IAAKuG,EAAMH,GAAO1C,KAAK4C,GACxEtD,EAAKK,UAAY6B,EAEJ,MAANtB,EAAaD,EAASV,EAAGiC,EAAIpD,EAAI0C,IAAW,GAAQvB,CAxB3D,MAAO0D,EAAK,GAAW,GAANA,GAAiB,GAANA,GAAW/M,EAAE4G,OAAO,GAAK,GACnDyC,EAAIA,EAAEM,MAAML,GACZtJ,EAAIqH,EAAegC,EAAE/B,GACrByF,EAAK/M,EAAE4G,OAAO,GACdmF,GAiCJ,KA9BE1G,EAAIgE,EAAEhE,EAEF0H,EAAK,GACP1D,EAAI,GAAID,GAAK,KAAOpJ,GACpBqF,KAEAgE,EAAI,GAAID,GAAK2D,EAAK,IAAM/M,EAAEoG,MAAM,IAepC6G,EAAK5D,EAKLoD,EAAMO,EAAY3D,EAAIwD,GAAOxD,EAAEQ,MAAM,GAAIR,EAAES,KAAK,GAAI6C,EAAK,GACzDO,EAAKnD,EAASV,EAAEM,MAAMN,GAAIsD,EAAK,GAC/BJ,EAAc,IAEL,CAIP,GAHAS,EAAYjD,EAASiD,EAAUrD,MAAMuD,GAAKP,EAAK,GAC/CD,EAAID,EAAI3C,KAAK+C,GAAOG,EAAW,GAAI5D,GAAKmD,GAAcI,EAAK,IAEvDtF,EAAeqF,EAAEpF,GAAGlB,MAAM,EAAGuG,KAAStF,EAAeoF,EAAInF,GAAGlB,MAAM,EAAGuG,GAAM,CAc7E,GAbAF,EAAMA,EAAI9C,MAAM,GAIN,IAANtE,IAASoH,EAAMA,EAAI3C,KAAKuB,EAAQjC,EAAMuD,EAAM,EAAGrB,GAAI3B,MAAMtE,EAAI,MACjEoH,EAAMI,GAAOJ,EAAK,GAAIrD,GAAK2C,GAAIY,EAAK,GAQ1B,MAAN3C,EAWF,MADAZ,GAAKK,UAAY6B,EACVmB,CAVP,KAAIxE,EAAoBwE,EAAInF,EAAGqF,EAAMH,EAAOtE,EAAI0E,GAM9C,MAAO7C,GAAS0C,EAAKrD,EAAKK,UAAY6B,EAAIpD,EAAI0C,IAAW,EALzDxB,GAAKK,UAAYkD,GAAOH,EACxBE,EAAIM,EAAY3D,EAAIwD,GAAOI,EAAGpD,MAAM,GAAIoD,EAAGnD,KAAK,GAAI6C,EAAK,GACzDO,EAAKnD,EAASV,EAAEM,MAAMN,GAAIsD,EAAK,GAC/BJ,EAAcK,EAAM,EAU1BH,EAAMC,EACNH,GAAe,GAMnB,QAASpB,GAAkB9B,GAEzB,MAAO8D,QAAO9D,EAAEoB,EAAIpB,EAAEoB,EAAI,GAO5B,QAAS2C,GAAa/D,EAAG3B,GACvB,GAAIrC,GAAGtC,EAAGwG,CAmBV,MAhBKlE,EAAIqC,EAAIuB,QAAQ,OAAQ,IAAIvB,EAAMA,EAAIxF,QAAQ,IAAK,MAGnDa,EAAI2E,EAAI2F,OAAO,OAAS,GAGvBhI,EAAI,IAAGA,EAAItC,GACfsC,IAAMqC,EAAItB,MAAMrD,EAAI,GACpB2E,EAAMA,EAAI4F,UAAU,EAAGvK,IACdsC,EAAI,IAGbA,EAAIqC,EAAIzE,QAILF,EAAI,EAAyB,KAAtB2E,EAAI6F,WAAWxK,GAAWA,KAGtC,IAAKwG,EAAM7B,EAAIzE,OAAoC,KAA5ByE,EAAI6F,WAAWhE,EAAM,KAAaA,GAGzD,GAFA7B,EAAMA,EAAItB,MAAMrD,EAAGwG,GAEV,CAYP,GAXAA,GAAOxG,EACPsG,EAAEhE,EAAIA,EAAIA,EAAItC,EAAI,EAClBsG,EAAE/B,KAMFvE,GAAKsC,EAAI,GAAKuC,GACVvC,EAAI,IAAGtC,GAAK6E,IAEZ7E,EAAIwG,EAAK,CAEX,IADIxG,GAAGsG,EAAE/B,EAAEkD,MAAM9C,EAAItB,MAAM,EAAGrD,IACzBwG,GAAO3B,GAAU7E,EAAIwG,GAAMF,EAAE/B,EAAEkD,MAAM9C,EAAItB,MAAMrD,EAAGA,GAAK6E,IAC5DF,GAAMA,EAAItB,MAAMrD,GAChBA,EAAI6E,GAAWF,EAAIzE,WAEnBF,IAAKwG,CAGP,MAAOxG,KAAM2E,GAAO,GACpB2B,GAAE/B,EAAEkD,MAAM9C,GAENkD,KAGEvB,EAAEhE,EAAIgE,EAAEiB,YAAYO,MAGtBxB,EAAE/B,EAAI,KACN+B,EAAEhE,EAAIyF,KAGGzB,EAAEhE,EAAIgE,EAAEiB,YAAYS,OAG7B1B,EAAEhE,EAAI,EACNgE,EAAE/B,GAAK,SAOX+B,GAAEhE,EAAI,EACNgE,EAAE/B,GAAK,EAGT,OAAO+B,GAOT,QAASmE,GAAWnE,EAAG3B,GACrB,GAAI+F,GAAMrE,EAAMsE,EAAS3K,EAAG4K,EAASpE,EAAKtJ,EAAGmK,EAAIwD,CAEjD,IAAY,aAARlG,GAA8B,QAARA,EAIxB,OAHMA,IAAK2B,EAAEoB,EAAIK,KACjBzB,EAAEhE,EAAIyF,IACNzB,EAAE/B,EAAI,KACC+B,CAGT,IAAIwE,GAAMC,KAAKpG,GACb+F,EAAO,GACP/F,EAAMA,EAAIqG,kBACL,IAAIC,GAASF,KAAKpG,GACvB+F,EAAO,MACF,CAAA,IAAIQ,GAAQH,KAAKpG,GAGtB,KAAM5G,OAAMkH,GAAkBN,EAF9B+F,GAAO,EAkCT,IA5BA1K,EAAI2E,EAAI2F,OAAO,MAEXtK,EAAI,GACN9C,GAAKyH,EAAItB,MAAMrD,EAAI,GACnB2E,EAAMA,EAAI4F,UAAU,EAAGvK,IAEvB2E,EAAMA,EAAItB,MAAM,GAKlBrD,EAAI2E,EAAIuB,QAAQ,KAChB0E,EAAU5K,GAAK,EACfqG,EAAOC,EAAEiB,YAELqD,IACFjG,EAAMA,EAAIxF,QAAQ,IAAK,IACvBqH,EAAM7B,EAAIzE,OACVF,EAAIwG,EAAMxG,EAGV2K,EAAU5B,EAAO1C,EAAM,GAAIA,GAAKqE,GAAO1K,EAAO,EAAJA,IAG5CqH,EAAK3B,EAAYf,EAAK+F,EAAM/C,IAC5BkD,EAAKxD,EAAGnH,OAAS,EAGZF,EAAI6K,EAAc,IAAVxD,EAAGrH,KAAYA,EAAGqH,EAAGO,KAClC,OAAI5H,GAAI,EAAU,GAAIqG,GAAW,EAANC,EAAEoB,IAC7BpB,EAAEhE,EAAI+F,EAAkBhB,EAAIwD,GAC5BvE,EAAE/B,EAAI8C,EACNQ,IAAW,EAQP+C,IAAStE,EAAIwD,GAAOxD,EAAGqE,EAAe,EAANnE,IAGhCtJ,IAAGoJ,EAAIA,EAAEM,MAAMnI,KAAKC,IAAIxB,GAAK,GAAKuB,KAAKmD,IAAI,EAAG1E,GAAK+E,GAAQL,IAAI,EAAG1E,KACtE2K,IAAW,EAEJvB,GAST,QAAS6E,GAAK9E,EAAMC,GAClB,GAAI9B,GACFgC,EAAMF,EAAE/B,EAAErE,MAEZ,IAAIsG,EAAM,EAAG,MAAOG,GAAaN,EAAM,EAAGC,EAAGA,EAO7C9B,GAAI,IAAM/F,KAAK2M,KAAK5E,GACpBhC,EAAIA,EAAI,GAAK,GAAS,EAAJA,EAGlB8B,EAAIA,EAAEM,MAAMnI,KAAKmD,IAAI,GAAI4C,IACzB8B,EAAIK,EAAaN,EAAM,EAAGC,EAAGA,EAO7B,KAJA,GAAI+E,GACFC,EAAK,GAAIjF,GAAK,GACdkF,EAAM,GAAIlF,GAAK,IACfmF,EAAM,GAAInF,GAAK,IACV7B,KACL6G,EAAS/E,EAAEM,MAAMN,GACjBA,EAAIA,EAAEM,MAAM0E,EAAGvE,KAAKsE,EAAOzE,MAAM2E,EAAI3E,MAAMyE,GAAQvE,MAAM0E,KAG3D,OAAOlF,GAKT,QAASK,GAAaN,EAAM2C,EAAG1C,EAAGC,EAAGkF,GACnC,GAAI5F,GAAG8D,EAAG+B,EAAGvB,EACXnK,EAAI,EACJuI,EAAKlC,EAAKK,UACVlC,EAAI/F,KAAK+G,KAAK+C,EAAK1D,GAMrB,KAJAgD,IAAW,EACXsC,EAAK7D,EAAEM,MAAMN,GACboF,EAAI,GAAIrF,GAAKE,KAEJ,CAMP,GALAoD,EAAIG,GAAO4B,EAAE9E,MAAMuD,GAAK,GAAI9D,GAAK2C,IAAMA,KAAMT,EAAI,GACjDmD,EAAID,EAAelF,EAAEQ,KAAK4C,GAAKpD,EAAEO,MAAM6C,GACvCpD,EAAIuD,GAAOH,EAAE/C,MAAMuD,GAAK,GAAI9D,GAAK2C,IAAMA,KAAMT,EAAI,GACjDoB,EAAI+B,EAAE3E,KAAKR,GAEI,SAAXoD,EAAEpF,EAAEC,GAAe,CACrB,IAAKqB,EAAIrB,EAAGmF,EAAEpF,EAAEsB,KAAO6F,EAAEnH,EAAEsB,IAAMA,MACjC,GAAIA,IAAK,EAAI,MAGfA,EAAI6F,EACJA,EAAInF,EACJA,EAAIoD,EACJA,EAAI9D,EACJ7F,IAMF,MAHA6H,KAAW,EACX8B,EAAEpF,EAAErE,OAASsE,EAAI,EAEVmF,EAKT,QAASgC,GAAiBtF,EAAMC,GAC9B,GAAIqD,GACFiC,EAAQtF,EAAEoB,EAAI,EACdmE,EAAKnD,EAAMrC,EAAMA,EAAKK,UAAW,GACjCoF,EAASD,EAAGjF,MAAM,GAIpB,IAFAN,EAAIA,EAAE5H,MAEF4H,EAAEyF,IAAID,GAER,MADAE,IAAWJ,EAAQ,EAAI,EAChBtF,CAKT,IAFAqD,EAAIrD,EAAE2F,SAASJ,GAEXlC,EAAEuC,SACJF,GAAWJ,EAAQ,EAAI,MAClB,CAIL,GAHAtF,EAAIA,EAAEQ,MAAM6C,EAAE/C,MAAMiF,IAGhBvF,EAAEyF,IAAID,GAER,MADAE,IAAW7C,EAAMQ,GAAMiC,EAAQ,EAAI,EAAMA,EAAQ,EAAI,EAC9CtF,CAGT0F,IAAW7C,EAAMQ,GAAMiC,EAAQ,EAAI,EAAMA,EAAQ,EAAI,EAGvD,MAAOtF,GAAEQ,MAAM+E,GAAInN,MASrB,QAASyN,GAAe7F,EAAGV,EAASqB,EAAI9B,GACtC,GAAIuF,GAAMpI,EAAGtC,EAAGwE,EAAGgC,EAAKY,EAASzC,EAAK0C,EAAId,EACxCF,EAAOC,EAAEiB,YACTW,EAAe,SAAPjB,CAWV,IATIiB,GACFnD,EAAWkC,EAAI,EAAGmF,IACP,SAAPjH,EAAeA,EAAKkB,EAAKhE,SACxB0C,EAAWI,EAAI,EAAG,KAEvB8B,EAAKZ,EAAKK,UACVvB,EAAKkB,EAAKhE,UAGPiE,EAAE6B,WAEA,CAoCL,IAnCAxD,EAAMsD,EAAe3B,GACrBtG,EAAI2E,EAAIuB,QAAQ,KAOZgC,GACFwC,EAAO,EACQ,IAAX9E,EACFqB,EAAU,EAALA,EAAS,EACM,GAAXrB,IACTqB,EAAU,EAALA,EAAS,IAGhByD,EAAO9E,EAOL5F,GAAK,IACP2E,EAAMA,EAAIxF,QAAQ,IAAK,IACvBoH,EAAI,GAAIF,GAAK,GACbE,EAAEjE,EAAIqC,EAAIzE,OAASF,EACnBuG,EAAEhC,EAAImB,EAAYuC,EAAe1B,GAAI,GAAImE,GACzCnE,EAAEjE,EAAIiE,EAAEhC,EAAErE,QAGZmH,EAAK3B,EAAYf,EAAK,GAAI+F,GAC1BpI,EAAIkE,EAAMa,EAAGnH,OAGO,GAAbmH,IAAKb,IAAYa,EAAGO,KAE3B,IAAKP,EAAG,GAED,CAyBL,GAxBIrH,EAAI,EACNsC,KAEAgE,EAAI,GAAID,GAAKC,GACbA,EAAE/B,EAAI8C,EACNf,EAAEhE,EAAIA,EACNgE,EAAIwD,GAAOxD,EAAGC,EAAGU,EAAI9B,EAAI,EAAGuF,GAC5BrD,EAAKf,EAAE/B,EACPjC,EAAIgE,EAAEhE,EACN8E,EAAUiF,IAIZrM,EAAIqH,EAAGJ,GACPzC,EAAIkG,EAAO,EACXtD,EAAUA,GAA0B,SAAfC,EAAGJ,EAAK,GAE7BG,EAAUjC,EAAK,GACJ,SAANnF,GAAgBoH,KAAoB,IAAPjC,GAAYA,KAAQmB,EAAEoB,EAAI,EAAI,EAAI,IAChE1H,EAAIwE,GAAKxE,IAAMwE,IAAa,IAAPW,GAAYiC,GAAkB,IAAPjC,GAAyB,EAAbkC,EAAGJ,EAAK,IAChE9B,KAAQmB,EAAEoB,EAAI,EAAI,EAAI,IAE1BL,EAAGnH,OAAS+G,EAERG,EAGF,OAASC,IAAKJ,GAAMyD,EAAO,GACzBrD,EAAGJ,GAAM,EACJA,MACD3E,EACF+E,EAAGiF,QAAQ,GAMjB,KAAK9F,EAAMa,EAAGnH,QAASmH,EAAGb,EAAM,KAAMA,GAGtC,IAAKxG,EAAI,EAAG2E,EAAM,GAAI3E,EAAIwG,EAAKxG,IAAK2E,GAAOsB,GAASpC,OAAOwD,EAAGrH,GAG9D,IAAIkI,EAAO,CACT,GAAI1B,EAAM,EACR,GAAe,IAAXZ,GAA4B,GAAXA,EAAc,CAEjC,IADA5F,EAAe,IAAX4F,EAAgB,EAAI,IACjBY,EAAKA,EAAMxG,EAAGwG,IAAO7B,GAAO,GAEnC,KADA0C,EAAK3B,EAAYf,EAAK+F,EAAM9E,GACvBY,EAAMa,EAAGnH,QAASmH,EAAGb,EAAM,KAAMA,GAGtC,IAAKxG,EAAI,EAAG2E,EAAM,KAAM3E,EAAIwG,EAAKxG,IAAK2E,GAAOsB,GAASpC,OAAOwD,EAAGrH,QAEhE2E,GAAMA,EAAId,OAAO,GAAK,IAAMc,EAAItB,MAAM,EAI1CsB,GAAOA,GAAOrC,EAAI,EAAI,IAAM,MAAQA,MAC/B,IAAIA,EAAI,EAAG,CAChB,OAASA,GAAIqC,EAAM,IAAMA,CACzBA,GAAM,KAAOA,MAEb,MAAMrC,EAAIkE,EAAK,IAAKlE,GAAKkE,EAAKlE,KAAOqC,GAAO,QACnCrC,GAAIkE,IAAK7B,EAAMA,EAAItB,MAAM,EAAGf,GAAK,IAAMqC,EAAItB,MAAMf,QAlE5DqC,GAAMuD,EAAQ,OAAS,GAsEzBvD,IAAkB,IAAXiB,EAAgB,KAAkB,GAAXA,EAAe,KAAkB,GAAXA,EAAe,KAAO,IAAMjB,MA9GhFA,GAAMyD,EAAkB9B,EAiH1B,OAAOA,GAAEoB,EAAI,EAAI,IAAM/C,EAAMA,EAK/B,QAASsE,GAASlD,EAAKS,GACrB,GAAIT,EAAI7F,OAASsG,EAEf,MADAT,GAAI7F,OAASsG,GACN,EAyDX,QAAS9H,GAAI4H,GACX,MAAO,IAAI9J,MAAK8J,GAAG5H,MAUrB,QAAS6N,GAAKjG,GACZ,MAAO,IAAI9J,MAAK8J,GAAGiG,OAWrB,QAASC,GAAMlG,GACb,MAAO,IAAI9J,MAAK8J,GAAGkG,QAYrB,QAASC,GAAInG,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAGS,KAAKR,GAW1B,QAASmG,GAAKpG,GACZ,MAAO,IAAI9J,MAAK8J,GAAGoG,OAWrB,QAASC,GAAMrG,GACb,MAAO,IAAI9J,MAAK8J,GAAGqG,QAWrB,QAASC,GAAKtG,GACZ,MAAO,IAAI9J,MAAK8J,GAAGsG,OAWrB,QAASC,GAAMvG,GACb,MAAO,IAAI9J,MAAK8J,GAAGuG,QA6BrB,QAASC,GAAMvG,EAAGD,GAChBC,EAAI,GAAI/J,MAAK+J,GACbD,EAAI,GAAI9J,MAAK8J,EACb,IAAIhB,GACFiD,EAAK/L,KAAKkK,UACVvB,EAAK3I,KAAK6F,SACVuH,EAAMrB,EAAK,CAkCb,OA/BKhC,GAAEmB,GAAMpB,EAAEoB,EAIHnB,EAAEhC,GAAM+B,EAAE/B,GAKV+B,EAAE/B,GAAKgC,EAAE2F,UACnB5G,EAAIgB,EAAEoB,EAAI,EAAIgB,EAAMlM,KAAM+L,EAAIpD,GAAM,GAAI3I,MAAK,GAC7C8I,EAAEoC,EAAInB,EAAEmB,IAGEnB,EAAEhC,GAAK+B,EAAE4F,UACnB5G,EAAIoD,EAAMlM,KAAMoN,EAAK,GAAGhD,MAAM,IAC9BtB,EAAEoC,EAAInB,EAAEmB,GAGCpB,EAAEoB,EAAI,GACflL,KAAKkK,UAAYkD,EACjBpN,KAAK6F,SAAW,EAChBiD,EAAI9I,KAAKoQ,KAAK9C,GAAOvD,EAAGD,EAAGsD,EAAK,IAChCtD,EAAIoC,EAAMlM,KAAMoN,EAAK,GACrBpN,KAAKkK,UAAY6B,EACjB/L,KAAK6F,SAAW8C,EAChBG,EAAIiB,EAAEmB,EAAI,EAAIpC,EAAEwB,MAAMR,GAAKhB,EAAEyB,KAAKT,IAElChB,EAAI9I,KAAKoQ,KAAK9C,GAAOvD,EAAGD,EAAGsD,EAAK,KAvBhCtE,EAAIoD,EAAMlM,KAAMoN,EAAK,GAAGhD,MAAMN,EAAEoB,EAAI,EAAI,IAAO,KAC/CpC,EAAEoC,EAAInB,EAAEmB,GALRpC,EAAI,GAAI9I,MAAKuL,KA8BRzC,EAWT,QAASyH,GAAKzG,GACZ,MAAO,IAAI9J,MAAK8J,GAAGyG,OAUrB,QAASvH,GAAKc,GACZ,MAAOU,GAASV,EAAI,GAAI9J,MAAK8J,GAAIA,EAAEhE,EAAI,EAAG,GAqB5C,QAASN,GAAO3E,GACd,IAAKA,GAAsB,gBAARA,GAAkB,KAAMU,OAAMiP,GAAe,kBAChE,IAAIhN,GAAG9C,EAAG+P,EACRC,GACE,YAAa,EAAGd,GAChB,WAAY,EAAG,EACf,YAAae,GAAW,EACxB,WAAY,EAAGA,GACf,OAAQ,EAAGA,GACX,QAASA,GAAW,EACpB,SAAU,EAAG,EAGjB,KAAKnN,EAAI,EAAGA,EAAIkN,EAAGhN,OAAQF,GAAK,EAC9B,GAA6B,UAAxBiN,EAAI5P,EAAIH,EAAIgQ,EAAGlN,KAAiB,CACnC,KAAIkJ,GAAU+D,KAAOA,GAAKA,GAAKC,EAAGlN,EAAI,IAAMiN,GAAKC,EAAGlN,EAAI,IACnD,KAAMjC,OAAMkH,GAAkB/H,EAAI,KAAO+P,EADczQ,MAAKU,GAAK+P,EAK1E,GAAgC,UAA3BA,EAAI5P,EAAIH,EAAI,WAAuB,CACtC,GAAI+P,KAAM,GAAQA,KAAM,GAAe,IAANA,GAAiB,IAANA,EAY1C,KAAMlP,OAAMkH,GAAkB/H,EAAI,KAAO+P,EAXzC,IAAIA,EAAG,CACL,GAAqB,mBAAVG,UAAyBA,SACjCA,OAAOC,kBAAmBD,OAAOE,YAGlC,KAAMvP,OAAMwP,GAFZ/Q,MAAKU,IAAK,MAKZV,MAAKU,IAAK,EAOhB,MAAOV,MAWT,QAASgR,GAAIlH,GACX,MAAO,IAAI9J,MAAK8J,GAAGkH,MAWrB,QAASC,GAAKnH,GACZ,MAAO,IAAI9J,MAAK8J,GAAGmH,OASrB,QAAStL,GAAM9E,GAUb,QAAS4E,GAAQgL,GACf,GAAI3K,GAAGtC,EAAG2J,EACRrD,EAAI9J,IAGN,MAAM8J,YAAarE,IAAU,MAAO,IAAIA,GAAQgL,EAOhD,IAHA3G,EAAEiB,YAActF,EAGZgL,YAAahL,GAIf,MAHAqE,GAAEoB,EAAIuF,EAAEvF,EACRpB,EAAEhE,EAAI2K,EAAE3K,OACRgE,EAAE/B,GAAK0I,EAAIA,EAAE1I,GAAK0I,EAAE5J,QAAU4J,EAMhC,IAFAtD,QAAWsD,GAED,WAANtD,EAAgB,CAClB,GAAU,IAANsD,EAIF,MAHA3G,GAAEoB,EAAI,EAAIuF,EAAI,GAAI,EAAK,EACvB3G,EAAEhE,EAAI,OACNgE,EAAE/B,GAAK,GAYT,IARI0I,EAAI,GACNA,GAAKA,EACL3G,EAAEoB,GAAI,GAENpB,EAAEoB,EAAI,EAIJuF,MAAQA,GAAKA,EAAI,IAAK,CACxB,IAAK3K,EAAI,EAAGtC,EAAIiN,EAAGjN,GAAK,GAAIA,GAAK,GAAIsC,GAGrC,OAFAgE,GAAEhE,EAAIA,OACNgE,EAAE/B,GAAK0I,IAIF,MAAQ,GAAJA,IAAU,GACdA,IAAG3G,EAAEoB,EAAIK,KACdzB,EAAEhE,EAAIyF,SACNzB,EAAE/B,EAAI,OAID8F,EAAa/D,EAAG2G,EAAExG,YAEpB,GAAU,WAANkD,EACT,KAAM5L,OAAMkH,GAAkBgI,EAWhC,OAPwB,MAApBA,EAAEzC,WAAW,IACfyC,EAAIA,EAAE5J,MAAM,GACZiD,EAAEoB,GAAI,GAENpB,EAAEoB,EAAI,EAGDgG,GAAU3C,KAAKkC,GAAK5C,EAAa/D,EAAG2G,GAAKxC,EAAWnE,EAAG2G,GA1EhE,GAAIjN,GAAG9C,EAAGgQ,CAmIV,IAtDAjL,EAAQ5B,UAAYsN,GAEpB1L,EAAQ2L,SAAW,EACnB3L,EAAQ4L,WAAa,EACrB5L,EAAQ6L,WAAa,EACrB7L,EAAQ8L,YAAc,EACtB9L,EAAQ+L,cAAgB,EACxB/L,EAAQgM,gBAAkB,EAC1BhM,EAAQiM,gBAAkB,EAC1BjM,EAAQkM,gBAAkB,EAC1BlM,EAAQmM,iBAAmB,EAC3BnM,EAAQoM,OAAS,EAEjBpM,EAAQD,OAASC,EAAQqM,IAAMtM,EAC/BC,EAAQE,MAAQA,EAEhBF,EAAQvD,IAAMA,EACduD,EAAQsK,KAAOA,EACftK,EAAQuK,MAAQA,EAChBvK,EAAQwK,IAAMA,EACdxK,EAAQyK,KAAOA,EACfzK,EAAQ0K,MAAQA,EAChB1K,EAAQ2K,KAAOA,EACf3K,EAAQ4K,MAAQA,EAChB5K,EAAQ6K,MAAQA,EAChB7K,EAAQ8K,KAAOA,EACf9K,EAAQuD,KAAOA,EACfvD,EAAQuL,IAAMA,EACdvL,EAAQwL,KAAOA,EACfxL,EAAQO,IAAMA,EACdP,EAAQsM,IAAMA,EACdtM,EAAQpD,MAAQA,EAChBoD,EAAQuM,MAAQA,EAChBvM,EAAQwM,GAAKA,EACbxM,EAAQX,IAAMA,EACdW,EAAQb,MAAQA,EAChBa,EAAQyM,KAAOA,EACfzM,EAAQP,IAAMA,EACdO,EAAQ+C,IAAMA,GACd/C,EAAQ0M,IAAMA,GACd1M,EAAQ2M,IAAMA,GACd3M,EAAQL,IAAMA,GACdK,EAAQ4M,OAASA,GACjB5M,EAAQT,MAAQA,GAChBS,EAAQ6M,KAAOA,GACf7M,EAAQ8M,IAAMA,GACd9M,EAAQ+M,KAAOA,GACf/M,EAAQmJ,KAAOA,GACfnJ,EAAQgN,IAAMA,GACdhN,EAAQiN,IAAMA,GACdjN,EAAQkN,KAAOA,GACflN,EAAQmN,MAAQA,GAEJ,SAAR/R,IAAgBA,MAChBA,EAEF,IADA6P,GAAM,YAAa,WAAY,WAAY,WAAY,OAAQ,OAAQ,SAAU,UAC5ElN,EAAI,EAAGA,EAAIkN,EAAGhN,QAAc7C,EAAIiD,eAAepD,EAAIgQ,EAAGlN,QAAO3C,EAAIH,GAAKV,KAAKU,GAKlF,OAFA+E,GAAQD,OAAO3E,GAER4E,EAYT,QAASO,GAAI8D,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAG9D,IAAI+D,GAWzB,QAASgI,GAAIjI,GACX,MAAO,IAAI9J,MAAK8J,GAAGiI,MAUrB,QAAS1P,GAAMyH,GACb,MAAOU,GAASV,EAAI,GAAI9J,MAAK8J,GAAIA,EAAEhE,EAAI,EAAG,GAW5C,QAASkM,KACP,GAAIxO,GAAGgJ,EACLW,EAAI,GAAInN,MAAK,EAIf,KAFAqL,IAAW,EAEN7H,EAAI,EAAGA,EAAIC,UAAUC,QAExB,GADA8I,EAAI,GAAIxM,MAAKyD,UAAUD,MAClBgJ,EAAEzE,EAMIoF,EAAEpF,IACXoF,EAAIA,EAAE5C,KAAKiC,EAAEpC,MAAMoC,SAPX,CACR,GAAIA,EAAEtB,EAEJ,MADAG,KAAW,EACJ,GAAIrL,MAAK,EAAI,EAEtBmN,GAAIX,EAQR,MAFAnB,KAAW,EAEJ8B,EAAEyB,OAWX,QAASqD,GAAGnI,GACV,MAAO,IAAI9J,MAAK8J,GAAGmI,KAcrB,QAASnN,GAAIgF,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAGhF,IAAIiF,GAWzB,QAASmI,GAAKpI,GACZ,MAAO,IAAI9J,MAAK8J,GAAGhF,IAAI,GAWzB,QAASF,GAAMkF,GACb,MAAO,IAAI9J,MAAK8J,GAAGhF,IAAI,IAUzB,QAASI,KACP,MAAO0H,GAAS5M,KAAMyD,UAAW,MAUnC,QAAS+E,MACP,MAAOoE,GAAS5M,KAAMyD,UAAW,MAYnC,QAAS0O,IAAIrI,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAGqI,IAAIpI,GAYzB,QAASqI,IAAItI,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAGsI,IAAIrI,GAYzB,QAAS3E,IAAI0E,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAG1E,IAAI2E,GAYzB,QAASsI,IAAO5H,GACd,GAAI1C,GAAGjC,EAAGkC,EAAGwE,EACXhJ,EAAI,EACJsF,EAAI,GAAI9I,MAAK,GACb+I,IAOF,IALW,SAAP0B,EAAeA,EAAKzK,KAAKkK,UACxB3B,EAAWkC,EAAI,EAAGmF,IAEvB5H,EAAI/F,KAAK+G,KAAKyB,EAAKpC,IAEdrI,KAAK4Q,OAIH,GAAIA,OAAOC,gBAGhB,IAFA9I,EAAI6I,OAAOC,gBAAgB,GAAIgC,aAAY7K,IAEpCxE,EAAIwE,GACTwE,EAAIzE,EAAEvE,GAIFgJ,GAAK,MACPzE,EAAEvE,GAAKoN,OAAOC,gBAAgB,GAAIgC,aAAY,IAAI,GAKlD9J,EAAGvF,KAAOgJ,EAAI,QAKb,CAAA,IAAIoE,OAAOE,YAwBhB,KAAMvP,OAAMwP,GAnBZ,KAFAhJ,EAAI6I,OAAOE,YAAY9I,GAAK,GAErBxE,EAAIwE,GAGTwE,EAAIzE,EAAEvE,IAAMuE,EAAEvE,EAAI,IAAM,IAAMuE,EAAEvE,EAAI,IAAM,MAAmB,IAAXuE,EAAEvE,EAAI,KAAc,IAGlEgJ,GAAK,MACPoE,OAAOE,YAAY,GAAGgC,KAAK/K,EAAGvE,IAK9BuF,EAAGkC,KAAKuB,EAAI,KACZhJ,GAAK,EAITA,GAAIwE,EAAI,MA5CR,MAAOxE,EAAIwE,GAAIe,EAAGvF,KAAuB,IAAhBvB,KAAKoQ,SAAiB,CA2DjD,KAVArK,EAAIe,IAAKvF,GACTiH,GAAMpC,GAGFL,GAAKyC,IACP+B,EAAIvD,GAAQ,GAAIZ,GAAWoC,GAC3B1B,EAAGvF,IAAMwE,EAAIwE,EAAI,GAAKA,GAIP,IAAVzD,EAAGvF,GAAUA,IAAKuF,EAAGqC,KAG5B,IAAI5H,EAAI,EACNsC,EAAI,EACJiD,GAAM,OACD,CAIL,IAHAjD,GAAI,EAGa,IAAViD,EAAG,GAAUjD,GAAKuC,GAAUU,EAAGgK,OAGtC,KAAK/K,EAAI,EAAGwE,EAAIzD,EAAG,GAAIyD,GAAK,GAAIA,GAAK,GAAIxE,GAGrCA,GAAIK,KAAUvC,GAAKuC,GAAWL,GAMpC,MAHAc,GAAEhD,EAAIA,EACNgD,EAAEf,EAAIgB,EAECD,EAYT,QAAS9D,IAAM8E,GACb,MAAOU,GAASV,EAAI,GAAI9J,MAAK8J,GAAIA,EAAEhE,EAAI,EAAG9F,KAAK6F,UAajD,QAASyM,IAAKxI,GAEZ,MADAA,GAAI,GAAI9J,MAAK8J,GACNA,EAAE/B,EAAK+B,EAAE/B,EAAE,GAAK+B,EAAEoB,EAAI,EAAIpB,EAAEoB,EAAKpB,EAAEoB,GAAKK,IAWjD,QAASgH,IAAIzI,GACX,MAAO,IAAI9J,MAAK8J,GAAGyI,MAWrB,QAASC,IAAK1I,GACZ,MAAO,IAAI9J,MAAK8J,GAAG0I,OAWrB,QAAS5D,IAAK9E,GACZ,MAAO,IAAI9J,MAAK8J,GAAG8E,OAYrB,QAAS6D,IAAI3I,EAAGC,GACd,MAAO,IAAI/J,MAAK8J,GAAG2I,IAAI1I,GAWzB,QAAS2I,IAAI5I,GACX,MAAO,IAAI9J,MAAK8J,GAAG4I,MAWrB,QAASC,IAAK7I,GACZ,MAAO,IAAI9J,MAAK8J,GAAG6I,OAUrB,QAASC,IAAM9I,GACb,MAAOU,GAASV,EAAI,GAAI9J,MAAK8J,GAAIA,EAAEhE,EAAI,EAAG,GAroJ5C,GAkFE+J,IAAqBL,GAlFnBmB,GAAY,KAIdf,GAAa,IAGbnG,GAAW,mBAGX1E,GAAO,qgCAGPqH,GAAK,qgCAIL3G,IAOEyE,UAAW,GAiBXrE,SAAU,EAeVmN,OAAQ,EAIRC,UAAU,EAIVC,SAAW,GAIX1H,MAAOmF,GAIPrF,KAAMqF,GAGNC,QAAQ,GAQVvF,IAAW,EAEXmF,GAAe,kBACf/H,GAAkB+H,GAAe,qBACjCvE,GAAyBuE,GAAe,2BACxCO,GAAoBP,GAAe,qBAEnC9D,GAAYzK,KAAKI,MACjB4G,GAAUhH,KAAKmD,IAEfqJ,GAAW,6CACXH,GAAQ,yDACRI,GAAU,gDACVwC,GAAY,qCAEZ/F,GAAO,IACP9C,GAAW,EACX8K,GAAmB,iBAEnBnH,GAAiBjH,GAAKrB,OAAS,EAC/ByI,GAAeC,GAAG1I,OAAS,EAG3ByN,KAyEFA,IAAEiC,cAAgBjC,GAAEjP,IAAM,WACxB,GAAI4H,GAAI,GAAI9J,MAAK+K,YAAY/K,KAE7B,OADI8J,GAAEoB,EAAI,IAAGpB,EAAEoB,EAAI,GACZV,EAASV,IASlBqH,GAAEnI,KAAO,WACP,MAAOwB,GAAS,GAAIxK,MAAK+K,YAAY/K,MAAOA,KAAK8F,EAAI,EAAG,IAY1DqL,GAAEkC,WAAalC,GAAEmC,IAAM,SAAUvJ,GAC/B,GAAIvG,GAAG6F,EAAGkK,EAAKC,EACb1J,EAAI9J,KACJ6K,EAAKf,EAAE/B,EACP0L,GAAM1J,EAAI,GAAID,GAAEiB,YAAYhB,IAAIhC,EAChC2L,EAAK5J,EAAEoB,EACPyI,EAAK5J,EAAEmB,CAGT,KAAKL,IAAO4I,EACV,MAAQC,IAAOC,EAAWD,IAAOC,EAAKD,EAAK7I,IAAO4I,EAAK,GAAK5I,EAAK6I,EAAK,EAAI,GAAI,EAA1DnI,GAItB,KAAKV,EAAG,KAAO4I,EAAG,GAAI,MAAO5I,GAAG,GAAK6I,EAAKD,EAAG,IAAME,EAAK,CAGxD,IAAID,IAAOC,EAAI,MAAOD,EAGtB,IAAI5J,EAAEhE,IAAMiE,EAAEjE,EAAG,MAAOgE,GAAEhE,EAAIiE,EAAEjE,EAAI4N,EAAK,EAAI,GAAI,CAMjD,KAJAH,EAAM1I,EAAGnH,OACT8P,EAAMC,EAAG/P,OAGJF,EAAI,EAAG6F,EAAIkK,EAAMC,EAAMD,EAAMC,EAAKhQ,EAAI6F,IAAK7F,EAC9C,GAAIqH,EAAGrH,KAAOiQ,EAAGjQ,GAAI,MAAOqH,GAAGrH,GAAKiQ,EAAGjQ,GAAKkQ,EAAK,EAAI,GAAI,CAI3D,OAAOH,KAAQC,EAAM,EAAID,EAAMC,EAAME,EAAK,EAAI,GAAI,GAiBpDvC,GAAEvH,OAASuH,GAAEH,IAAM,WACjB,GAAIjF,GAAIpD,EACNmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAKjB,GAAE/B,EAGF+B,EAAE/B,EAAE,IAETgE,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK9J,KAAKiD,IAAI4E,EAAEhE,EAAGgE,EAAEW,MAAQpC,GAC9CwB,EAAKhE,SAAW,EAEhBiE,EAAIF,EAAOC,EAAMsF,EAAiBtF,EAAMC,IAExCD,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAET6B,EAAqB,GAAZgF,IAA6B,GAAZA,GAAgB1F,EAAE8J,MAAQ9J,EAAGiC,EAAIpD,GAAI,IAZlD,GAAIkB,GAAK,GAHZ,GAAIA,GAAK0B,MAmC5B4F,GAAE0C,SAAW1C,GAAEZ,KAAO,WACpB,GAAIzK,GAAGtF,EAAGgM,EAAG1D,EAAGuE,EAAKnC,EAAGT,EAAI0C,EAAG2G,EAAIC,EACjCjK,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,KAAKjB,EAAE6B,YAAc7B,EAAE4F,SAAU,MAAO,IAAI7F,GAAKC,EAoCjD,KAnCAuB,IAAW,EAGXH,EAAIpB,EAAEoB,EAAIjJ,KAAKmD,IAAI0E,EAAEoB,EAAIpB,EAAG,EAAI,GAI3BoB,GAAKjJ,KAAKC,IAAIgJ,IAAM,EAAI,EAqB3BpC,EAAI,GAAIe,GAAKqB,EAAEjB,aApBfuC,EAAI1E,EAAegC,EAAE/B,GACrBjC,EAAIgE,EAAEhE,GAGFoF,GAAKpF,EAAI0G,EAAE9I,OAAS,GAAK,KAAG8I,GAAW,GAALtB,GAAUA,IAAK,EAAK,IAAM,MAChEA,EAAIjJ,KAAKmD,IAAIoH,EAAG,EAAI,GAGpB1G,EAAI4G,IAAW5G,EAAI,GAAK,IAAMA,EAAI,IAAMA,EAAI,GAAI,EAAK,IAEjDoF,GAAK,EAAI,EACXsB,EAAI,KAAO1G,GAEX0G,EAAItB,EAAExI,gBACN8J,EAAIA,EAAE3F,MAAM,EAAG2F,EAAE9C,QAAQ,KAAO,GAAK5D,GAGvCgD,EAAI,GAAIe,GAAK2C,GACb1D,EAAEoC,EAAIpB,EAAEoB,GAKVT,GAAM3E,EAAI+D,EAAKK,WAAa,IAW1B,GANAiD,EAAIrE,EACJgL,EAAK3G,EAAE/C,MAAM+C,GAAG/C,MAAM+C,GACtB4G,EAAUD,EAAGvJ,KAAKT,GAClBhB,EAAIwE,GAAOyG,EAAQxJ,KAAKT,GAAGM,MAAM+C,GAAI4G,EAAQxJ,KAAKuJ,GAAKrJ,EAAK,EAAG,GAG3D3C,EAAeqF,EAAEpF,GAAGlB,MAAM,EAAG4D,MAAS+B,EAAI1E,EAAegB,EAAEf,IAAIlB,MAAM,EAAG4D,GAAK,CAK/E,GAJA+B,EAAIA,EAAE3F,MAAM4D,EAAK,EAAGA,EAAK,GAIhB,QAAL+B,IAAgBa,GAAY,QAALb,GAepB,EAICA,KAAOA,EAAE3F,MAAM,IAAqB,KAAf2F,EAAEnF,OAAO,MAGlCmD,EAAS1B,EAAGhD,EAAI,EAAG,GACnBtF,GAAKsI,EAAEsB,MAAMtB,GAAGsB,MAAMtB,GAAGkL,GAAGlK,GAG9B,OAtBA,IAAKuD,IACH7C,EAAS2C,EAAGrH,EAAI,EAAG,GAEfqH,EAAE/C,MAAM+C,GAAG/C,MAAM+C,GAAG6G,GAAGlK,IAAI,CAC7BhB,EAAIqE,CACJ,OAIJ1C,GAAM,EACN4C,EAAM,EAmBZ,MAFAhC,KAAW,EAEJb,EAAS1B,EAAGhD,EAAG+D,EAAKhE,SAAUrF,IAQvC2Q,GAAE8C,cAAgB9C,GAAE+C,GAAK,WACvB,GAAI9L,GACFL,EAAI/H,KAAK+H,EACTyE,EAAIjB,GAEN,IAAIxD,EAAG,CAML,GALAK,EAAIL,EAAErE,OAAS,EACf8I,GAAKpE,EAAIsE,GAAU1M,KAAK8F,EAAIuC,KAAaA,GAGzCD,EAAIL,EAAEK,GACC,KAAOA,EAAI,IAAM,EAAGA,GAAK,GAAIoE,GAChCA,GAAI,IAAGA,EAAI,GAGjB,MAAOA,IAyBT2E,GAAElL,UAAYkL,GAAEnL,IAAM,SAAU+D,GAC9B,MAAOuD,IAAOtN,KAAM,GAAIA,MAAK+K,YAAYhB,KAS3CoH,GAAEgD,mBAAqBhD,GAAE1B,SAAW,SAAU1F,GAC5C,GAAID,GAAI9J,KACN6J,EAAOC,EAAEiB,WACX,OAAOP,GAAS8C,GAAOxD,EAAG,GAAID,GAAKE,GAAI,EAAG,EAAG,GAAIF,EAAKK,UAAWL,EAAKhE,WAQxEsL,GAAEiD,OAASjD,GAAE6C,GAAK,SAAUjK,GAC1B,MAAuB,KAAhB/J,KAAKsT,IAAIvJ,IASlBoH,GAAE9O,MAAQ,WACR,MAAOmI,GAAS,GAAIxK,MAAK+K,YAAY/K,MAAOA,KAAK8F,EAAI,EAAG,IAS1DqL,GAAEkD,YAAclD,GAAEmD,GAAK,SAAUvK,GAC/B,MAAO/J,MAAKsT,IAAIvJ,GAAK,GASvBoH,GAAEoD,qBAAuBpD,GAAEqD,IAAM,SAAUzK,GACzC,GAAI/B,GAAIhI,KAAKsT,IAAIvJ,EACjB,OAAY,IAAL/B,GAAgB,IAANA,GA6BnBmJ,GAAEsD,iBAAmBtD,GAAEF,KAAO,WAC5B,GAAIjJ,GAAGwE,EAAGT,EAAIpD,EAAIqB,EAChBF,EAAI9J,KACJ6J,EAAOC,EAAEiB,YACT2J,EAAM,GAAI7K,GAAK,EAEjB,KAAKC,EAAE6B,WAAY,MAAO,IAAI9B,GAAKC,EAAEoB,EAAI,EAAI,EAAIK,IACjD,IAAIzB,EAAE4F,SAAU,MAAOgF,EAEvB3I,GAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK9J,KAAKiD,IAAI4E,EAAEhE,EAAGgE,EAAEW,MAAQ,EAC9CZ,EAAKhE,SAAW,EAChBmE,EAAMF,EAAE/B,EAAErE,OAONsG,EAAM,IACRhC,EAAI/F,KAAK+G,KAAKgB,EAAM,GACpBwC,EAAIvK,KAAKmD,IAAI,GAAI4C,GAAGiC,aAEpBjC,EAAI,GACJwE,EAAI,gCAGN1C,EAAIK,EAAaN,EAAM,EAAGC,EAAEM,MAAMoC,GAAI,GAAI3C,GAAK,IAAI,EAMnD,KAHA,GAAI8K,GACFnR,EAAIwE,EACJ4M,EAAK,GAAI/K,GAAK,GACTrG,KACLmR,EAAU7K,EAAEM,MAAMN,GAClBA,EAAI4K,EAAIpK,MAAMqK,EAAQvK,MAAMwK,EAAGtK,MAAMqK,EAAQvK,MAAMwK,KAGrD,OAAOpK,GAASV,EAAGD,EAAKK,UAAY6B,EAAIlC,EAAKhE,SAAW8C,GAAI,IAkC9DwI,GAAE0D,eAAiB1D,GAAEqB,KAAO,WAC1B,GAAIxK,GAAG+D,EAAIpD,EAAIqB,EACbF,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,KAAKjB,EAAE6B,YAAc7B,EAAE4F,SAAU,MAAO,IAAI7F,GAAKC,EAQjD,IANAiC,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK9J,KAAKiD,IAAI4E,EAAEhE,EAAGgE,EAAEW,MAAQ,EAC9CZ,EAAKhE,SAAW,EAChBmE,EAAMF,EAAE/B,EAAErE,OAENsG,EAAM,EACRF,EAAIK,EAAaN,EAAM,EAAGC,EAAGA,GAAG,OAC3B,CAWL9B,EAAI,IAAM/F,KAAK2M,KAAK5E,GACpBhC,EAAIA,EAAI,GAAK,GAAS,EAAJA,EAElB8B,EAAIA,EAAEM,MAAMnI,KAAKmD,IAAI,GAAI4C,IAEzB8B,EAAIK,EAAaN,EAAM,EAAGC,EAAGA,GAAG,EAOhC,KAJA,GAAIgL,GACFhG,EAAK,GAAIjF,GAAK,GACdkF,EAAM,GAAIlF,GAAK,IACfmF,EAAM,GAAInF,GAAK,IACV7B,KACL8M,EAAUhL,EAAEM,MAAMN,GAClBA,EAAIA,EAAEM,MAAM0E,EAAGvE,KAAKuK,EAAQ1K,MAAM2E,EAAI3E,MAAM0K,GAASvK,KAAKyE,MAO9D,MAHAnF,GAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAET6B,EAASV,EAAGiC,EAAIpD,GAAI,IAoB7BwI,GAAE4D,kBAAoB5D,GAAEwB,KAAO,WAC7B,GAAI5G,GAAIpD,EACNmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAKjB,GAAE6B,WACH7B,EAAE4F,SAAiB,GAAI7F,GAAKC,IAEhCiC,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK,EACtBlC,EAAKhE,SAAW,EAETyH,GAAOxD,EAAE0I,OAAQ1I,EAAEmH,OAAQpH,EAAKK,UAAY6B,EAAIlC,EAAKhE,SAAW8C,IAR7C,GAAIkB,GAAKC,EAAEoB,IA+BvCiG,GAAE6D,cAAgB7D,GAAEpB,KAAO,WACzB,GAAIT,GACFxF,EAAI9J,KACJ6J,EAAOC,EAAEiB,YACT/C,EAAI8B,EAAE5H,MAAMoR,IAAI,GAChBvH,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,QAEZ,OAAImC,MAAM,EACK,IAANA,EAEH8B,EAAEsF,QAAUlD,EAAMrC,EAAMkC,EAAIpD,GAAM,GAAIkB,GAAK,GAE3C,GAAIA,GAAK0B,KAGXzB,EAAE4F,SAAiBxD,EAAMrC,EAAMkC,EAAK,EAAGpD,GAAIyB,MAAM,KAIrDP,EAAKK,UAAY6B,EAAK,EACtBlC,EAAKhE,SAAW,EAEhBiE,EAAIA,EAAEoG,OACNZ,EAASpD,EAAMrC,EAAMkC,EAAK,EAAGpD,GAAIyB,MAAM,IAEvCP,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAET2G,EAAOhF,MAAMR,KAuBtBqH,GAAE8D,wBAA0B9D,GAAEnB,MAAQ,WACpC,GAAIjE,GAAIpD,EACNmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAIjB,GAAEyF,IAAI,GAAW,GAAI1F,GAAKC,EAAEkK,GAAG,GAAK,EAAIzI,KACvCzB,EAAE6B,YAEPI,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK9J,KAAKiD,IAAIjD,KAAKC,IAAI4H,EAAEhE,GAAIgE,EAAEW,MAAQ,EACxDZ,EAAKhE,SAAW,EAChBwF,IAAW,EAEXvB,EAAIA,EAAEM,MAAMN,GAAGQ,MAAM,GAAGsE,OAAOrE,KAAKT,GAEpCuB,IAAW,EACXxB,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAETmB,EAAEmI,MAdiB,GAAIpI,GAAKC,IAkCrCqH,GAAE+D,sBAAwB/D,GAAEhB,MAAQ,WAClC,GAAIpE,GAAIpD,EACNmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,QAAKjB,EAAE6B,YAAc7B,EAAE4F,SAAiB,GAAI7F,GAAKC,IAEjDiC,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK,EAAI9J,KAAKiD,IAAIjD,KAAKC,IAAI4H,EAAEhE,GAAIgE,EAAEW,MAAQ,EAC5DZ,EAAKhE,SAAW,EAChBwF,IAAW,EAEXvB,EAAIA,EAAEM,MAAMN,GAAGS,KAAK,GAAGqE,OAAOrE,KAAKT,GAEnCuB,IAAW,EACXxB,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAETmB,EAAEmI,OAuBXd,GAAEgE,yBAA2BhE,GAAEd,MAAQ,WACrC,GAAItE,GAAIpD,EAAIyE,EAAKgI,EACftL,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAKjB,GAAE6B,WACH7B,EAAEhE,GAAK,EAAU,GAAI+D,GAAKC,EAAE5H,MAAM8R,GAAG,GAAKlK,EAAEoB,EAAI,EAAIpB,EAAE4F,SAAW5F,EAAIyB,MAEzEQ,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVuP,EAAMtL,EAAEW,KAEJxI,KAAKiD,IAAIkQ,EAAKrJ,GAAM,GAAKjC,EAAEhE,EAAI,EAAU0E,EAAS,GAAIX,GAAKC,GAAIiC,EAAIpD,GAAI,IAE3EkB,EAAKK,UAAYkD,EAAMgI,EAAMtL,EAAEhE,EAE/BgE,EAAIwD,GAAOxD,EAAES,KAAK,GAAI,GAAIV,GAAK,GAAGS,MAAMR,GAAIsD,EAAMrB,EAAI,GAEtDlC,EAAKK,UAAY6B,EAAK,EACtBlC,EAAKhE,SAAW,EAEhBiE,EAAIA,EAAEmI,KAENpI,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAETmB,EAAEM,MAAM,MArBW,GAAIP,GAAK0B,MA8CrC4F,GAAEkE,YAAclE,GAAEjB,KAAO,WACvB,GAAIZ,GAAQtH,EACV+D,EAAIpD,EACJmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAIjB,GAAE4F,SAAiB,GAAI7F,GAAKC,IAEhC9B,EAAI8B,EAAE5H,MAAMoR,IAAI,GAChBvH,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SAENmC,KAAM,EAGE,IAANA,GACFsH,EAASpD,EAAMrC,EAAMkC,EAAK,EAAGpD,GAAIyB,MAAM,IACvCkF,EAAOpE,EAAIpB,EAAEoB,EACNoE,GAIF,GAAIzF,GAAK0B,MAKlB1B,EAAKK,UAAY6B,EAAK,EACtBlC,EAAKhE,SAAW,EAEhBiE,EAAIA,EAAE9D,IAAI,GAAI6D,GAAK,GAAGS,MAAMR,EAAEM,MAAMN,IAAI8E,OAAOrE,KAAK,IAAI6F,OAExDvG,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAETmB,EAAEM,MAAM,MAsBjB+G,GAAEmE,eAAiBnE,GAAEf,KAAO,WAC1B,GAAI5M,GAAG6F,EAAGrB,EAAGwE,EAAG+I,EAAIpI,EAAGrE,EAAGsE,EAAKO,EAC7B7D,EAAI9J,KACJ6J,EAAOC,EAAEiB,YACTgB,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,QAEZ,IAAKiE,EAAE6B,WAOA,CAAA,GAAI7B,EAAE4F,SACX,MAAO,IAAI7F,GAAKC,EACX,IAAIA,EAAE5H,MAAM8R,GAAG,IAAMjI,EAAK,GAAKI,GAGpC,MAFArD,GAAIoD,EAAMrC,EAAMkC,EAAK,EAAGpD,GAAIyB,MAAM,KAClCtB,EAAEoC,EAAIpB,EAAEoB,EACDpC,MAZU,CACjB,IAAKgB,EAAEoB,EAAG,MAAO,IAAIrB,GAAK0B,IAC1B,IAAIQ,EAAK,GAAKI,GAGZ,MAFArD,GAAIoD,EAAMrC,EAAMkC,EAAK,EAAGpD,GAAIyB,MAAM,IAClCtB,EAAEoC,EAAIpB,EAAEoB,EACDpC,EAqBX,IAXAe,EAAKK,UAAYkD,EAAMrB,EAAK,GAC5BlC,EAAKhE,SAAW,EAQhBmC,EAAI/F,KAAKuG,IAAI,GAAI4E,EAAM/E,GAAW,EAAI,GAEjC7E,EAAIwE,EAAGxE,IAAKA,EAAGsG,EAAIA,EAAE9D,IAAI8D,EAAEM,MAAMN,GAAGS,KAAK,GAAGqE,OAAOrE,KAAK,GAW7D,KATAc,IAAW,EAEXhC,EAAIpH,KAAK+G,KAAKoE,EAAM/E,IACpBmE,EAAI,EACJmB,EAAK7D,EAAEM,MAAMN,GACbhB,EAAI,GAAIe,GAAKC,GACbyL,EAAKzL,EAGEtG,KAAM,GAOX,GANA+R,EAAKA,EAAGnL,MAAMuD,GACdR,EAAIrE,EAAEwB,MAAMiL,EAAGvP,IAAIwG,GAAK,IAExB+I,EAAKA,EAAGnL,MAAMuD,GACd7E,EAAIqE,EAAE5C,KAAKgL,EAAGvP,IAAIwG,GAAK,IAER,SAAX1D,EAAEf,EAAEsB,GAAe,IAAK7F,EAAI6F,EAAGP,EAAEf,EAAEvE,KAAO2J,EAAEpF,EAAEvE,IAAMA,MAO1D,MAJIwE,KAAGc,EAAIA,EAAEsB,MAAM,GAAMpC,EAAI,IAE7BqD,IAAW,EAEJb,EAAS1B,EAAGe,EAAKK,UAAY6B,EAAIlC,EAAKhE,SAAW8C,GAAI,IAQ9DwI,GAAExF,SAAW,WACX,QAAS3L,KAAK+H,GAQhBoJ,GAAEqE,UAAYrE,GAAEsE,MAAQ,WACtB,QAASzV,KAAK+H,GAAK2E,GAAU1M,KAAK8F,EAAIuC,IAAYrI,KAAK+H,EAAErE,OAAS,GAQpEyN,GAAEuE,MAAQ,WACR,OAAQ1V,KAAKkL,GAQfiG,GAAEwE,WAAaxE,GAAE/B,MAAQ,WACvB,MAAOpP,MAAKkL,EAAI,GAQlBiG,GAAEyE,WAAazE,GAAE0E,MAAQ,WACvB,MAAO7V,MAAKkL,EAAI,GAQlBiG,GAAEzB,OAAS,WACT,QAAS1P,KAAK+H,GAAmB,IAAd/H,KAAK+H,EAAE,IAQ5BoJ,GAAE2E,SAAW3E,GAAE4E,GAAK,SAAUhM,GAC5B,MAAO/J,MAAKsT,IAAIvJ,GAAK,GAQvBoH,GAAE6E,kBAAoB7E,GAAE5B,IAAM,SAAUxF,GACtC,MAAO/J,MAAKsT,IAAIvJ,GAAK,GAkCvBoH,GAAE8E,UAAY9E,GAAErM,IAAM,SAAUoJ,GAC9B,GAAIgI,GAAUnO,EAAGiF,EAAahF,EAAGmO,EAAKC,EAAK3L,EAAI3B,EAC7CuN,EAAMrW,KACN6J,EAAOwM,EAAItL,YACXgB,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVoH,EAAQ,CAGV,IAAY,MAARiB,EACFA,EAAO,GAAIrE,GAAK,IAChBqM,GAAW,MACN,CAKL,GAJAhI,EAAO,GAAIrE,GAAKqE,GAChBnG,EAAImG,EAAKnG,EAGLmG,EAAKhD,EAAI,IAAMnD,IAAMA,EAAE,IAAMmG,EAAK8F,GAAG,GAAI,MAAO,IAAInK,GAAK0B,IAE7D2K,GAAWhI,EAAK8F,GAAG,IAMrB,GAHAjM,EAAIsO,EAAItO,EAGJsO,EAAInL,EAAI,IAAMnD,IAAMA,EAAE,IAAMsO,EAAIrC,GAAG,GACrC,MAAO,IAAInK,GAAK9B,IAAMA,EAAE,IAAK,EAAK,EAAa,GAATsO,EAAInL,EAASK,IAAMxD,EAAI,EAAI,EAAI,EAKvE,IAAImO,EACF,GAAInO,EAAErE,OAAS,EACbyS,GAAM,MACD,CACL,IAAKnO,EAAID,EAAE,GAAIC,EAAI,KAAO,GAAIA,GAAK,EACnCmO,GAAY,IAANnO,EA0BV,GAtBAqD,IAAW,EACXZ,EAAKsB,EAAKkB,EACVmJ,EAAM7I,EAAiB8I,EAAK5L,GAC5BuC,EAAckJ,EAAWpK,EAAQjC,EAAMY,EAAK,IAAM8C,EAAiBW,EAAMzD,GAGzE3B,EAAIwE,GAAO8I,EAAKpJ,EAAavC,EAAI,GAgB7B/B,EAAoBI,EAAEf,EAAGC,EAAI+D,EAAIpD,GAEnC,EAME,IALA8B,GAAM,GACN2L,EAAM7I,EAAiB8I,EAAK5L,GAC5BuC,EAAckJ,EAAWpK,EAAQjC,EAAMY,EAAK,IAAM8C,EAAiBW,EAAMzD,GACzE3B,EAAIwE,GAAO8I,EAAKpJ,EAAavC,EAAI,IAE5B0L,EAAK,EAGHrO,EAAegB,EAAEf,GAAGlB,MAAMmB,EAAI,EAAGA,EAAI,IAAM,GAAK,OACnDc,EAAI0B,EAAS1B,EAAGiD,EAAK,EAAG,GAG1B,aAEKrD,EAAoBI,EAAEf,EAAGC,GAAK,GAAIW,GAK7C,OAFA0C,KAAW,EAEJb,EAAS1B,EAAGiD,EAAIpD,IAiDzBwI,GAAE7G,MAAQ6G,GAAEsB,IAAM,SAAU1I,GAC1B,GAAIhC,GAAGjC,EAAGtC,EAAG6F,EAAGrB,EAAGgC,EAAK+B,EAAIpD,EAAIkC,EAAIwD,EAAIiI,EAAM7C,EAC5C3J,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAKX,IAHAhB,EAAI,GAAIF,GAAKE,IAGRD,EAAE/B,IAAMgC,EAAEhC,EAab,MAVK+B,GAAEoB,GAAMnB,EAAEmB,EAGNpB,EAAE/B,EAAGgC,EAAEmB,GAAKnB,EAAEmB,EAKlBnB,EAAI,GAAIF,GAAKE,EAAEhC,GAAK+B,EAAEoB,IAAMnB,EAAEmB,EAAIpB,EAAIyB,KARzBxB,EAAI,GAAIF,GAAK0B,KAUxBxB,CAIT,IAAID,EAAEoB,GAAKnB,EAAEmB,EAEX,MADAnB,GAAEmB,GAAKnB,EAAEmB,EACFpB,EAAES,KAAKR,EAShB,IANAc,EAAKf,EAAE/B,EACP0L,EAAK1J,EAAEhC,EACPgE,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,UAGLgF,EAAG,KAAO4I,EAAG,GAAI,CAGpB,GAAIA,EAAG,GAAI1J,EAAEmB,GAAKnB,EAAEmB,MAGf,CAAA,IAAIL,EAAG,GAIP,MAAO,IAAIhB,GAAY,IAAPlB,GAAW,EAAK,EAJrBoB,GAAI,GAAIF,GAAKC,GAM7B,MAAOuB,IAAWb,EAAST,EAAGgC,EAAIpD,GAAMoB,EAa1C,GAPAjE,EAAI4G,GAAU3C,EAAEjE,EAAIuC,IACpBgG,EAAK3B,GAAU5C,EAAEhE,EAAIuC,IAErBwC,EAAKA,EAAGhE,QACRmB,EAAIqG,EAAKvI,EAGF,CAyBL,IAxBAwQ,EAAOtO,EAAI,EAEPsO,GACFvO,EAAI8C,EACJ7C,GAAKA,EACLgC,EAAMyJ,EAAG/P,SAETqE,EAAI0L,EACJ3N,EAAIuI,EACJrE,EAAMa,EAAGnH,QAMXF,EAAIvB,KAAKiD,IAAIjD,KAAK+G,KAAK+C,EAAK1D,IAAW2B,GAAO,EAE1ChC,EAAIxE,IACNwE,EAAIxE,EACJuE,EAAErE,OAAS,GAIbqE,EAAE4B,UACGnG,EAAIwE,EAAGxE,KAAMuE,EAAEkD,KAAK,EACzBlD,GAAE4B,cAGG,CASL,IALAnG,EAAIqH,EAAGnH,OACPsG,EAAMyJ,EAAG/P,OACT4S,EAAO9S,EAAIwG,EACPsM,IAAMtM,EAAMxG,GAEXA,EAAI,EAAGA,EAAIwG,EAAKxG,IACnB,GAAIqH,EAAGrH,IAAMiQ,EAAGjQ,GAAI,CAClB8S,EAAOzL,EAAGrH,GAAKiQ,EAAGjQ,EAClB,OAIJwE,EAAI,EAcN,IAXIsO,IACFvO,EAAI8C,EACJA,EAAK4I,EACLA,EAAK1L,EACLgC,EAAEmB,GAAKnB,EAAEmB,GAGXlB,EAAMa,EAAGnH,OAIJF,EAAIiQ,EAAG/P,OAASsG,EAAKxG,EAAI,IAAKA,EAAGqH,EAAGb,KAAS,CAGlD,KAAKxG,EAAIiQ,EAAG/P,OAAQF,EAAIwE,GAAI,CAE1B,GAAI6C,IAAKrH,GAAKiQ,EAAGjQ,GAAI,CACnB,IAAK6F,EAAI7F,EAAG6F,GAAiB,IAAZwB,IAAKxB,IAAWwB,EAAGxB,GAAK8B,GAAO,IAC9CN,EAAGxB,GACLwB,EAAGrH,IAAM2H,GAGXN,EAAGrH,IAAMiQ,EAAGjQ,GAId,KAAqB,IAAdqH,IAAKb,IAAaa,EAAGO,KAG5B,MAAiB,IAAVP,EAAG,GAAUA,EAAGkI,UAAWjN,CAGlC,OAAK+E,GAAG,IAERd,EAAEhC,EAAI8C,EACNd,EAAEjE,EAAI+F,EAAkBhB,EAAI/E,GAErBuF,GAAWb,EAAST,EAAGgC,EAAIpD,GAAMoB,GALrB,GAAIF,GAAY,IAAPlB,GAAW,EAAK,IAiC9CwI,GAAE6B,OAAS7B,GAAEgB,IAAM,SAAUpI,GAC3B,GAAIwM,GACFzM,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAKX,OAHAhB,GAAI,GAAIF,GAAKE,IAGRD,EAAE/B,IAAMgC,EAAEmB,GAAKnB,EAAEhC,IAAMgC,EAAEhC,EAAE,GAAW,GAAI8B,GAAK0B,MAG/CxB,EAAEhC,GAAK+B,EAAE/B,IAAM+B,EAAE/B,EAAE,GACfyC,EAAS,GAAIX,GAAKC,GAAID,EAAKK,UAAWL,EAAKhE,WAIpDwF,IAAW,EAEQ,GAAfxB,EAAKmJ,QAIPuD,EAAIjJ,GAAOxD,EAAGC,EAAE7H,MAAO,EAAG,EAAG;AAC7BqU,EAAErL,GAAKnB,EAAEmB,GAETqL,EAAIjJ,GAAOxD,EAAGC,EAAG,EAAGF,EAAKmJ,OAAQ,GAGnCuD,EAAIA,EAAEnM,MAAML,GAEZsB,IAAW,EAEJvB,EAAEQ,MAAMiM,KAUjBpF,GAAEpE,mBAAqBoE,GAAEY,IAAM,WAC7B,MAAOhF,GAAmB/M,OAS5BmR,GAAE5D,iBAAmB4D,GAAEc,GAAK,WAC1B,MAAO1E,GAAiBvN,OAS1BmR,GAAEqF,QAAUrF,GAAEyC,IAAM,WAClB,GAAI9J,GAAI,GAAI9J,MAAK+K,YAAY/K,KAE7B,OADA8J,GAAEoB,GAAKpB,EAAEoB,EACFV,EAASV,IAyBlBqH,GAAE5G,KAAO4G,GAAElB,IAAM,SAAUlG,GACzB,GAAI0M,GAAO1O,EAAGjC,EAAGtC,EAAGwE,EAAGgC,EAAK+B,EAAIpD,EAAIkC,EAAI4I,EACtC3J,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAKX,IAHAhB,EAAI,GAAIF,GAAKE,IAGRD,EAAE/B,IAAMgC,EAAEhC,EAWb,MARK+B,GAAEoB,GAAMnB,EAAEmB,EAMLpB,EAAE/B,IAAGgC,EAAI,GAAIF,GAAKE,EAAEhC,GAAK+B,EAAEoB,IAAMnB,EAAEmB,EAAIpB,EAAIyB,MANnCxB,EAAI,GAAIF,GAAK0B,KAQxBxB,CAIT,IAAID,EAAEoB,GAAKnB,EAAEmB,EAEX,MADAnB,GAAEmB,GAAKnB,EAAEmB,EACFpB,EAAEQ,MAAMP,EASjB,IANAc,EAAKf,EAAE/B,EACP0L,EAAK1J,EAAEhC,EACPgE,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,UAGLgF,EAAG,KAAO4I,EAAG,GAMhB,MAFKA,GAAG,KAAI1J,EAAI,GAAIF,GAAKC,IAElBuB,GAAWb,EAAST,EAAGgC,EAAIpD,GAAMoB,CAa1C,IAPA/B,EAAI0E,GAAU5C,EAAEhE,EAAIuC,IACpBvC,EAAI4G,GAAU3C,EAAEjE,EAAIuC,IAEpBwC,EAAKA,EAAGhE,QACRrD,EAAIwE,EAAIlC,EAGD,CAuBL,IArBItC,EAAI,GACNuE,EAAI8C,EACJrH,GAAKA,EACLwG,EAAMyJ,EAAG/P,SAETqE,EAAI0L,EACJ3N,EAAIkC,EACJgC,EAAMa,EAAGnH,QAIXsE,EAAI/F,KAAK+G,KAAK+C,EAAK1D,IACnB2B,EAAMhC,EAAIgC,EAAMhC,EAAI,EAAIgC,EAAM,EAE1BxG,EAAIwG,IACNxG,EAAIwG,EACJjC,EAAErE,OAAS,GAIbqE,EAAE4B,UACKnG,KAAMuE,EAAEkD,KAAK,EACpBlD,GAAE4B,UAeJ,IAZAK,EAAMa,EAAGnH,OACTF,EAAIiQ,EAAG/P,OAGHsG,EAAMxG,EAAI,IACZA,EAAIwG,EACJjC,EAAI0L,EACJA,EAAK5I,EACLA,EAAK9C,GAIF0O,EAAQ,EAAGjT,GACdiT,GAAS5L,IAAKrH,GAAKqH,EAAGrH,GAAKiQ,EAAGjQ,GAAKiT,GAAStL,GAAO,EACnDN,EAAGrH,IAAM2H,EAUX,KAPIsL,IACF5L,EAAGiF,QAAQ2G,KACT3Q,GAKCkE,EAAMa,EAAGnH,OAAqB,GAAbmH,IAAKb,IAAYa,EAAGO,KAK1C,OAHArB,GAAEhC,EAAI8C,EACNd,EAAEjE,EAAI+F,EAAkBhB,EAAI/E,GAErBuF,GAAWb,EAAST,EAAGgC,EAAIpD,GAAMoB,GAU1CoH,GAAEjH,UAAYiH,GAAE1G,GAAK,SAAUiM,GAC7B,GAAI1O,GACF8B,EAAI9J,IAEN,IAAU,SAAN0W,GAAgBA,MAAQA,GAAW,IAANA,GAAiB,IAANA,EAAS,KAAMnV,OAAMkH,GAAkBiO,EASnF,OAPI5M,GAAE/B,GACJC,EAAIqE,EAAavC,EAAE/B,GACf2O,GAAK5M,EAAEhE,EAAI,EAAIkC,IAAGA,EAAI8B,EAAEhE,EAAI,IAEhCkC,EAAIuD,IAGCvD,GASTmJ,GAAEnM,MAAQ,WACR,GAAI8E,GAAI9J,KACN6J,EAAOC,EAAEiB,WAEX,OAAOP,GAAS,GAAIX,GAAKC,GAAIA,EAAEhE,EAAI,EAAG+D,EAAKhE,WAmB7CsL,GAAExC,KAAOwC,GAAEoB,IAAM,WACf,GAAIxG,GAAIpD,EACNmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAKjB,GAAE6B,WACH7B,EAAE4F,SAAiB,GAAI7F,GAAKC,IAEhCiC,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK9J,KAAKiD,IAAI4E,EAAEhE,EAAGgE,EAAEW,MAAQpC,GAC9CwB,EAAKhE,SAAW,EAEhBiE,EAAI6E,EAAK9E,EAAMsF,EAAiBtF,EAAMC,IAEtCD,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAET6B,EAASgF,GAAW,EAAI1F,EAAE8J,MAAQ9J,EAAGiC,EAAIpD,GAAI,IAb1B,GAAIkB,GAAK0B,MA6BrC4F,GAAEwF,WAAaxF,GAAEvC,KAAO,WACtB,GAAIpO,GAAGgM,EAAG/B,EAAI3B,EAAGuE,EAAKF,EACpBrD,EAAI9J,KACJ+H,EAAI+B,EAAE/B,EACNjC,EAAIgE,EAAEhE,EACNoF,EAAIpB,EAAEoB,EACNrB,EAAOC,EAAEiB,WAGX,IAAU,IAANG,IAAYnD,IAAMA,EAAE,GACtB,MAAO,IAAI8B,IAAMqB,GAAKA,EAAI,KAAOnD,GAAKA,EAAE,IAAMwD,IAAMxD,EAAI+B,EAAI,EAAI,EAgClE,KA7BAuB,IAAW,EAGXH,EAAIjJ,KAAK2M,MAAM9E,GAIN,GAALoB,GAAUA,GAAK,EAAI,GACrBsB,EAAI1E,EAAeC,IAEdyE,EAAE9I,OAASoC,GAAK,GAAK,IAAG0G,GAAK,KAClCtB,EAAIjJ,KAAK2M,KAAKpC,GACd1G,EAAI4G,IAAW5G,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GAEvCoF,GAAK,EAAI,EACXsB,EAAI,KAAO1G,GAEX0G,EAAItB,EAAExI,gBACN8J,EAAIA,EAAE3F,MAAM,EAAG2F,EAAE9C,QAAQ,KAAO,GAAK5D,GAGvCgD,EAAI,GAAIe,GAAK2C,IAEb1D,EAAI,GAAIe,GAAKqB,EAAEjB,YAGjBQ,GAAM3E,EAAI+D,EAAKK,WAAa,IAQ1B,GAJAiD,EAAIrE,EACJA,EAAIqE,EAAE5C,KAAK+C,GAAOxD,EAAGqD,EAAG1C,EAAK,EAAG,IAAIL,MAAM,IAGtCtC,EAAeqF,EAAEpF,GAAGlB,MAAM,EAAG4D,MAAS+B,EAAI1E,EAAegB,EAAEf,IAAIlB,MAAM,EAAG4D,GAAK,CAK/E,GAJA+B,EAAIA,EAAE3F,MAAM4D,EAAK,EAAGA,EAAK,GAIhB,QAAL+B,IAAgBa,GAAY,QAALb,GAepB,EAICA,KAAOA,EAAE3F,MAAM,IAAqB,KAAf2F,EAAEnF,OAAO,MAGlCmD,EAAS1B,EAAGhD,EAAI,EAAG,GACnBtF,GAAKsI,EAAEsB,MAAMtB,GAAGkL,GAAGlK,GAGrB,OAtBA,IAAKuD,IACH7C,EAAS2C,EAAGrH,EAAI,EAAG,GAEfqH,EAAE/C,MAAM+C,GAAG6G,GAAGlK,IAAI,CACpBhB,EAAIqE,CACJ,OAIJ1C,GAAM,EACN4C,EAAM,EAmBZ,MAFAhC,KAAW,EAEJb,EAAS1B,EAAGhD,EAAG+D,EAAKhE,SAAUrF,IAiBvC2Q,GAAEyF,QAAUzF,GAAEuB,IAAM,WAClB,GAAI3G,GAAIpD,EACNmB,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAEX,OAAKjB,GAAE6B,WACH7B,EAAE4F,SAAiB,GAAI7F,GAAKC,IAEhCiC,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SACVgE,EAAKK,UAAY6B,EAAK,GACtBlC,EAAKhE,SAAW,EAEhBiE,EAAIA,EAAEyI,MACNzI,EAAEoB,EAAI,EACNpB,EAAIwD,GAAOxD,EAAG,GAAID,GAAK,GAAGS,MAAMR,EAAEM,MAAMN,IAAI8E,OAAQ7C,EAAK,GAAI,GAE7DlC,EAAKK,UAAY6B,EACjBlC,EAAKhE,SAAW8C,EAET6B,EAAqB,GAAZgF,IAA6B,GAAZA,GAAgB1F,EAAE8J,MAAQ9J,EAAGiC,EAAIpD,GAAI,IAf5C,GAAIkB,GAAK0B,MAwCrC4F,GAAE/G,MAAQ+G,GAAEiB,IAAM,SAAUrI,GAC1B,GAAI0M,GAAO3Q,EAAGtC,EAAGwE,EAAGc,EAAG+N,EAAI1J,EAAGoG,EAAKC,EACjC1J,EAAI9J,KACJ6J,EAAOC,EAAEiB,YACTF,EAAKf,EAAE/B,EACP0L,GAAM1J,EAAI,GAAIF,GAAKE,IAAIhC,CAKzB,IAHAgC,EAAEmB,GAAKpB,EAAEoB,IAGJL,GAAOA,EAAG,IAAO4I,GAAOA,EAAG,IAE9B,MAAO,IAAI5J,IAAME,EAAEmB,GAAKL,IAAOA,EAAG,KAAO4I,GAAMA,IAAOA,EAAG,KAAO5I,EAI5DU,IAICV,GAAO4I,EAAqB,EAAN1J,EAAEmB,EAAZnB,EAAEmB,EAAI,EAoBzB,KAjBApF,EAAI4G,GAAU5C,EAAEhE,EAAIuC,IAAYqE,GAAU3C,EAAEjE,EAAIuC,IAChDkL,EAAM1I,EAAGnH,OACT8P,EAAMC,EAAG/P,OAGL6P,EAAMC,IACR1K,EAAI+B,EACJA,EAAK4I,EACLA,EAAK3K,EACL+N,EAAKtD,EACLA,EAAMC,EACNA,EAAMqD,GAIR/N,KACA+N,EAAKtD,EAAMC,EACNhQ,EAAIqT,EAAIrT,KAAMsF,EAAEmC,KAAK,EAG1B,KAAKzH,EAAIgQ,IAAOhQ,GAAK,GAAI,CAEvB,IADAiT,EAAQ,EACHzO,EAAIuL,EAAM/P,EAAGwE,EAAIxE,GACpB2J,EAAIrE,EAAEd,GAAKyL,EAAGjQ,GAAKqH,EAAG7C,EAAIxE,EAAI,GAAKiT,EACnC3N,EAAEd,KAAOmF,EAAIhC,GAAO,EACpBsL,EAAQtJ,EAAIhC,GAAO,CAGrBrC,GAAEd,IAAMc,EAAEd,GAAKyO,GAAStL,GAAO,EAIjC,MAAQrC,IAAI+N,IAAM/N,EAAEsC,KAMpB,KAJIqL,IAAS3Q,EACRgD,EAAEiK,QAGFvP,EAAIsF,EAAEpF,QAASoF,IAAItF,IAAKsF,EAAEsC,KAK/B,OAHArB,GAAEhC,EAAIe,EACNiB,EAAEjE,EAAI+F,EAAkB/C,EAAGhD,GAEpBuF,GAAWb,EAAST,EAAGF,EAAKK,UAAWL,EAAKhE,UAAYkE,GAcjEoH,GAAE2F,SAAW,SAAUrM,EAAI9B,GACzB,MAAOgH,GAAe3P,KAAM,EAAGyK,EAAI9B,IAcrCwI,GAAE4F,gBAAkB5F,GAAE6F,KAAO,SAAU9C,EAAIvL,GACzC,GAAImB,GAAI9J,KACN6J,EAAOC,EAAEiB,WAGX,OADAjB,GAAI,GAAID,GAAKC,GACF,SAAPoK,EAAsBpK,GAE1BvB,EAAW2L,EAAI,EAAGtE,IAEP,SAAPjH,EAAeA,EAAKkB,EAAKhE,SACxB0C,EAAWI,EAAI,EAAG,GAEhB6B,EAASV,EAAGoK,EAAKpK,EAAEhE,EAAI,EAAG6C,KAYnCwI,GAAEzO,cAAgB,SAAUwR,EAAIvL,GAC9B,GAAIR,GACF2B,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAcX,OAZW,UAAPmJ,EACF/L,EAAMsD,EAAe3B,GAAG,IAExBvB,EAAW2L,EAAI,EAAGtE,IAEP,SAAPjH,EAAeA,EAAKkB,EAAKhE,SACxB0C,EAAWI,EAAI,EAAG,GAEvBmB,EAAIU,EAAS,GAAIX,GAAKC,GAAIoK,EAAK,EAAGvL,GAClCR,EAAMsD,EAAe3B,GAAG,EAAMoK,EAAK,IAG9BpK,EAAEsF,UAAYtF,EAAE4F,SAAW,IAAMvH,EAAMA,GAoBhDgJ,GAAE8F,QAAU,SAAU/C,EAAIvL,GACxB,GAAIR,GAAK4B,EACPD,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAgBX,OAdW,UAAPmJ,EACF/L,EAAMsD,EAAe3B,IAErBvB,EAAW2L,EAAI,EAAGtE,IAEP,SAAPjH,EAAeA,EAAKkB,EAAKhE,SACxB0C,EAAWI,EAAI,EAAG,GAEvBoB,EAAIS,EAAS,GAAIX,GAAKC,GAAIoK,EAAKpK,EAAEhE,EAAI,EAAG6C,GACxCR,EAAMsD,EAAe1B,GAAG,EAAOmK,EAAKnK,EAAEjE,EAAI,IAKrCgE,EAAEsF,UAAYtF,EAAE4F,SAAW,IAAMvH,EAAMA,GAehDgJ,GAAE+F,WAAa,SAAUC,GACvB,GAAIpP,GAAGqP,EAAIC,EAAIC,EAAIxR,EAAGkC,EAAGwE,EAAG+K,EAAIC,EAAIzL,EAAIwK,EAAGzN,EACzCgB,EAAI9J,KACJ6K,EAAKf,EAAE/B,EACP8B,EAAOC,EAAEiB,WAEX,KAAKF,EAAI,MAAO,IAAIhB,GAAKC,EAUzB,IARA0N,EAAKJ,EAAK,GAAIvN,GAAK,GACnBwN,EAAKE,EAAK,GAAI1N,GAAK,GAEnB9B,EAAI,GAAI8B,GAAKwN,GACbvR,EAAIiC,EAAEjC,EAAIuG,EAAaxB,GAAMf,EAAEhE,EAAI,EACnCkC,EAAIlC,EAAIuC,GACRN,EAAEA,EAAE,GAAKkB,GAAQ,GAAIjB,EAAI,EAAIK,GAAWL,EAAIA,GAEhC,MAARmP,EAGFA,EAAOrR,EAAI,EAAIiC,EAAIyP,MACd,CAEL,GADAhL,EAAI,GAAI3C,GAAKsN,IACR3K,EAAEiJ,SAAWjJ,EAAEuJ,GAAGyB,GAAK,KAAMjW,OAAMkH,GAAkB+D,EAC1D2K,GAAO3K,EAAE8H,GAAGvM,GAAMjC,EAAI,EAAIiC,EAAIyP,EAAMhL,EAQtC,IALAnB,IAAW,EACXmB,EAAI,GAAI3C,GAAK/B,EAAe+C,IAC5BkB,EAAKlC,EAAKK,UACVL,EAAKK,UAAYpE,EAAI+E,EAAGnH,OAAS2E,GAAW,EAG1CkO,EAAIjJ,GAAOd,EAAGzE,EAAG,EAAG,EAAG,GACvBuP,EAAKF,EAAG7M,KAAKgM,EAAEnM,MAAMiN,IACD,GAAhBC,EAAGhE,IAAI6D,IACXC,EAAKC,EACLA,EAAKC,EACLA,EAAKE,EACLA,EAAKD,EAAGhN,KAAKgM,EAAEnM,MAAMkN,IACrBC,EAAKD,EACLA,EAAKvP,EACLA,EAAIyE,EAAElC,MAAMiM,EAAEnM,MAAMkN,IACpB9K,EAAI8K,CAeN,OAZAA,GAAKhK,GAAO6J,EAAK7M,MAAM8M,GAAKC,EAAI,EAAG,EAAG,GACtCE,EAAKA,EAAGhN,KAAK+M,EAAGlN,MAAMoN,IACtBJ,EAAKA,EAAG7M,KAAK+M,EAAGlN,MAAMiN,IACtBE,EAAGrM,EAAIsM,EAAGtM,EAAIpB,EAAEoB,EAGhBpC,EAAIwE,GAAOkK,EAAIH,EAAIvR,EAAG,GAAGwE,MAAMR,GAAG5H,MAAMoR,IAAIhG,GAAOiK,EAAIH,EAAItR,EAAG,GAAGwE,MAAMR,GAAG5H,OAAS,GAC5EsV,EAAIH,IAAOE,EAAIH,GAEtBvN,EAAKK,UAAY6B,EACjBV,IAAW,EAEJvC,GAcTqI,GAAEsG,cAAgBtG,GAAEuG,MAAQ,SAAUjN,EAAI9B,GACxC,MAAOgH,GAAe3P,KAAM,GAAIyK,EAAI9B,IA2BtCwI,GAAEwG,UAAY,SAAU5N,EAAGpB,GACzB,GAAImB,GAAI9J,KACN6J,EAAOC,EAAEiB,WAIX,IAFAjB,EAAI,GAAID,GAAKC,GAEJ,MAALC,EAAW,CAGb,IAAKD,EAAE/B,EAAG,MAAO+B,EAEjBC,GAAI,GAAIF,GAAK,GACblB,EAAKkB,EAAKhE,aACL,CAKL,GAJAkE,EAAI,GAAIF,GAAKE,GACF,SAAPpB,GAAeJ,EAAWI,EAAI,EAAG,IAGhCmB,EAAE/B,EAAG,MAAOgC,GAAEmB,EAAIpB,EAAIC,CAG3B,KAAKA,EAAEhC,EAEL,MADIgC,GAAEmB,IAAGnB,EAAEmB,EAAIpB,EAAEoB,GACVnB,EAkBX,MAbIA,GAAEhC,EAAE,IACNsD,IAAW,EACP1C,EAAK,IAAGA,GAAM,EAAG,EAAG,EAAG,GAAGA,IAC9BmB,EAAIwD,GAAOxD,EAAGC,EAAG,EAAGpB,EAAI,GAAGyB,MAAML,GACjCsB,IAAW,EACXb,EAASV,KAITC,EAAEmB,EAAIpB,EAAEoB,EACRpB,EAAIC,GAGCD,GASTqH,GAAEyG,SAAW,WACX,OAAQ5X,MAcVmR,GAAE0G,QAAU,SAAUpN,EAAI9B,GACxB,MAAOgH,GAAe3P,KAAM,EAAGyK,EAAI9B,IA+CrCwI,GAAE2G,QAAU3G,GAAE/L,IAAM,SAAU2E,GAC5B,GAAIjE,GAAGkC,EAAG+D,EAAIjD,EAAGH,EAAI2J,EAAMyF,EACzBjO,EAAI9J,KACJ6J,EAAOC,EAAEiB,YACTiN,IAAOjO,EAAI,GAAIF,GAAKE,GAGtB,MAAKD,EAAE/B,GAAMgC,EAAEhC,GAAM+B,EAAE/B,EAAE,IAAOgC,EAAEhC,EAAE,IAAI,MAAQ,IAAI8B,GAAKZ,IAASa,EAAGkO,GAIrE,IAFAlO,EAAI,GAAID,GAAKC,GAETA,EAAEkK,GAAG,GAAI,MAAOlK,EAKpB,IAHAiC,EAAKlC,EAAKK,UACVvB,EAAKkB,EAAKhE,SAENkE,EAAEiK,GAAG,GAAI,MAAOxJ,GAASV,EAAGiC,EAAIpD,EAOpC,IALA7C,EAAI4G,GAAU3C,EAAEjE,EAAIuC,IACpBL,EAAI+B,EAAEhC,EAAErE,OAAS,EACjBqU,EAASjS,GAAKkC,EACdsK,EAAOxI,EAAEoB,EAEJ6M,GAIE,IAAK/P,EAAIgQ,EAAK,GAAKA,EAAKA,IAAO7E,GAEpC,MADArK,GAAIyD,EAAO1C,EAAMC,EAAG9B,EAAG+D,GAChBhC,EAAEmB,EAAI,EAAI,GAAIrB,GAAK,GAAG7D,IAAI8C,GAAK0B,EAAS1B,EAAGiD,EAAIpD,OALtD,IAAI2J,EAAO,EAAG,MAAO,IAAIzI,GAAK0B,IAuBhC,OAdA+G,GAAOA,EAAO,GAA2B,EAAtBvI,EAAEhC,EAAE9F,KAAKiD,IAAIY,EAAGkC,KAAU,EAAK,EAMlDA,EAAIiB,IAASa,EAAGkO,GAChBlS,EAAS,GAALkC,GAAW2D,SAAS3D,GAEpB,GAAI6B,GAAK7B,EAAI,IAAIlC,EADjB4G,GAAUsL,GAAM/V,KAAK6C,IAAI,KAAOgD,EAAegC,EAAE/B,IAAM9F,KAAK8C,KAAO+E,EAAEhE,EAAI,IAMzEA,EAAI+D,EAAKyB,KAAO,GAAKxF,EAAI+D,EAAK2B,KAAO,EAAU,GAAI3B,GAAK/D,EAAI,EAAIwM,EAAO,EAAI,IAE/EjH,IAAW,EACXxB,EAAKhE,SAAWiE,EAAEoB,EAAI,EAMtBlD,EAAI/F,KAAKuG,IAAI,IAAK1C,EAAI,IAAIpC,QAG1BoF,EAAIiE,EAAmBhD,EAAEK,MAAMmD,EAAiBzD,EAAGiC,EAAK/D,IAAK+D,GAG7DjD,EAAI0B,EAAS1B,EAAGiD,EAAK,EAAG,GAIpBrD,EAAoBI,EAAEf,EAAGgE,EAAIpD,KAC/B7C,EAAIiG,EAAK,GAGTjD,EAAI0B,EAASuC,EAAmBhD,EAAEK,MAAMmD,EAAiBzD,EAAGhE,EAAIkC,IAAKlC,GAAIA,EAAI,EAAG,IAG3EgC,EAAegB,EAAEf,GAAGlB,MAAMkF,EAAK,EAAGA,EAAK,IAAM,GAAK,OACrDjD,EAAI0B,EAAS1B,EAAGiD,EAAK,EAAG,KAI5BjD,EAAEoC,EAAIoH,EACNjH,IAAW,EACXxB,EAAKhE,SAAW8C,EAET6B,EAAS1B,EAAGiD,EAAIpD,KAezBwI,GAAE9L,YAAc,SAAUoF,EAAI9B,GAC5B,GAAIR,GACF2B,EAAI9J,KACJ6J,EAAOC,EAAEiB,WAcX,OAZW,UAAPN,EACFtC,EAAMsD,EAAe3B,EAAGA,EAAEhE,GAAK+D,EAAKoJ,UAAYnJ,EAAEhE,GAAK+D,EAAKqJ,WAE5D3K,EAAWkC,EAAI,EAAGmF,IAEP,SAAPjH,EAAeA,EAAKkB,EAAKhE,SACxB0C,EAAWI,EAAI,EAAG,GAEvBmB,EAAIU,EAAS,GAAIX,GAAKC,GAAIW,EAAI9B,GAC9BR,EAAMsD,EAAe3B,EAAGW,GAAMX,EAAEhE,GAAKgE,EAAEhE,GAAK+D,EAAKoJ,SAAUxI,IAGtDX,EAAEsF,UAAYtF,EAAE4F,SAAW,IAAMvH,EAAMA,GAkBhDgJ,GAAE8G,oBAAsB9G,GAAE+G,KAAO,SAAUzN,EAAI9B,GAC7C,GAAImB,GAAI9J,KACN6J,EAAOC,EAAEiB,WAYX,OAVW,UAAPN,GACFA,EAAKZ,EAAKK,UACVvB,EAAKkB,EAAKhE,WAEV0C,EAAWkC,EAAI,EAAGmF,IAEP,SAAPjH,EAAeA,EAAKkB,EAAKhE,SACxB0C,EAAWI,EAAI,EAAG,IAGlB6B,EAAS,GAAIX,GAAKC,GAAIW,EAAI9B,IAWnCwI,GAAElH,SAAW,WACX,GAAIH,GAAI9J,KACN6J,EAAOC,EAAEiB,YACT5C,EAAMsD,EAAe3B,EAAGA,EAAEhE,GAAK+D,EAAKoJ,UAAYnJ,EAAEhE,GAAK+D,EAAKqJ,SAE9D,OAAOpJ,GAAEsF,UAAYtF,EAAE4F,SAAW,IAAMvH,EAAMA,GAQhDgJ,GAAEgH,UAAYhH,GAAEyB,MAAQ,WACtB,MAAOpI,GAAS,GAAIxK,MAAK+K,YAAY/K,MAAOA,KAAK8F,EAAI,EAAG,IAS1DqL,GAAEiH,QAAUjH,GAAEkH,OAAS,WACrB,GAAIvO,GAAI9J,KACN6J,EAAOC,EAAEiB,YACT5C,EAAMsD,EAAe3B,EAAGA,EAAEhE,GAAK+D,EAAKoJ,UAAYnJ,EAAEhE,GAAK+D,EAAKqJ,SAE9D,OAAOpJ,GAAEsF,QAAU,IAAMjH,EAAMA,EA6NjC,IAAImF,IAAS,WAGX,QAASgL,GAAgBxO,EAAG9B,EAAGkG,GAC7B,GAAIqK,GACF9B,EAAQ,EACRjT,EAAIsG,EAAEpG,MAER,KAAKoG,EAAIA,EAAEjD,QAASrD,KAClB+U,EAAOzO,EAAEtG,GAAKwE,EAAIyO,EAClB3M,EAAEtG,GAAK+U,EAAOrK,EAAO,EACrBuI,EAAQ8B,EAAOrK,EAAO,CAKxB,OAFIuI,IAAO3M,EAAEgG,QAAQ2G,GAEd3M,EAGT,QAAS0O,GAAQC,EAAGC,EAAGC,EAAIC,GACzB,GAAIpV,GAAGsF,CAEP,IAAI6P,GAAMC,EACR9P,EAAI6P,EAAKC,EAAK,GAAI,MAElB,KAAKpV,EAAIsF,EAAI,EAAGtF,EAAImV,EAAInV,IACtB,GAAIiV,EAAEjV,IAAMkV,EAAElV,GAAI,CAChBsF,EAAI2P,EAAEjV,GAAKkV,EAAElV,GAAK,GAAI,CACtB,OAKN,MAAOsF,GAGT,QAAS+P,GAASJ,EAAGC,EAAGC,EAAIzK,GAI1B,IAHA,GAAI1K,GAAI,EAGDmV,KACLF,EAAEE,IAAOnV,EACTA,EAAIiV,EAAEE,GAAMD,EAAEC,GAAM,EAAI,EACxBF,EAAEE,GAAMnV,EAAI0K,EAAOuK,EAAEE,GAAMD,EAAEC,EAI/B,OAAQF,EAAE,IAAMA,EAAE/U,OAAS,GAAI+U,EAAE1F,QAGnC,MAAO,UAAUjJ,EAAGC,EAAGgC,EAAIpD,EAAIuL,EAAIhG,GACjC,GAAIoF,GAAKxN,EAAGtC,EAAGwE,EAAG8Q,EAASC,EAAMC,EAAMC,EAAO1C,EAAG2C,EAAIC,EAAKC,EAAMC,EAAM5O,EAAI0C,EAAGmM,EAAIC,EAAIC,EACnFC,EAAIC,EACJ7P,EAAOC,EAAEiB,YACTuH,EAAOxI,EAAEoB,GAAKnB,EAAEmB,EAAI,GAAI,EACxBL,EAAKf,EAAE/B,EACP0L,EAAK1J,EAAEhC,CAGT,MAAK8C,GAAOA,EAAG,IAAO4I,GAAOA,EAAG,IAE9B,MAAO,IAAI5J,GACRC,EAAEoB,GAAMnB,EAAEmB,IAAML,GAAK4I,GAAM5I,EAAG,IAAM4I,EAAG,GAAMA,GAG9C5I,GAAe,GAATA,EAAG,KAAY4I,EAAY,EAAPnB,EAAWA,EAAO,EAHQ/G,IAsBxD,KAhBI2C,GACF4K,EAAU,EACVhT,EAAIgE,EAAEhE,EAAIiE,EAAEjE,IAEZoI,EAAO/C,GACP2N,EAAUzQ,GACVvC,EAAI4G,GAAU5C,EAAEhE,EAAIgT,GAAWpM,GAAU3C,EAAEjE,EAAIgT,IAGjDW,EAAKhG,EAAG/P,OACR6V,EAAK1O,EAAGnH,OACR6S,EAAI,GAAI1M,GAAKyI,GACb4G,EAAK3C,EAAExO,KAIFvE,EAAI,EAAGiQ,EAAGjQ,KAAOqH,EAAGrH,IAAM,GAAIA,KAanC,GAXIiQ,EAAGjQ,IAAMqH,EAAGrH,IAAM,IAAIsC,IAEhB,MAANiG,GACFtB,EAAKsB,EAAKlC,EAAKK,UACfvB,EAAKkB,EAAKhE,UAEV4E,EADSyJ,EACJnI,GAAMjC,EAAEhE,EAAIiE,EAAEjE,GAAK,EAEnBiG,EAGHtB,EAAK,EACPyO,EAAGjO,KAAK,GACR8N,GAAO,MACF,CAOL,GAJAtO,EAAKA,EAAKqO,EAAU,EAAI,EACxBtV,EAAI,EAGM,GAANiW,EAAS,CAMX,IALAzR,EAAI,EACJyL,EAAKA,EAAG,GACRhJ,KAGQjH,EAAI+V,GAAMvR,IAAMyC,IAAMjH,IAC5B2J,EAAInF,EAAIkG,GAAQrD,EAAGrH,IAAM,GACzB0V,EAAG1V,GAAK2J,EAAIsG,EAAK,EACjBzL,EAAImF,EAAIsG,EAAK,CAGfsF,GAAO/Q,GAAKxE,EAAI+V,MAGX,CAiBL,IAdAvR,EAAIkG,GAAQuF,EAAG,GAAK,GAAK,EAErBzL,EAAI,IACNyL,EAAK6E,EAAgB7E,EAAIzL,EAAGkG,GAC5BrD,EAAKyN,EAAgBzN,EAAI7C,EAAGkG,GAC5BuL,EAAKhG,EAAG/P,OACR6V,EAAK1O,EAAGnH,QAGV4V,EAAKG,EACLN,EAAMtO,EAAGhE,MAAM,EAAG4S,GAClBL,EAAOD,EAAIzV,OAGJ0V,EAAOK,GAAKN,EAAIC,KAAU,CAEjCM,GAAKjG,EAAG5M,QACR6S,EAAG5J,QAAQ,GACX0J,EAAM/F,EAAG,GAELA,EAAG,IAAMvF,EAAO,KAAKsL,CAEzB,GACExR,GAAI,EAGJsL,EAAMkF,EAAQ/E,EAAI0F,EAAKM,EAAIL,GAGvB9F,EAAM,GAGR+F,EAAOF,EAAI,GACPM,GAAML,IAAMC,EAAOA,EAAOnL,GAAQiL,EAAI,IAAM,IAGhDnR,EAAIqR,EAAOG,EAAM,EAUbxR,EAAI,GACFA,GAAKkG,IAAMlG,EAAIkG,EAAO,GAG1B8K,EAAOV,EAAgB7E,EAAIzL,EAAGkG,GAC9B+K,EAAQD,EAAKtV,OACb0V,EAAOD,EAAIzV,OAGX4P,EAAMkF,EAAQQ,EAAMG,EAAKF,EAAOG,GAGrB,GAAP9F,IACFtL,IAGA6Q,EAASG,EAAMS,EAAKR,EAAQS,EAAKjG,EAAIwF,EAAO/K,MAOrC,GAALlG,IAAQsL,EAAMtL,EAAI,GACtBgR,EAAOvF,EAAG5M,SAGZoS,EAAQD,EAAKtV,OACTuV,EAAQG,GAAMJ,EAAKlJ,QAAQ,GAG/B+I,EAASM,EAAKH,EAAMI,EAAMlL,GAGtBoF,IAAO,IACT8F,EAAOD,EAAIzV,OAGX4P,EAAMkF,EAAQ/E,EAAI0F,EAAKM,EAAIL,GAGvB9F,EAAM,IACRtL,IAGA6Q,EAASM,EAAKM,EAAKL,EAAOM,EAAKjG,EAAI2F,EAAMlL,KAI7CkL,EAAOD,EAAIzV,QACM,IAAR4P,IACTtL,IACAmR,GAAO,IAITD,EAAG1V,KAAOwE,EAGNsL,GAAO6F,EAAI,GACbA,EAAIC,KAAUvO,EAAGyO,IAAO,GAExBH,GAAOtO,EAAGyO,IACVF,EAAO,UAGDE,IAAOC,GAAiB,SAAXJ,EAAI,KAAkB1O,IAE7CsO,GAAkB,SAAXI,EAAI,GAIRD,EAAG,IAAIA,EAAGnG,QAIjB,GAAe,GAAX+F,EACFvC,EAAEzQ,EAAIA,EACN+J,GAAUkJ,MACL,CAGL,IAAKvV,EAAI,EAAGwE,EAAIkR,EAAG,GAAIlR,GAAK,GAAIA,GAAK,GAAIxE,GACzC+S,GAAEzQ,EAAItC,EAAIsC,EAAIgT,EAAU,EAExBtO,EAAS+L,EAAGrC,EAAKnI,EAAKwK,EAAEzQ,EAAI,EAAIiG,EAAIpD,EAAIoQ,GAG1C,MAAOxC,MAuzDX9Q,IAAUE,EAAMF,IAGhBV,GAAO,GAAIU,IAAQV,IACnBqH,GAAK,GAAI3G,IAAQ2G,IAQbxE,EAAgC,WAChC,MAAOnC,KACPlF,KAAKX,EAASM,EAAqBN,EAASC,KAA2C0C,SAAlCqF,IAAgD/H,EAAOD,QAAUgI,KAqBzH5H","file":"swarm-numberformat.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"numberformat\"] = factory();\n\telse\n\t\troot[\"numberformat\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.formatShort = exports.formatFull = exports.format = exports.Formatter = exports.Formats = undefined;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Can't comment a .json file, but the suffixes come from these pages:\n\t// http://home.kpn.nl/vanadovv/BignumbyN.html\n\t\n\t\n\tvar _standardSuffixes = __webpack_require__(1);\n\t\n\tvar _standardSuffixes2 = _interopRequireDefault(_standardSuffixes);\n\t\n\tvar _longScaleSuffixes = __webpack_require__(2);\n\t\n\tvar _longScaleSuffixes2 = _interopRequireDefault(_longScaleSuffixes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// TODO: use this page to generate names dynamically, for even larger numbers:\n\t//   http://mathforum.org/library/drmath/view/59154.html\n\t// TODO: rounding control\n\t\n\tfunction validate(condition, message) {\n\t  if (!condition) {\n\t    throw new Error(message);\n\t  }\n\t  return condition;\n\t}\n\t\n\t// polyfill IE and phantomjs\n\tvar log10 = function () {\n\t  if (!!Math.log10) {\n\t    return Math.log10;\n\t  }\n\t  return function (val) {\n\t    var ret = Math.log(val) / Math.LN10;\n\t    // bloody stupid rounding errors\n\t    ret = Math.round(ret * 1e6) / 1e6;\n\t    return ret;\n\t  };\n\t}();\n\t\n\tvar backends = {\n\t  'native': {\n\t    normalize: function normalize(val) {\n\t      return val;\n\t    },\n\t\n\t    // Suffixes are a list - which index of the list do we want? \n\t    // _index(999) === 0\n\t    // _index(1000) === 1\n\t    // _index(1000000) === 2\n\t    index: function index(val) {\n\t      // string length is faster but fails for length >= 20, where JS starts\n\t      // formatting with e\n\t      return Math.max(0, Math.floor(log10(Math.abs(val)) / 3));\n\t    },\n\t    prefix: function prefix(val, index, _ref) {\n\t      var sigfigs = _ref.sigfigs;\n\t\n\t      return (val / Math.pow(1000, index)).toPrecision(sigfigs);\n\t    }\n\t  },\n\t  'decimal.js': {\n\t    // Note that decimal.js is never imported by this library!\n\t    // We're using its methods passed in by the caller. This keeps the library\n\t    // much smaller for the common case: no decimal.js.\n\t    // api docs: https://mikemcl.github.io/decimal.js/\n\t    _requireDecimal: function _requireDecimal(config) {\n\t      var Decimal = void 0;\n\t      if (global.window && window.Decimal) {\n\t        Decimal = window.Decimal;\n\t      } else {\n\t        Decimal = __webpack_require__(3);\n\t      }\n\t      return Decimal.clone(config);\n\t    },\n\t    normalize: function normalize(val, _ref2) {\n\t      var rounding = _ref2.rounding;\n\t\n\t      var Decimal = this._requireDecimal({ rounding: rounding });\n\t      return new Decimal(val);\n\t    },\n\t    index: function index(val) {\n\t      var Decimal = this._requireDecimal();\n\t      // index = val.log10().dividedToIntegerBy(Decimal.log 1000)\n\t      // Decimal.log() is too slow for large numbers. Docs say performance degrades exponentially as # digits increases, boo.\n\t      // Lucky me, the length is used by decimal.js internally: num.e\n\t      // this is in the docs, so I think it's stable enough to use...\n\t      val = new Decimal(val);\n\t      return Math.floor(val.e / 3);\n\t    },\n\t    prefix: function prefix(val, index, _ref3) {\n\t      var sigfigs = _ref3.sigfigs,\n\t          rounding = _ref3.rounding;\n\t\n\t      var Decimal = this._requireDecimal({ rounding: rounding });\n\t      var div = new Decimal(1000).pow(index);\n\t      return new Decimal(val).dividedBy(div).toPrecision(sigfigs);\n\t    }\n\t  }\n\t};\n\t\n\t// The formatting function.\n\tfunction _format(val, opts) {\n\t  var backend = validate(backends[opts.backend], 'not a backend: ' + opts.backend);\n\t  val = backend.normalize(val, opts);\n\t  var index = backend.index(val);\n\t  var suffix = opts.suffixFn(index);\n\t  // opts.minSuffix: Use JS native formatting for smallish numbers, because\n\t  // '99,999' is prettier than '99.9k'\n\t  // it's safe to let Math coerce Decimal.js to infinity here, gt/lt still work\n\t  if (Math.abs(val) < opts.minSuffix) {\n\t    // decimal.js minSuffix/minRound aren't supported, we must be native to get here\n\t    if (Math.abs(val) >= opts.minRound) {\n\t      val = Math.floor(val);\n\t    }\n\t    return val.toLocaleString(undefined, { maximumSignificantDigits: opts.sigfigs });\n\t  }\n\t  // No suffix found: use scientific notation. JS's native toExponential is fine.\n\t  if (!suffix && suffix !== '') {\n\t    return val.toExponential(opts.sigfigs - 1).replace('e+', 'e');\n\t  }\n\t  // Found a suffix. Calculate the prefix, the number before the suffix.\n\t  var prefix = backend.prefix(val, index, opts);\n\t  return '' + prefix + suffix;\n\t}\n\t\n\tvar defaultOptions = {\n\t  backend: 'native',\n\t  flavor: 'full',\n\t  suffixGroup: 'full',\n\t  suffixFn: function suffixFn(index) {\n\t    var suffixes = this.suffixes || this.suffixGroups[this.suffixGroup];\n\t    validate(suffixes, 'no such suffixgroup: ' + this.suffixGroup);\n\t    if (index < suffixes.length) {\n\t      return suffixes[index] || '';\n\t    }\n\t    // return undefined\n\t  },\n\t\n\t  // minimum value to use any suffix, because '99,900' is prettier than '99.9k'\n\t  minSuffix: 1e5,\n\t  // Show decimals below this value rounded to opts.sigfigs, instead of floor()ed\n\t  minRound: 0,\n\t  sigfigs: 3, // often overridden by flavor\n\t  format: 'standard'\n\t};\n\t// User-visible format choices, like on swarmsim's options screen. \n\t// Each has a different set of options.\n\tvar Formats = exports.Formats = {\n\t  standard: { suffixGroups: _standardSuffixes2.default },\n\t  // like standard formatting, with a different set of suffixes\n\t  longScale: { suffixGroups: _longScaleSuffixes2.default },\n\t  // like standard formatting, with no suffixes at all\n\t  scientific: { suffixGroups: { full: [], short: [] } },\n\t  // like standard formatting, with a smaller set of suffixes\n\t  hybrid: {\n\t    suffixGroups: {\n\t      full: _standardSuffixes2.default.full.slice(0, 12),\n\t      short: _standardSuffixes2.default.short.slice(0, 12)\n\t    }\n\t  },\n\t  // like standard formatting, with a different/infinite set of suffixes\n\t  engineering: { suffixFn: function suffixFn(index) {\n\t      return index === 0 ? '' : 'E' + index * 3;\n\t    } }\n\t};\n\t// A convenient way for the developer to modify formatters.\n\t// These are different from formats - not user-visible.\n\tvar Flavors = {\n\t  full: { suffixGroup: 'full', sigfigs: 5 },\n\t  short: { suffixGroup: 'short', sigfigs: 3 }\n\t};\n\t// Allow callers to extend formats and flavors.\n\tdefaultOptions.formats = Formats;\n\tdefaultOptions.flavors = Flavors;\n\t\n\tvar Formatter = exports.Formatter = function () {\n\t  /**\n\t   * @param {Object} opts All formatter configuration.\n\t   * @param {string} [opts.flavor='full'] 'full' or 'short'. Flavors can modify any number of other options here. Full is the default; short has fewer sigfigs and shorter standard-suffixes.\n\t   * @param {Object} [opts.flavors] Specify your own custom flavors. \n\t   * @param {string} [opts.backend='native'] 'native' or 'decimal.js'.\n\t   * @param {string} [opts.suffixGroup]\n\t   * @param {Function} [opts.suffixFn]\n\t   * @param {number} [opts.minSuffix=1e5]\n\t   * @param {number} [opts.minRound=0]\n\t   * @param {number} [opts.sigfigs=5]\n\t   * @param {number} [opts.format='standard'] 'standard', 'hybrid', 'scientific', 'longScale'.\n\t   * @param {Object} [opts.formats] Specify your own custom formats.\n\t   */\n\t  function Formatter() {\n\t    var _this = this;\n\t\n\t    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t    _classCallCheck(this, Formatter);\n\t\n\t    /** @type Object */\n\t    this.opts = opts;\n\t    // create convenience methods for each flavor\n\t    var flavors = Object.keys(this._normalizeOpts().flavors);\n\t    // the fn(i) is for stupid binding tricks with the looped fn(val, opts)\n\t    for (var i = 0; i < flavors.length; i++) {\n\t      (function (i) {\n\t        var flavor = flavors[i];\n\t        // capitalize the first letter to camel-case method name, like formatShort\n\t        var key = 'format' + flavor.charAt(0).toUpperCase() + flavor.substr(1);\n\t        /** @ignore */\n\t        _this[key] = function (val, opts) {\n\t          return _this.formatFlavor(val, flavor, opts);\n\t        };\n\t      })(i);\n\t    }\n\t  }\n\t\n\t  _createClass(Formatter, [{\n\t    key: '_normalizeOpts',\n\t    value: function _normalizeOpts() {\n\t      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t      // all the user-specified opts, no defaults\n\t      opts = _extends({}, this.opts, opts);\n\t      // opts.format redefines some other opts, but should never override the user's opts\n\t      var format = opts && opts.format;\n\t      var formats = opts && opts.formats || defaultOptions.formats;\n\t      var formatOptions = formats[format || defaultOptions.format];\n\t      validate(formatOptions, 'no such format: ' + format);\n\t      var flavor = opts && opts.flavor;\n\t      var flavors = opts && opts.flavors || defaultOptions.flavors;\n\t      var flavorOptions = flavors[flavor || defaultOptions.flavor];\n\t      validate(flavorOptions, 'no such flavor: ' + flavor);\n\t      // finally, add the implied options: defaults and format-derived\n\t      return _extends({}, defaultOptions, formatOptions, flavorOptions, opts);\n\t    }\n\t    /**\n\t     * @param {number} val\n\t     * @param {Object} [opts]\n\t     * @return {number} which suffix to use for this number in a list of suffixes. You can also think of this as \"how many commas are in the number?\"\n\t     */\n\t\n\t  }, {\n\t    key: 'index',\n\t    value: function index(val, opts) {\n\t      opts = this._normalizeOpts(opts);\n\t      return backends[opts.backend].index(val);\n\t    }\n\t    /**\n\t     * @param {number} val\n\t     * @param {Object} [opts]\n\t     * @return {string} The suffix that this number would use, with no number shown.\n\t     * @example\n\t     * new Formatter().suffix(1e6)\n\t     * // => \" million\"\n\t     * @example\n\t     * new Formatter().suffix(1e6, {flavor: \"short\"})\n\t     * // => \"M\"\n\t     */\n\t\n\t  }, {\n\t    key: 'suffix',\n\t    value: function suffix(val, opts) {\n\t      opts = this._normalizeOpts(opts);\n\t      var index = backends[opts.backend].index(val);\n\t      return opts.suffixFn(index);\n\t    }\n\t    /**\n\t     * Format a number.\n\t     * @param {number} val\n\t     * @param {Object} [opts] Override the options provided to the Formatter constructor.\n\t     * @return {string} The formatted number.\n\t     * @example\n\t     * new Formatter().format(1e6)\n\t     * // => \"1.0000 million\"\n\t     */\n\t\n\t  }, {\n\t    key: 'format',\n\t    value: function format(val, opts) {\n\t      opts = this._normalizeOpts(opts);\n\t      return _format(val, opts);\n\t    }\n\t    /**\n\t     * Format a number with a specified flavor. It's very common to call the formatter with different flavors, so it has its own shortcut.\n\t     *\n\t     * `Formatter.formatFull()` and `Formatter.formatShort()` are also available.\n\t     * @param {number} val\n\t     * @param {string} flavor 'short' or 'full'. See opts.flavor.\n\t     * @param {Object} [opts]\n\t     * @return {string[]} The complete list of formats available. Use this to build an options UI to allow your players to choose their favorite format.\n\t     */\n\t\n\t  }, {\n\t    key: 'formatFlavor',\n\t    value: function formatFlavor(val, flavor, opts) {\n\t      return this.format(val, _extends({}, opts, { flavor: flavor }));\n\t    }\n\t    /**\n\t     * @param {Object} [opts]\n\t     * @return {string[]} The complete list of formats available. Use this to build an options UI to allow your players to choose their favorite format.\n\t     */\n\t\n\t  }, {\n\t    key: 'listFormats',\n\t    value: function listFormats(opts) {\n\t      opts = this._normalizeOpts(opts);\n\t      return Object.keys(opts.formats);\n\t    }\n\t  }]);\n\t\n\t  return Formatter;\n\t}();\n\t\n\tvar numberformat = new Formatter();\n\tnumberformat.defaultOptions = defaultOptions;\n\tnumberformat.Formatter = Formatter;\n\texports.default = numberformat;\n\t\n\t/**\n\t * Format a number using the default options.\n\t * @param {number} val\n\t * @param {Object} [opts]\n\t * @return string\n\t * @example\n\t * format(1e6)\n\t * // => \"1.0000 million\"\n\t * @example\n\t * format(1e6, {sigfigs: 1})\n\t * // => \"1 million\"\n\t */\n\t\n\tvar format = exports.format = function format(val, opts) {\n\t  return numberformat.format(val, opts);\n\t};\n\t/**\n\t * Format a full-flavor number using the default options. Identical to `format()`\n\t * @param {number} val\n\t * @param {Object} [opts]\n\t * @return string\n\t * @example\n\t * format(1e6)\n\t * // => \"1.0000 million\"\n\t */\n\tvar formatFull = exports.formatFull = function formatFull(val, opts) {\n\t  return numberformat.formatFlavor(val, 'full', opts);\n\t};\n\t/**\n\t * Format a short-flavor number using the default options.\n\t * @param {number} val\n\t * @param {Object} [opts]\n\t * @return string\n\t * @example\n\t * format(1e6)\n\t * // => \"1.00M\"\n\t */\n\tvar formatShort = exports.formatShort = function formatShort(val, opts) {\n\t  return numberformat.formatFlavor(val, 'short', opts);\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"short\": [\n\t\t\t\"\",\n\t\t\t\"K\",\n\t\t\t\"M\",\n\t\t\t\"B\",\n\t\t\t\"T\",\n\t\t\t\"Qa\",\n\t\t\t\"Qi\",\n\t\t\t\"Sx\",\n\t\t\t\"Sp\",\n\t\t\t\"Oc\",\n\t\t\t\"No\",\n\t\t\t\"Dc\",\n\t\t\t\"UDc\",\n\t\t\t\"DDc\",\n\t\t\t\"TDc\",\n\t\t\t\"QaDc\",\n\t\t\t\"QiDc\",\n\t\t\t\"SxDc\",\n\t\t\t\"SpDc\",\n\t\t\t\"ODc\",\n\t\t\t\"NDc\",\n\t\t\t\"Vi\",\n\t\t\t\"UVi\",\n\t\t\t\"DVi\",\n\t\t\t\"TVi\",\n\t\t\t\"QaVi\",\n\t\t\t\"QiVi\",\n\t\t\t\"SxVi\",\n\t\t\t\"SpVi\",\n\t\t\t\"OVi\",\n\t\t\t\"NVi\",\n\t\t\t\"Tg\",\n\t\t\t\"UTg\",\n\t\t\t\"DTg\",\n\t\t\t\"TTg\",\n\t\t\t\"QaTg\",\n\t\t\t\"QiTg\",\n\t\t\t\"SxTg\",\n\t\t\t\"SpTg\",\n\t\t\t\"OTg\",\n\t\t\t\"NTg\",\n\t\t\t\"Qd\",\n\t\t\t\"UQd\",\n\t\t\t\"DQd\",\n\t\t\t\"TQd\",\n\t\t\t\"QaQd\",\n\t\t\t\"QiQd\",\n\t\t\t\"SxQd\",\n\t\t\t\"SpQd\",\n\t\t\t\"OQd\",\n\t\t\t\"NQd\",\n\t\t\t\"Qq\",\n\t\t\t\"UQq\",\n\t\t\t\"DQq\",\n\t\t\t\"TQq\",\n\t\t\t\"QaQq\",\n\t\t\t\"QiQq\",\n\t\t\t\"SxQq\",\n\t\t\t\"SpQq\",\n\t\t\t\"OQq\",\n\t\t\t\"NQq\",\n\t\t\t\"Sg\",\n\t\t\t\"USg\",\n\t\t\t\"DSg\",\n\t\t\t\"TSg\",\n\t\t\t\"QaSg\",\n\t\t\t\"QiSg\",\n\t\t\t\"SxSg\",\n\t\t\t\"SpSg\",\n\t\t\t\"OSg\",\n\t\t\t\"NSg\",\n\t\t\t\"St\",\n\t\t\t\"USt\",\n\t\t\t\"DSt\",\n\t\t\t\"TSt\",\n\t\t\t\"QaSt\",\n\t\t\t\"QiSt\",\n\t\t\t\"SxSt\",\n\t\t\t\"SpSt\",\n\t\t\t\"OSt\",\n\t\t\t\"NSt\",\n\t\t\t\"Og\",\n\t\t\t\"UOg\",\n\t\t\t\"DOg\",\n\t\t\t\"TOg\",\n\t\t\t\"QaOg\",\n\t\t\t\"QiOg\",\n\t\t\t\"SxOg\",\n\t\t\t\"SpOg\",\n\t\t\t\"OOg\",\n\t\t\t\"NOg\"\n\t\t],\n\t\t\"full\": [\n\t\t\t\"\",\n\t\t\t\" thousand\",\n\t\t\t\" million\",\n\t\t\t\" billion\",\n\t\t\t\" trillion\",\n\t\t\t\" quadrillion\",\n\t\t\t\" quintillion\",\n\t\t\t\" sextillion\",\n\t\t\t\" septillion\",\n\t\t\t\" octillion\",\n\t\t\t\" nonillion\",\n\t\t\t\" decillion\",\n\t\t\t\" undecillion\",\n\t\t\t\" duodecillion\",\n\t\t\t\" tredecillion\",\n\t\t\t\" quattuordecillion\",\n\t\t\t\" quinquadecillion\",\n\t\t\t\" sedecillion\",\n\t\t\t\" septendecillion\",\n\t\t\t\" octodecillion\",\n\t\t\t\" novendecillion\",\n\t\t\t\" vigintillion\",\n\t\t\t\" unvigintillion\",\n\t\t\t\" duovigintillion\",\n\t\t\t\" tresvigintillion\",\n\t\t\t\" quattuorvigintillion\",\n\t\t\t\" quinquavigintillion\",\n\t\t\t\" sesvigintillion\",\n\t\t\t\" septemvigintillion\",\n\t\t\t\" octovigintillion\",\n\t\t\t\" novemvigintillion\",\n\t\t\t\" trigintillion\",\n\t\t\t\" untrigintillion\",\n\t\t\t\" duotrigintillion\",\n\t\t\t\" trestrigintillion\",\n\t\t\t\" quattuortrigintillion\",\n\t\t\t\" quinquatrigintillion\",\n\t\t\t\" sestrigintillion\",\n\t\t\t\" septentrigintillion\",\n\t\t\t\" octotrigintillion\",\n\t\t\t\" noventrigintillion\",\n\t\t\t\" quadragintillion\",\n\t\t\t\" unquadragintillion\",\n\t\t\t\" duoquadragintillion\",\n\t\t\t\" tresquadragintillion\",\n\t\t\t\" quattuorquadragintillion\",\n\t\t\t\" quinquaquadragintillion\",\n\t\t\t\" sesquadragintillion\",\n\t\t\t\" septenquadragintillion\",\n\t\t\t\" octoquadragintillion\",\n\t\t\t\" novenquadragintillion\",\n\t\t\t\" quinquagintillion\",\n\t\t\t\" unquinquagintillion\",\n\t\t\t\" duoquinquagintillion\",\n\t\t\t\" tresquinquagintillion\",\n\t\t\t\" quattuorquinquagintillion\",\n\t\t\t\" quinquaquinquagintillion\",\n\t\t\t\" sesquinquagintillion\",\n\t\t\t\" septenquinquagintillion\",\n\t\t\t\" octoquinquagintillion\",\n\t\t\t\" novenquinquagintillion\",\n\t\t\t\" sexagintillion\",\n\t\t\t\" unsexagintillion\",\n\t\t\t\" duosexagintillion\",\n\t\t\t\" tresexagintillion\",\n\t\t\t\" quattuorsexagintillion\",\n\t\t\t\" quinquasexagintillion\",\n\t\t\t\" sesexagintillion\",\n\t\t\t\" septensexagintillion\",\n\t\t\t\" octosexagintillion\",\n\t\t\t\" novensexagintillion\",\n\t\t\t\" septuagintillion\",\n\t\t\t\" unseptuagintillion\",\n\t\t\t\" duoseptuagintillion\",\n\t\t\t\" treseptuagintillion\",\n\t\t\t\" quattuorseptuagintillion\",\n\t\t\t\" quinquaseptuagintillion\",\n\t\t\t\" seseptuagintillion\",\n\t\t\t\" septenseptuagintillion\",\n\t\t\t\" octoseptuagintillion\",\n\t\t\t\" novenseptuagintillion\",\n\t\t\t\" octogintillion\",\n\t\t\t\" unoctogintillion\",\n\t\t\t\" duooctogintillion\"\n\t\t]\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"short\": [\n\t\t\t\"\",\n\t\t\t\"K\",\n\t\t\t\"M\",\n\t\t\t\"Md\",\n\t\t\t\"B\",\n\t\t\t\"Bd\",\n\t\t\t\"T\",\n\t\t\t\"Td\",\n\t\t\t\"Qa\",\n\t\t\t\"Qad\",\n\t\t\t\"Qi\",\n\t\t\t\"Qid\",\n\t\t\t\"Sx\",\n\t\t\t\"Sxd\",\n\t\t\t\"Sp\",\n\t\t\t\"Spd\",\n\t\t\t\"Oc\",\n\t\t\t\"Od\",\n\t\t\t\"No\",\n\t\t\t\"Nd\",\n\t\t\t\"Dc\",\n\t\t\t\"Dd\",\n\t\t\t\"UDc\",\n\t\t\t\"UDd\",\n\t\t\t\"DDc\",\n\t\t\t\"DDd\",\n\t\t\t\"TDc\",\n\t\t\t\"TDd\",\n\t\t\t\"QaDc\",\n\t\t\t\"QaDd\",\n\t\t\t\"QiDc\",\n\t\t\t\"QiDd\",\n\t\t\t\"SxDc\",\n\t\t\t\"SxDd\",\n\t\t\t\"SpDc\",\n\t\t\t\"SpDd\",\n\t\t\t\"ODc\",\n\t\t\t\"ODd\",\n\t\t\t\"NDc\",\n\t\t\t\"NDd\",\n\t\t\t\"Vi\",\n\t\t\t\"Vd\",\n\t\t\t\"UVi\",\n\t\t\t\"UVd\",\n\t\t\t\"DVi\",\n\t\t\t\"DVd\",\n\t\t\t\"TVi\",\n\t\t\t\"TVd\",\n\t\t\t\"QaVi\",\n\t\t\t\"QaVd\",\n\t\t\t\"QiVi\",\n\t\t\t\"QiVd\",\n\t\t\t\"SxVi\",\n\t\t\t\"SxVd\",\n\t\t\t\"SpVi\",\n\t\t\t\"SpVd\",\n\t\t\t\"OVi\",\n\t\t\t\"OVd\",\n\t\t\t\"NVi\",\n\t\t\t\"NVd\",\n\t\t\t\"Tg\",\n\t\t\t\"TD\",\n\t\t\t\"UTg\",\n\t\t\t\"UTD\",\n\t\t\t\"DTg\",\n\t\t\t\"DTD\",\n\t\t\t\"TTg\",\n\t\t\t\"TTD\",\n\t\t\t\"QaTg\",\n\t\t\t\"QaTD\",\n\t\t\t\"QiTg\",\n\t\t\t\"QiTD\",\n\t\t\t\"SxTg\",\n\t\t\t\"SxTD\",\n\t\t\t\"SpTg\",\n\t\t\t\"SpTD\",\n\t\t\t\"OTg\",\n\t\t\t\"OTD\",\n\t\t\t\"NTg\",\n\t\t\t\"NTD\",\n\t\t\t\"Qd\",\n\t\t\t\"QD\",\n\t\t\t\"UQd\",\n\t\t\t\"UQD\",\n\t\t\t\"DQd\",\n\t\t\t\"DQD\",\n\t\t\t\"TQd\",\n\t\t\t\"TQD\",\n\t\t\t\"QaQd\",\n\t\t\t\"QaQD\"\n\t\t],\n\t\t\"full\": [\n\t\t\t\"\",\n\t\t\t\" thousand\",\n\t\t\t\" million\",\n\t\t\t\" milliard\",\n\t\t\t\" billion\",\n\t\t\t\" billiard\",\n\t\t\t\" trillion\",\n\t\t\t\" trilliard\",\n\t\t\t\" quadrillion\",\n\t\t\t\" quadrilliard\",\n\t\t\t\" quintillion\",\n\t\t\t\" quintilliard\",\n\t\t\t\" sextillion\",\n\t\t\t\" sextilliard\",\n\t\t\t\" septillion\",\n\t\t\t\" septilliard\",\n\t\t\t\" octillion\",\n\t\t\t\" octilliard\",\n\t\t\t\" nonillion\",\n\t\t\t\" nonilliard\",\n\t\t\t\" decillion\",\n\t\t\t\" decilliard\",\n\t\t\t\" undecillion\",\n\t\t\t\" undecilliard\",\n\t\t\t\" duodecillion\",\n\t\t\t\" duodecilliard\",\n\t\t\t\" tredecillion\",\n\t\t\t\" tredecilliard\",\n\t\t\t\" quattuordecillion\",\n\t\t\t\" quattuordecilliard\",\n\t\t\t\" quinquadecillion\",\n\t\t\t\" quinquadecilliard\",\n\t\t\t\" sedecillion\",\n\t\t\t\" sedecilliard\",\n\t\t\t\" septendecillion\",\n\t\t\t\" septendecilliard\",\n\t\t\t\" octodecillion\",\n\t\t\t\" octodecilliard\",\n\t\t\t\" novendecillion\",\n\t\t\t\" novendecilliard\",\n\t\t\t\" vigintillion\",\n\t\t\t\" vigintilliard\",\n\t\t\t\" unvigintillion\",\n\t\t\t\" unvigintilliard\",\n\t\t\t\" duovigintillion\",\n\t\t\t\" duovigintilliard\",\n\t\t\t\" tresvigintillion\",\n\t\t\t\" tresvigintilliard\",\n\t\t\t\" quattuorvigintillion\",\n\t\t\t\" quattuorvigintilliard\",\n\t\t\t\" quinquavigintillion\",\n\t\t\t\" quinquavigintilliard\",\n\t\t\t\" sesvigintillion\",\n\t\t\t\" sesvigintilliard\",\n\t\t\t\" septemvigintillion\",\n\t\t\t\" septemvigintilliard\",\n\t\t\t\" octovigintillion\",\n\t\t\t\" octovigintilliard\",\n\t\t\t\" novemvigintillion\",\n\t\t\t\" novemvigintilliard\",\n\t\t\t\" trigintillion\",\n\t\t\t\" trigintilliard\",\n\t\t\t\" untrigintillion\",\n\t\t\t\" untrigintilliard\",\n\t\t\t\" duotrigintillion\",\n\t\t\t\" duotrigintilliard\",\n\t\t\t\" trestrigintillion\",\n\t\t\t\" trestrigintilliard\",\n\t\t\t\" quattuortrigintillion\",\n\t\t\t\" quattuortrigintilliard\",\n\t\t\t\" quinquatrigintillion\",\n\t\t\t\" quinquatrigintilliard\",\n\t\t\t\" sestrigintillion\",\n\t\t\t\" sestrigintilliard\",\n\t\t\t\" septentrigintillion\",\n\t\t\t\" septentrigintilliard\",\n\t\t\t\" octotrigintillion\",\n\t\t\t\" octotrigintilliard\",\n\t\t\t\" noventrigintillion\",\n\t\t\t\" noventrigintilliard\",\n\t\t\t\" quadragintillion\",\n\t\t\t\" quadragintilliard\",\n\t\t\t\" unquadragintillion\",\n\t\t\t\" unquadragintilliard\"\n\t\t]\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*! decimal.js v7.1.0 https://github.com/MikeMcl/decimal.js/LICENCE */\r\n\t;(function (globalScope) {\r\n\t  'use strict';\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  decimal.js v7.1.0\r\n\t   *  An arbitrary-precision Decimal type for JavaScript.\r\n\t   *  https://github.com/MikeMcl/decimal.js\r\n\t   *  Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>\r\n\t   *  MIT Licence\r\n\t   */\r\n\t\r\n\t\r\n\t  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\t\r\n\t\r\n\t    // The maximum exponent magnitude.\r\n\t    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n\t  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\t\r\n\t    // The limit on the value of `precision`, and on the value of the first argument to\r\n\t    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n\t    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\t\r\n\t    // Base conversion alphabet.\r\n\t    NUMERALS = '0123456789abcdef',\r\n\t\r\n\t    // The natural logarithm of 10 (1025 digits).\r\n\t    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\t\r\n\t    // Pi (1025 digits).\r\n\t    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\t\r\n\t\r\n\t    // The initial configuration properties of the Decimal constructor.\r\n\t    Decimal = {\r\n\t\r\n\t      // These values must be integers within the stated ranges (inclusive).\r\n\t      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\t\r\n\t      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n\t      // E.g. `Decimal.config({ precision: 20 });`\r\n\t      precision: 20,                         // 1 to MAX_DIGITS\r\n\t\r\n\t      // The rounding mode used when rounding to `precision`.\r\n\t      //\r\n\t      // ROUND_UP         0 Away from zero.\r\n\t      // ROUND_DOWN       1 Towards zero.\r\n\t      // ROUND_CEIL       2 Towards +Infinity.\r\n\t      // ROUND_FLOOR      3 Towards -Infinity.\r\n\t      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n\t      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n\t      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n\t      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n\t      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n\t      //\r\n\t      // E.g.\r\n\t      // `Decimal.rounding = 4;`\r\n\t      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n\t      rounding: 4,                           // 0 to 8\r\n\t\r\n\t      // The modulo mode used when calculating the modulus: a mod n.\r\n\t      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n\t      // The remainder (r) is calculated as: r = a - n * q.\r\n\t      //\r\n\t      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n\t      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n\t      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n\t      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n\t      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n\t      //\r\n\t      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n\t      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n\t      // be used, but they may not give useful results.\r\n\t      modulo: 1,                             // 0 to 9\r\n\t\r\n\t      // The exponent value at and beneath which `toString` returns exponential notation.\r\n\t      // JavaScript numbers: -7\r\n\t      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\t\r\n\t      // The exponent value at and above which `toString` returns exponential notation.\r\n\t      // JavaScript numbers: 21\r\n\t      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\t\r\n\t      // The minimum exponent value, beneath which underflow to zero occurs.\r\n\t      // JavaScript numbers: -324  (5e-324)\r\n\t      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\t\r\n\t      // The maximum exponent value, above which overflow to Infinity occurs.\r\n\t      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n\t      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\t\r\n\t      // Whether to use cryptographically-secure random number generation, if available.\r\n\t      crypto: false                          // true/false\r\n\t    },\r\n\t\r\n\t\r\n\t  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\t\r\n\t\r\n\t    inexact, noConflict, quadrant,\r\n\t    external = true,\r\n\t\r\n\t    decimalError = '[DecimalError] ',\r\n\t    invalidArgument = decimalError + 'Invalid argument: ',\r\n\t    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n\t    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\t\r\n\t    mathfloor = Math.floor,\r\n\t    mathpow = Math.pow,\r\n\t\r\n\t    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n\t    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n\t    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n\t    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\t\r\n\t    BASE = 1e7,\r\n\t    LOG_BASE = 7,\r\n\t    MAX_SAFE_INTEGER = 9007199254740991,\r\n\t\r\n\t    LN10_PRECISION = LN10.length - 1,\r\n\t    PI_PRECISION = PI.length - 1,\r\n\t\r\n\t    // Decimal.prototype object\r\n\t    P = {};\r\n\t\r\n\t\r\n\t  // Decimal prototype methods\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  absoluteValue             abs\r\n\t   *  ceil\r\n\t   *  comparedTo                cmp\r\n\t   *  cosine                    cos\r\n\t   *  cubeRoot                  cbrt\r\n\t   *  decimalPlaces             dp\r\n\t   *  dividedBy                 div\r\n\t   *  dividedToIntegerBy        divToInt\r\n\t   *  equals                    eq\r\n\t   *  floor\r\n\t   *  greaterThan               gt\r\n\t   *  greaterThanOrEqualTo      gte\r\n\t   *  hyperbolicCosine          cosh\r\n\t   *  hyperbolicSine            sinh\r\n\t   *  hyperbolicTangent         tanh\r\n\t   *  inverseCosine             acos\r\n\t   *  inverseHyperbolicCosine   acosh\r\n\t   *  inverseHyperbolicSine     asinh\r\n\t   *  inverseHyperbolicTangent  atanh\r\n\t   *  inverseSine               asin\r\n\t   *  inverseTangent            atan\r\n\t   *  isFinite\r\n\t   *  isInteger                 isInt\r\n\t   *  isNaN\r\n\t   *  isNegative                isNeg\r\n\t   *  isPositive                isPos\r\n\t   *  isZero\r\n\t   *  lessThan                  lt\r\n\t   *  lessThanOrEqualTo         lte\r\n\t   *  logarithm                 log\r\n\t   *  [maximum]                 [max]\r\n\t   *  [minimum]                 [min]\r\n\t   *  minus                     sub\r\n\t   *  modulo                    mod\r\n\t   *  naturalExponential        exp\r\n\t   *  naturalLogarithm          ln\r\n\t   *  negated                   neg\r\n\t   *  plus                      add\r\n\t   *  precision                 sd\r\n\t   *  round\r\n\t   *  sine                      sin\r\n\t   *  squareRoot                sqrt\r\n\t   *  tangent                   tan\r\n\t   *  times                     mul\r\n\t   *  toBinary\r\n\t   *  toDecimalPlaces           toDP\r\n\t   *  toExponential\r\n\t   *  toFixed\r\n\t   *  toFraction\r\n\t   *  toHexadecimal             toHex\r\n\t   *  toNearest\r\n\t   *  toNumber\r\n\t   *  toOctal\r\n\t   *  toPower                   pow\r\n\t   *  toPrecision\r\n\t   *  toSignificantDigits       toSD\r\n\t   *  toString\r\n\t   *  truncated                 trunc\r\n\t   *  valueOf                   toJSON\r\n\t   */\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n\t   *\r\n\t   */\r\n\t  P.absoluteValue = P.abs = function () {\r\n\t    var x = new this.constructor(this);\r\n\t    if (x.s < 0) x.s = 1;\r\n\t    return finalise(x);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n\t   * direction of positive Infinity.\r\n\t   *\r\n\t   */\r\n\t  P.ceil = function () {\r\n\t    return finalise(new this.constructor(this), this.e + 1, 2);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return\r\n\t   *   1    if the value of this Decimal is greater than the value of `y`,\r\n\t   *  -1    if the value of this Decimal is less than the value of `y`,\r\n\t   *   0    if they have the same value,\r\n\t   *   NaN  if the value of either Decimal is NaN.\r\n\t   *\r\n\t   */\r\n\t  P.comparedTo = P.cmp = function (y) {\r\n\t    var i, j, xdL, ydL,\r\n\t      x = this,\r\n\t      xd = x.d,\r\n\t      yd = (y = new x.constructor(y)).d,\r\n\t      xs = x.s,\r\n\t      ys = y.s;\r\n\t\r\n\t    // Either NaN or ±Infinity?\r\n\t    if (!xd || !yd) {\r\n\t      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n\t    }\r\n\t\r\n\t    // Either zero?\r\n\t    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\t\r\n\t    // Signs differ?\r\n\t    if (xs !== ys) return xs;\r\n\t\r\n\t    // Compare exponents.\r\n\t    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\t\r\n\t    xdL = xd.length;\r\n\t    ydL = yd.length;\r\n\t\r\n\t    // Compare digit by digit.\r\n\t    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n\t      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n\t    }\r\n\t\r\n\t    // Compare lengths.\r\n\t    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-1, 1]\r\n\t   *\r\n\t   * cos(0)         = 1\r\n\t   * cos(-0)        = 1\r\n\t   * cos(Infinity)  = NaN\r\n\t   * cos(-Infinity) = NaN\r\n\t   * cos(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.cosine = P.cos = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.d) return new Ctor(NaN);\r\n\t\r\n\t    // cos(0) = cos(-0) = 1\r\n\t    if (!x.d[0]) return new Ctor(1);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   *\r\n\t   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   *  cbrt(0)  =  0\r\n\t   *  cbrt(-0) = -0\r\n\t   *  cbrt(1)  =  1\r\n\t   *  cbrt(-1) = -1\r\n\t   *  cbrt(N)  =  N\r\n\t   *  cbrt(-I) = -I\r\n\t   *  cbrt(I)  =  I\r\n\t   *\r\n\t   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n\t   *\r\n\t   */\r\n\t  P.cubeRoot = P.cbrt = function () {\r\n\t    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\t    external = false;\r\n\t\r\n\t    // Initial estimate.\r\n\t    s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\t\r\n\t     // Math.cbrt underflow/overflow?\r\n\t     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n\t    if (!s || Math.abs(s) == 1 / 0) {\r\n\t      n = digitsToString(x.d);\r\n\t      e = x.e;\r\n\t\r\n\t      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n\t      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n\t      s = Math.pow(n, 1 / 3);\r\n\t\r\n\t      // Rarely, e may be one less than the result exponent value.\r\n\t      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\t\r\n\t      if (s == 1 / 0) {\r\n\t        n = '5e' + e;\r\n\t      } else {\r\n\t        n = s.toExponential();\r\n\t        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n\t      }\r\n\t\r\n\t      r = new Ctor(n);\r\n\t      r.s = x.s;\r\n\t    } else {\r\n\t      r = new Ctor(s.toString());\r\n\t    }\r\n\t\r\n\t    sd = (e = Ctor.precision) + 3;\r\n\t\r\n\t    // Halley's method.\r\n\t    // TODO? Compare Newton's method.\r\n\t    for (;;) {\r\n\t      t = r;\r\n\t      t3 = t.times(t).times(t);\r\n\t      t3plusx = t3.plus(x);\r\n\t      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\t\r\n\t      // TODO? Replace with for-loop and checkRoundingDigits.\r\n\t      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n\t        n = n.slice(sd - 3, sd + 1);\r\n\t\r\n\t        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n\t        // , i.e. approaching a rounding boundary, continue the iteration.\r\n\t        if (n == '9999' || !rep && n == '4999') {\r\n\t\r\n\t          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n\t          // nines may infinitely repeat.\r\n\t          if (!rep) {\r\n\t            finalise(t, e + 1, 0);\r\n\t\r\n\t            if (t.times(t).times(t).eq(x)) {\r\n\t              r = t;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t\r\n\t          sd += 4;\r\n\t          rep = 1;\r\n\t        } else {\r\n\t\r\n\t          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n\t          // If not, then there are further digits and m will be truthy.\r\n\t          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\t\r\n\t            // Truncate to the first rounding digit.\r\n\t            finalise(r, e + 1, 1);\r\n\t            m = !r.times(r).times(r).eq(x);\r\n\t          }\r\n\t\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return finalise(r, e, Ctor.rounding, m);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return the number of decimal places of the value of this Decimal.\r\n\t   *\r\n\t   */\r\n\t  P.decimalPlaces = P.dp = function () {\r\n\t    var w,\r\n\t      d = this.d,\r\n\t      n = NaN;\r\n\t\r\n\t    if (d) {\r\n\t      w = d.length - 1;\r\n\t      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\t\r\n\t      // Subtract the number of trailing zeros of the last word.\r\n\t      w = d[w];\r\n\t      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n\t      if (n < 0) n = 0;\r\n\t    }\r\n\t\r\n\t    return n;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  n / 0 = I\r\n\t   *  n / N = N\r\n\t   *  n / I = 0\r\n\t   *  0 / n = 0\r\n\t   *  0 / 0 = N\r\n\t   *  0 / N = N\r\n\t   *  0 / I = 0\r\n\t   *  N / n = N\r\n\t   *  N / 0 = N\r\n\t   *  N / N = N\r\n\t   *  N / I = N\r\n\t   *  I / n = I\r\n\t   *  I / 0 = I\r\n\t   *  I / N = N\r\n\t   *  I / I = N\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.dividedBy = P.div = function (y) {\r\n\t    return divide(this, new this.constructor(y));\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n\t   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\t    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.equals = P.eq = function (y) {\r\n\t    return this.cmp(y) === 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n\t   * direction of negative Infinity.\r\n\t   *\r\n\t   */\r\n\t  P.floor = function () {\r\n\t    return finalise(new this.constructor(this), this.e + 1, 3);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n\t   * false.\r\n\t   *\r\n\t   */\r\n\t  P.greaterThan = P.gt = function (y) {\r\n\t    return this.cmp(y) > 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n\t   * otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n\t    var k = this.cmp(y);\r\n\t    return k == 1 || k === 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [1, Infinity]\r\n\t   *\r\n\t   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n\t   *\r\n\t   * cosh(0)         = 1\r\n\t   * cosh(-0)        = 1\r\n\t   * cosh(Infinity)  = Infinity\r\n\t   * cosh(-Infinity) = Infinity\r\n\t   * cosh(NaN)       = NaN\r\n\t   *\r\n\t   *  x        time taken (ms)   result\r\n\t   * 1000      9                 9.8503555700852349694e+433\r\n\t   * 10000     25                4.4034091128314607936e+4342\r\n\t   * 100000    171               1.4033316802130615897e+43429\r\n\t   * 1000000   3817              1.5166076984010437725e+434294\r\n\t   * 10000000  abandoned after 2 minute wait\r\n\t   *\r\n\t   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n\t   *\r\n\t   */\r\n\t  P.hyperbolicCosine = P.cosh = function () {\r\n\t    var k, n, pr, rm, len,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      one = new Ctor(1);\r\n\t\r\n\t    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n\t    if (x.isZero()) return one;\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n\t    Ctor.rounding = 1;\r\n\t    len = x.d.length;\r\n\t\r\n\t    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n\t    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\t\r\n\t    // Estimate the optimum number of times to use the argument reduction.\r\n\t    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n\t    if (len < 32) {\r\n\t      k = Math.ceil(len / 3);\r\n\t      n = Math.pow(4, -k).toString();\r\n\t    } else {\r\n\t      k = 16;\r\n\t      n = '2.3283064365386962890625e-10';\r\n\t    }\r\n\t\r\n\t    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\t\r\n\t    // Reverse argument reduction\r\n\t    var cosh2_x,\r\n\t      i = k,\r\n\t      d8 = new Ctor(8);\r\n\t    for (; i--;) {\r\n\t      cosh2_x = x.times(x);\r\n\t      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n\t    }\r\n\t\r\n\t    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n\t   *\r\n\t   * sinh(0)         = 0\r\n\t   * sinh(-0)        = -0\r\n\t   * sinh(Infinity)  = Infinity\r\n\t   * sinh(-Infinity) = -Infinity\r\n\t   * sinh(NaN)       = NaN\r\n\t   *\r\n\t   * x        time taken (ms)\r\n\t   * 10       2 ms\r\n\t   * 100      5 ms\r\n\t   * 1000     14 ms\r\n\t   * 10000    82 ms\r\n\t   * 100000   886 ms            1.4033316802130615897e+43429\r\n\t   * 200000   2613 ms\r\n\t   * 300000   5407 ms\r\n\t   * 400000   8824 ms\r\n\t   * 500000   13026 ms          8.7080643612718084129e+217146\r\n\t   * 1000000  48543 ms\r\n\t   *\r\n\t   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n\t   *\r\n\t   */\r\n\t  P.hyperbolicSine = P.sinh = function () {\r\n\t    var k, pr, rm, len,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n\t    Ctor.rounding = 1;\r\n\t    len = x.d.length;\r\n\t\r\n\t    if (len < 3) {\r\n\t      x = taylorSeries(Ctor, 2, x, x, true);\r\n\t    } else {\r\n\t\r\n\t      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n\t      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n\t      // 3 multiplications and 1 addition\r\n\t\r\n\t      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n\t      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n\t      // 4 multiplications and 2 additions\r\n\t\r\n\t      // Estimate the optimum number of times to use the argument reduction.\r\n\t      k = 1.4 * Math.sqrt(len);\r\n\t      k = k > 16 ? 16 : k | 0;\r\n\t\r\n\t      x = x.times(Math.pow(5, -k));\r\n\t\r\n\t      x = taylorSeries(Ctor, 2, x, x, true);\r\n\t\r\n\t      // Reverse argument reduction\r\n\t      var sinh2_x,\r\n\t        d5 = new Ctor(5),\r\n\t        d16 = new Ctor(16),\r\n\t        d20 = new Ctor(20);\r\n\t      for (; k--;) {\r\n\t        sinh2_x = x.times(x);\r\n\t        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n\t      }\r\n\t    }\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return finalise(x, pr, rm, true);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-1, 1]\r\n\t   *\r\n\t   * tanh(x) = sinh(x) / cosh(x)\r\n\t   *\r\n\t   * tanh(0)         = 0\r\n\t   * tanh(-0)        = -0\r\n\t   * tanh(Infinity)  = 1\r\n\t   * tanh(-Infinity) = -1\r\n\t   * tanh(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.hyperbolicTangent = P.tanh = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite()) return new Ctor(x.s);\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + 7;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n\t   * this Decimal.\r\n\t   *\r\n\t   * Domain: [-1, 1]\r\n\t   * Range: [0, pi]\r\n\t   *\r\n\t   * acos(x) = pi/2 - asin(x)\r\n\t   *\r\n\t   * acos(0)       = pi/2\r\n\t   * acos(-0)      = pi/2\r\n\t   * acos(1)       = 0\r\n\t   * acos(-1)      = pi\r\n\t   * acos(1/2)     = pi/3\r\n\t   * acos(-1/2)    = 2*pi/3\r\n\t   * acos(|x| > 1) = NaN\r\n\t   * acos(NaN)     = NaN\r\n\t   *\r\n\t   */\r\n\t  P.inverseCosine = P.acos = function () {\r\n\t    var halfPi,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      k = x.abs().cmp(1),\r\n\t      pr = Ctor.precision,\r\n\t      rm = Ctor.rounding;\r\n\t\r\n\t    if (k !== -1) {\r\n\t      return k === 0\r\n\t        // |x| is 1\r\n\t        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n\t        // |x| > 1 or x is NaN\r\n\t        : new Ctor(NaN);\r\n\t    }\r\n\t\r\n\t    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\t\r\n\t    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\t\r\n\t    Ctor.precision = pr + 6;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    x = x.asin();\r\n\t    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return halfPi.minus(x);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n\t   * value of this Decimal.\r\n\t   *\r\n\t   * Domain: [1, Infinity]\r\n\t   * Range: [0, Infinity]\r\n\t   *\r\n\t   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n\t   *\r\n\t   * acosh(x < 1)     = NaN\r\n\t   * acosh(NaN)       = NaN\r\n\t   * acosh(Infinity)  = Infinity\r\n\t   * acosh(-Infinity) = NaN\r\n\t   * acosh(0)         = NaN\r\n\t   * acosh(-0)        = NaN\r\n\t   * acosh(1)         = 0\r\n\t   * acosh(-1)        = NaN\r\n\t   *\r\n\t   */\r\n\t  P.inverseHyperbolicCosine = P.acosh = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n\t    if (!x.isFinite()) return new Ctor(x);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n\t    Ctor.rounding = 1;\r\n\t    external = false;\r\n\t\r\n\t    x = x.times(x).minus(1).sqrt().plus(x);\r\n\t\r\n\t    external = true;\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return x.ln();\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n\t   * of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n\t   *\r\n\t   * asinh(NaN)       = NaN\r\n\t   * asinh(Infinity)  = Infinity\r\n\t   * asinh(-Infinity) = -Infinity\r\n\t   * asinh(0)         = 0\r\n\t   * asinh(-0)        = -0\r\n\t   *\r\n\t   */\r\n\t  P.inverseHyperbolicSine = P.asinh = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n\t    Ctor.rounding = 1;\r\n\t    external = false;\r\n\t\r\n\t    x = x.times(x).plus(1).sqrt().plus(x);\r\n\t\r\n\t    external = true;\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return x.ln();\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n\t   * value of this Decimal.\r\n\t   *\r\n\t   * Domain: [-1, 1]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n\t   *\r\n\t   * atanh(|x| > 1)   = NaN\r\n\t   * atanh(NaN)       = NaN\r\n\t   * atanh(Infinity)  = NaN\r\n\t   * atanh(-Infinity) = NaN\r\n\t   * atanh(0)         = 0\r\n\t   * atanh(-0)        = -0\r\n\t   * atanh(1)         = Infinity\r\n\t   * atanh(-1)        = -Infinity\r\n\t   *\r\n\t   */\r\n\t  P.inverseHyperbolicTangent = P.atanh = function () {\r\n\t    var pr, rm, wpr, xsd,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite()) return new Ctor(NaN);\r\n\t    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    xsd = x.sd();\r\n\t\r\n\t    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\t\r\n\t    Ctor.precision = wpr = xsd - x.e;\r\n\t\r\n\t    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\t\r\n\t    Ctor.precision = pr + 4;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    x = x.ln();\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return x.times(0.5);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n\t   * Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-pi/2, pi/2]\r\n\t   *\r\n\t   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n\t   *\r\n\t   * asin(0)       = 0\r\n\t   * asin(-0)      = -0\r\n\t   * asin(1/2)     = pi/6\r\n\t   * asin(-1/2)    = -pi/6\r\n\t   * asin(1)       = pi/2\r\n\t   * asin(-1)      = -pi/2\r\n\t   * asin(|x| > 1) = NaN\r\n\t   * asin(NaN)     = NaN\r\n\t   *\r\n\t   * TODO? Compare performance of Taylor series.\r\n\t   *\r\n\t   */\r\n\t  P.inverseSine = P.asin = function () {\r\n\t    var halfPi, k,\r\n\t      pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\t\r\n\t    k = x.abs().cmp(1);\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t\r\n\t    if (k !== -1) {\r\n\t\r\n\t      // |x| is 1\r\n\t      if (k === 0) {\r\n\t        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\t        halfPi.s = x.s;\r\n\t        return halfPi;\r\n\t      }\r\n\t\r\n\t      // |x| > 1 or x is NaN\r\n\t      return new Ctor(NaN);\r\n\t    }\r\n\t\r\n\t    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\t\r\n\t    Ctor.precision = pr + 6;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return x.times(2);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n\t   * of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-pi/2, pi/2]\r\n\t   *\r\n\t   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n\t   *\r\n\t   * atan(0)         = 0\r\n\t   * atan(-0)        = -0\r\n\t   * atan(1)         = pi/4\r\n\t   * atan(-1)        = -pi/4\r\n\t   * atan(Infinity)  = pi/2\r\n\t   * atan(-Infinity) = -pi/2\r\n\t   * atan(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.inverseTangent = P.atan = function () {\r\n\t    var i, j, k, n, px, t, r, wpr, x2,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      pr = Ctor.precision,\r\n\t      rm = Ctor.rounding;\r\n\t\r\n\t    if (!x.isFinite()) {\r\n\t      if (!x.s) return new Ctor(NaN);\r\n\t      if (pr + 4 <= PI_PRECISION) {\r\n\t        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\t        r.s = x.s;\r\n\t        return r;\r\n\t      }\r\n\t    } else if (x.isZero()) {\r\n\t      return new Ctor(x);\r\n\t    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n\t      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n\t      r.s = x.s;\r\n\t      return r;\r\n\t    }\r\n\t\r\n\t    Ctor.precision = wpr = pr + 10;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\t\r\n\t    // Argument reduction\r\n\t    // Ensure |x| < 0.42\r\n\t    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\t\r\n\t    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\t\r\n\t    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\t\r\n\t    external = false;\r\n\t\r\n\t    j = Math.ceil(wpr / LOG_BASE);\r\n\t    n = 1;\r\n\t    x2 = x.times(x);\r\n\t    r = new Ctor(x);\r\n\t    px = x;\r\n\t\r\n\t    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n\t    for (; i !== -1;) {\r\n\t      px = px.times(x2);\r\n\t      t = r.minus(px.div(n += 2));\r\n\t\r\n\t      px = px.times(x2);\r\n\t      r = t.plus(px.div(n += 2));\r\n\t\r\n\t      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n\t    }\r\n\t\r\n\t    if (k) r = r.times(2 << (k - 1));\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isFinite = function () {\r\n\t    return !!this.d;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isInteger = P.isInt = function () {\r\n\t    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isNaN = function () {\r\n\t    return !this.s;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is negative, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isNegative = P.isNeg = function () {\r\n\t    return this.s < 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is positive, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isPositive = P.isPos = function () {\r\n\t    return this.s > 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.isZero = function () {\r\n\t    return !!this.d && this.d[0] === 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.lessThan = P.lt = function (y) {\r\n\t    return this.cmp(y) < 0;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n\t   *\r\n\t   */\r\n\t  P.lessThanOrEqualTo = P.lte = function (y) {\r\n\t    return this.cmp(y) < 1;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * If no base is specified, return log[10](arg).\r\n\t   *\r\n\t   * log[base](arg) = ln(arg) / ln(base)\r\n\t   *\r\n\t   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n\t   * otherwise:\r\n\t   *\r\n\t   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n\t   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n\t   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n\t   *\r\n\t   * log[-b](a)       = NaN\r\n\t   * log[0](a)        = NaN\r\n\t   * log[1](a)        = NaN\r\n\t   * log[NaN](a)      = NaN\r\n\t   * log[Infinity](a) = NaN\r\n\t   * log[b](0)        = -Infinity\r\n\t   * log[b](-0)       = -Infinity\r\n\t   * log[b](-a)       = NaN\r\n\t   * log[b](1)        = 0\r\n\t   * log[b](Infinity) = Infinity\r\n\t   * log[b](NaN)      = NaN\r\n\t   *\r\n\t   * [base] {number|string|Decimal} The base of the logarithm.\r\n\t   *\r\n\t   */\r\n\t  P.logarithm = P.log = function (base) {\r\n\t    var isBase10, d, denominator, k, inf, num, sd, r,\r\n\t      arg = this,\r\n\t      Ctor = arg.constructor,\r\n\t      pr = Ctor.precision,\r\n\t      rm = Ctor.rounding,\r\n\t      guard = 5;\r\n\t\r\n\t    // Default base is 10.\r\n\t    if (base == null) {\r\n\t      base = new Ctor(10);\r\n\t      isBase10 = true;\r\n\t    } else {\r\n\t      base = new Ctor(base);\r\n\t      d = base.d;\r\n\t\r\n\t      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n\t      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\t\r\n\t      isBase10 = base.eq(10);\r\n\t    }\r\n\t\r\n\t    d = arg.d;\r\n\t\r\n\t    // Is arg negative, non-finite, 0 or 1?\r\n\t    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n\t      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n\t    }\r\n\t\r\n\t    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n\t    // integer power of 10.\r\n\t    if (isBase10) {\r\n\t      if (d.length > 1) {\r\n\t        inf = true;\r\n\t      } else {\r\n\t        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n\t        inf = k !== 1;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    external = false;\r\n\t    sd = pr + guard;\r\n\t    num = naturalLogarithm(arg, sd);\r\n\t    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\t\r\n\t    // The result will have 5 rounding digits.\r\n\t    r = divide(num, denominator, sd, 1);\r\n\t\r\n\t    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n\t    // calculate 10 further digits.\r\n\t    //\r\n\t    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n\t    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n\t    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n\t    // Also assume the result is exact if the last 14 are zero.\r\n\t    //\r\n\t    // Example of a result that will be incorrectly rounded:\r\n\t    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n\t    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n\t    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n\t    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n\t    // place is still 2.6.\r\n\t    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\t\r\n\t      do {\r\n\t        sd += 10;\r\n\t        num = naturalLogarithm(arg, sd);\r\n\t        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\t        r = divide(num, denominator, sd, 1);\r\n\t\r\n\t        if (!inf) {\r\n\t\r\n\t          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n\t          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n\t            r = finalise(r, pr + 1, 0);\r\n\t          }\r\n\t\r\n\t          break;\r\n\t        }\r\n\t      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n\t    }\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return finalise(r, pr, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t  P.max = function () {\r\n\t    Array.prototype.push.call(arguments, this);\r\n\t    return maxOrMin(this.constructor, arguments, 'lt');\r\n\t  };\r\n\t   */\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t  P.min = function () {\r\n\t    Array.prototype.push.call(arguments, this);\r\n\t    return maxOrMin(this.constructor, arguments, 'gt');\r\n\t  };\r\n\t   */\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  n - 0 = n\r\n\t   *  n - N = N\r\n\t   *  n - I = -I\r\n\t   *  0 - n = -n\r\n\t   *  0 - 0 = 0\r\n\t   *  0 - N = N\r\n\t   *  0 - I = -I\r\n\t   *  N - n = N\r\n\t   *  N - 0 = N\r\n\t   *  N - N = N\r\n\t   *  N - I = N\r\n\t   *  I - n = I\r\n\t   *  I - 0 = I\r\n\t   *  I - N = N\r\n\t   *  I - I = N\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.minus = P.sub = function (y) {\r\n\t    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    y = new Ctor(y);\r\n\t\r\n\t    // If either is not finite...\r\n\t    if (!x.d || !y.d) {\r\n\t\r\n\t      // Return NaN if either is NaN.\r\n\t      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\t\r\n\t      // Return y negated if x is finite and y is ±Infinity.\r\n\t      else if (x.d) y.s = -y.s;\r\n\t\r\n\t      // Return x if y is finite and x is ±Infinity.\r\n\t      // Return x if both are ±Infinity with different signs.\r\n\t      // Return NaN if both are ±Infinity with the same sign.\r\n\t      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\t\r\n\t      return y;\r\n\t    }\r\n\t\r\n\t    // If signs differ...\r\n\t    if (x.s != y.s) {\r\n\t      y.s = -y.s;\r\n\t      return x.plus(y);\r\n\t    }\r\n\t\r\n\t    xd = x.d;\r\n\t    yd = y.d;\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t\r\n\t    // If either is zero...\r\n\t    if (!xd[0] || !yd[0]) {\r\n\t\r\n\t      // Return y negated if x is zero and y is non-zero.\r\n\t      if (yd[0]) y.s = -y.s;\r\n\t\r\n\t      // Return x if y is zero and x is non-zero.\r\n\t      else if (xd[0]) y = new Ctor(x);\r\n\t\r\n\t      // Return zero if both are zero.\r\n\t      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n\t      else return new Ctor(rm === 3 ? -0 : 0);\r\n\t\r\n\t      return external ? finalise(y, pr, rm) : y;\r\n\t    }\r\n\t\r\n\t    // x and y are finite, non-zero numbers with the same sign.\r\n\t\r\n\t    // Calculate base 1e7 exponents.\r\n\t    e = mathfloor(y.e / LOG_BASE);\r\n\t    xe = mathfloor(x.e / LOG_BASE);\r\n\t\r\n\t    xd = xd.slice();\r\n\t    k = xe - e;\r\n\t\r\n\t    // If base 1e7 exponents differ...\r\n\t    if (k) {\r\n\t      xLTy = k < 0;\r\n\t\r\n\t      if (xLTy) {\r\n\t        d = xd;\r\n\t        k = -k;\r\n\t        len = yd.length;\r\n\t      } else {\r\n\t        d = yd;\r\n\t        e = xe;\r\n\t        len = xd.length;\r\n\t      }\r\n\t\r\n\t      // Numbers with massively different exponents would result in a very high number of\r\n\t      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n\t      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n\t      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\t\r\n\t      if (k > i) {\r\n\t        k = i;\r\n\t        d.length = 1;\r\n\t      }\r\n\t\r\n\t      // Prepend zeros to equalise exponents.\r\n\t      d.reverse();\r\n\t      for (i = k; i--;) d.push(0);\r\n\t      d.reverse();\r\n\t\r\n\t    // Base 1e7 exponents equal.\r\n\t    } else {\r\n\t\r\n\t      // Check digits to determine which is the bigger number.\r\n\t\r\n\t      i = xd.length;\r\n\t      len = yd.length;\r\n\t      xLTy = i < len;\r\n\t      if (xLTy) len = i;\r\n\t\r\n\t      for (i = 0; i < len; i++) {\r\n\t        if (xd[i] != yd[i]) {\r\n\t          xLTy = xd[i] < yd[i];\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      k = 0;\r\n\t    }\r\n\t\r\n\t    if (xLTy) {\r\n\t      d = xd;\r\n\t      xd = yd;\r\n\t      yd = d;\r\n\t      y.s = -y.s;\r\n\t    }\r\n\t\r\n\t    len = xd.length;\r\n\t\r\n\t    // Append zeros to `xd` if shorter.\r\n\t    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n\t    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\t\r\n\t    // Subtract yd from xd.\r\n\t    for (i = yd.length; i > k;) {\r\n\t\r\n\t      if (xd[--i] < yd[i]) {\r\n\t        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n\t        --xd[j];\r\n\t        xd[i] += BASE;\r\n\t      }\r\n\t\r\n\t      xd[i] -= yd[i];\r\n\t    }\r\n\t\r\n\t    // Remove trailing zeros.\r\n\t    for (; xd[--len] === 0;) xd.pop();\r\n\t\r\n\t    // Remove leading zeros and adjust exponent accordingly.\r\n\t    for (; xd[0] === 0; xd.shift()) --e;\r\n\t\r\n\t    // Zero?\r\n\t    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\t\r\n\t    y.d = xd;\r\n\t    y.e = getBase10Exponent(xd, e);\r\n\t\r\n\t    return external ? finalise(y, pr, rm) : y;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   *   n % 0 =  N\r\n\t   *   n % N =  N\r\n\t   *   n % I =  n\r\n\t   *   0 % n =  0\r\n\t   *  -0 % n = -0\r\n\t   *   0 % 0 =  N\r\n\t   *   0 % N =  N\r\n\t   *   0 % I =  0\r\n\t   *   N % n =  N\r\n\t   *   N % 0 =  N\r\n\t   *   N % N =  N\r\n\t   *   N % I =  N\r\n\t   *   I % n =  N\r\n\t   *   I % 0 =  N\r\n\t   *   I % N =  N\r\n\t   *   I % I =  N\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * The result depends on the modulo mode.\r\n\t   *\r\n\t   */\r\n\t  P.modulo = P.mod = function (y) {\r\n\t    var q,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    y = new Ctor(y);\r\n\t\r\n\t    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n\t    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\t\r\n\t    // Return x if y is ±Infinity or x is ±0.\r\n\t    if (!y.d || x.d && !x.d[0]) {\r\n\t      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n\t    }\r\n\t\r\n\t    // Prevent rounding of intermediate calculations.\r\n\t    external = false;\r\n\t\r\n\t    if (Ctor.modulo == 9) {\r\n\t\r\n\t      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n\t      // result = x - q * y    where  0 <= result < abs(y)\r\n\t      q = divide(x, y.abs(), 0, 3, 1);\r\n\t      q.s *= y.s;\r\n\t    } else {\r\n\t      q = divide(x, y, 0, Ctor.modulo, 1);\r\n\t    }\r\n\t\r\n\t    q = q.times(y);\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return x.minus(q);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n\t   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.naturalExponential = P.exp = function () {\r\n\t    return naturalExponential(this);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n\t   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.naturalLogarithm = P.ln = function () {\r\n\t    return naturalLogarithm(this);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n\t   * -1.\r\n\t   *\r\n\t   */\r\n\t  P.negated = P.neg = function () {\r\n\t    var x = new this.constructor(this);\r\n\t    x.s = -x.s;\r\n\t    return finalise(x);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  n + 0 = n\r\n\t   *  n + N = N\r\n\t   *  n + I = I\r\n\t   *  0 + n = n\r\n\t   *  0 + 0 = 0\r\n\t   *  0 + N = N\r\n\t   *  0 + I = I\r\n\t   *  N + n = N\r\n\t   *  N + 0 = N\r\n\t   *  N + N = N\r\n\t   *  N + I = N\r\n\t   *  I + n = I\r\n\t   *  I + 0 = I\r\n\t   *  I + N = N\r\n\t   *  I + I = I\r\n\t   *\r\n\t   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.plus = P.add = function (y) {\r\n\t    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    y = new Ctor(y);\r\n\t\r\n\t    // If either is not finite...\r\n\t    if (!x.d || !y.d) {\r\n\t\r\n\t      // Return NaN if either is NaN.\r\n\t      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\t\r\n\t      // Return x if y is finite and x is ±Infinity.\r\n\t      // Return x if both are ±Infinity with the same sign.\r\n\t      // Return NaN if both are ±Infinity with different signs.\r\n\t      // Return y if x is finite and y is ±Infinity.\r\n\t      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\t\r\n\t      return y;\r\n\t    }\r\n\t\r\n\t     // If signs differ...\r\n\t    if (x.s != y.s) {\r\n\t      y.s = -y.s;\r\n\t      return x.minus(y);\r\n\t    }\r\n\t\r\n\t    xd = x.d;\r\n\t    yd = y.d;\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t\r\n\t    // If either is zero...\r\n\t    if (!xd[0] || !yd[0]) {\r\n\t\r\n\t      // Return x if y is zero.\r\n\t      // Return y if y is non-zero.\r\n\t      if (!yd[0]) y = new Ctor(x);\r\n\t\r\n\t      return external ? finalise(y, pr, rm) : y;\r\n\t    }\r\n\t\r\n\t    // x and y are finite, non-zero numbers with the same sign.\r\n\t\r\n\t    // Calculate base 1e7 exponents.\r\n\t    k = mathfloor(x.e / LOG_BASE);\r\n\t    e = mathfloor(y.e / LOG_BASE);\r\n\t\r\n\t    xd = xd.slice();\r\n\t    i = k - e;\r\n\t\r\n\t    // If base 1e7 exponents differ...\r\n\t    if (i) {\r\n\t\r\n\t      if (i < 0) {\r\n\t        d = xd;\r\n\t        i = -i;\r\n\t        len = yd.length;\r\n\t      } else {\r\n\t        d = yd;\r\n\t        e = k;\r\n\t        len = xd.length;\r\n\t      }\r\n\t\r\n\t      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n\t      k = Math.ceil(pr / LOG_BASE);\r\n\t      len = k > len ? k + 1 : len + 1;\r\n\t\r\n\t      if (i > len) {\r\n\t        i = len;\r\n\t        d.length = 1;\r\n\t      }\r\n\t\r\n\t      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n\t      d.reverse();\r\n\t      for (; i--;) d.push(0);\r\n\t      d.reverse();\r\n\t    }\r\n\t\r\n\t    len = xd.length;\r\n\t    i = yd.length;\r\n\t\r\n\t    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n\t    if (len - i < 0) {\r\n\t      i = len;\r\n\t      d = yd;\r\n\t      yd = xd;\r\n\t      xd = d;\r\n\t    }\r\n\t\r\n\t    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n\t    for (carry = 0; i;) {\r\n\t      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n\t      xd[i] %= BASE;\r\n\t    }\r\n\t\r\n\t    if (carry) {\r\n\t      xd.unshift(carry);\r\n\t      ++e;\r\n\t    }\r\n\t\r\n\t    // Remove trailing zeros.\r\n\t    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\t    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\t\r\n\t    y.d = xd;\r\n\t    y.e = getBase10Exponent(xd, e);\r\n\t\r\n\t    return external ? finalise(y, pr, rm) : y;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return the number of significant digits of the value of this Decimal.\r\n\t   *\r\n\t   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n\t   *\r\n\t   */\r\n\t  P.precision = P.sd = function (z) {\r\n\t    var k,\r\n\t      x = this;\r\n\t\r\n\t    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\t\r\n\t    if (x.d) {\r\n\t      k = getPrecision(x.d);\r\n\t      if (z && x.e + 1 > k) k = x.e + 1;\r\n\t    } else {\r\n\t      k = NaN;\r\n\t    }\r\n\t\r\n\t    return k;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n\t   * rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.round = function () {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-1, 1]\r\n\t   *\r\n\t   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n\t   *\r\n\t   * sin(0)         = 0\r\n\t   * sin(-0)        = -0\r\n\t   * sin(Infinity)  = NaN\r\n\t   * sin(-Infinity) = NaN\r\n\t   * sin(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.sine = P.sin = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite()) return new Ctor(NaN);\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   *  sqrt(-n) =  N\r\n\t   *  sqrt(N)  =  N\r\n\t   *  sqrt(-I) =  N\r\n\t   *  sqrt(I)  =  I\r\n\t   *  sqrt(0)  =  0\r\n\t   *  sqrt(-0) = -0\r\n\t   *\r\n\t   */\r\n\t  P.squareRoot = P.sqrt = function () {\r\n\t    var m, n, sd, r, rep, t,\r\n\t      x = this,\r\n\t      d = x.d,\r\n\t      e = x.e,\r\n\t      s = x.s,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    // Negative/NaN/Infinity/zero?\r\n\t    if (s !== 1 || !d || !d[0]) {\r\n\t      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n\t    }\r\n\t\r\n\t    external = false;\r\n\t\r\n\t    // Initial estimate.\r\n\t    s = Math.sqrt(+x);\r\n\t\r\n\t    // Math.sqrt underflow/overflow?\r\n\t    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n\t    if (s == 0 || s == 1 / 0) {\r\n\t      n = digitsToString(d);\r\n\t\r\n\t      if ((n.length + e) % 2 == 0) n += '0';\r\n\t      s = Math.sqrt(n);\r\n\t      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\t\r\n\t      if (s == 1 / 0) {\r\n\t        n = '1e' + e;\r\n\t      } else {\r\n\t        n = s.toExponential();\r\n\t        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n\t      }\r\n\t\r\n\t      r = new Ctor(n);\r\n\t    } else {\r\n\t      r = new Ctor(s.toString());\r\n\t    }\r\n\t\r\n\t    sd = (e = Ctor.precision) + 3;\r\n\t\r\n\t    // Newton-Raphson iteration.\r\n\t    for (;;) {\r\n\t      t = r;\r\n\t      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\t\r\n\t      // TODO? Replace with for-loop and checkRoundingDigits.\r\n\t      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n\t        n = n.slice(sd - 3, sd + 1);\r\n\t\r\n\t        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n\t        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n\t        if (n == '9999' || !rep && n == '4999') {\r\n\t\r\n\t          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n\t          // nines may infinitely repeat.\r\n\t          if (!rep) {\r\n\t            finalise(t, e + 1, 0);\r\n\t\r\n\t            if (t.times(t).eq(x)) {\r\n\t              r = t;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t\r\n\t          sd += 4;\r\n\t          rep = 1;\r\n\t        } else {\r\n\t\r\n\t          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n\t          // If not, then there are further digits and m will be truthy.\r\n\t          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\t\r\n\t            // Truncate to the first rounding digit.\r\n\t            finalise(r, e + 1, 1);\r\n\t            m = !r.times(r).eq(x);\r\n\t          }\r\n\t\r\n\t          break;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return finalise(r, e, Ctor.rounding, m);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-Infinity, Infinity]\r\n\t   *\r\n\t   * tan(0)         = 0\r\n\t   * tan(-0)        = -0\r\n\t   * tan(Infinity)  = NaN\r\n\t   * tan(-Infinity) = NaN\r\n\t   * tan(NaN)       = NaN\r\n\t   *\r\n\t   */\r\n\t  P.tangent = P.tan = function () {\r\n\t    var pr, rm,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!x.isFinite()) return new Ctor(NaN);\r\n\t    if (x.isZero()) return new Ctor(x);\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t    Ctor.precision = pr + 10;\r\n\t    Ctor.rounding = 1;\r\n\t\r\n\t    x = x.sin();\r\n\t    x.s = 1;\r\n\t    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  n * 0 = 0\r\n\t   *  n * N = N\r\n\t   *  n * I = I\r\n\t   *  0 * n = 0\r\n\t   *  0 * 0 = 0\r\n\t   *  0 * N = N\r\n\t   *  0 * I = N\r\n\t   *  N * n = N\r\n\t   *  N * 0 = N\r\n\t   *  N * N = N\r\n\t   *  N * I = N\r\n\t   *  I * n = I\r\n\t   *  I * 0 = N\r\n\t   *  I * N = N\r\n\t   *  I * I = I\r\n\t   *\r\n\t   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   */\r\n\t  P.times = P.mul = function (y) {\r\n\t    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      xd = x.d,\r\n\t      yd = (y = new Ctor(y)).d;\r\n\t\r\n\t    y.s *= x.s;\r\n\t\r\n\t     // If either is NaN, ±Infinity or ±0...\r\n\t    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\t\r\n\t      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\t\r\n\t        // Return NaN if either is NaN.\r\n\t        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n\t        ? NaN\r\n\t\r\n\t        // Return ±Infinity if either is ±Infinity.\r\n\t        // Return ±0 if either is ±0.\r\n\t        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n\t    }\r\n\t\r\n\t    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n\t    xdL = xd.length;\r\n\t    ydL = yd.length;\r\n\t\r\n\t    // Ensure xd points to the longer array.\r\n\t    if (xdL < ydL) {\r\n\t      r = xd;\r\n\t      xd = yd;\r\n\t      yd = r;\r\n\t      rL = xdL;\r\n\t      xdL = ydL;\r\n\t      ydL = rL;\r\n\t    }\r\n\t\r\n\t    // Initialise the result array with zeros.\r\n\t    r = [];\r\n\t    rL = xdL + ydL;\r\n\t    for (i = rL; i--;) r.push(0);\r\n\t\r\n\t    // Multiply!\r\n\t    for (i = ydL; --i >= 0;) {\r\n\t      carry = 0;\r\n\t      for (k = xdL + i; k > i;) {\r\n\t        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n\t        r[k--] = t % BASE | 0;\r\n\t        carry = t / BASE | 0;\r\n\t      }\r\n\t\r\n\t      r[k] = (r[k] + carry) % BASE | 0;\r\n\t    }\r\n\t\r\n\t    // Remove trailing zeros.\r\n\t    for (; !r[--rL];) r.pop();\r\n\t\r\n\t    if (carry) ++e;\r\n\t    else r.shift();\r\n\t\r\n\t    // Remove trailing zeros.\r\n\t    for (i = r.length; !r[--i];) r.pop();\r\n\t\r\n\t    y.d = r;\r\n\t    y.e = getBase10Exponent(r, e);\r\n\t\r\n\t    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n\t   * digits using rounding mode `rm`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present then return binary exponential notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toBinary = function (sd, rm) {\r\n\t    return toStringBinary(this, 2, sd, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n\t   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n\t   *\r\n\t   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n\t   *\r\n\t   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    x = new Ctor(x);\r\n\t    if (dp === void 0) return x;\r\n\t\r\n\t    checkInt32(dp, 0, MAX_DIGITS);\r\n\t\r\n\t    if (rm === void 0) rm = Ctor.rounding;\r\n\t    else checkInt32(rm, 0, 8);\r\n\t\r\n\t    return finalise(x, dp + x.e + 1, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n\t   * `dp` fixed decimal places using rounding mode `rounding`.\r\n\t   *\r\n\t   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toExponential = function (dp, rm) {\r\n\t    var str,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (dp === void 0) {\r\n\t      str = finiteToString(x, true);\r\n\t    } else {\r\n\t      checkInt32(dp, 0, MAX_DIGITS);\r\n\t\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t\r\n\t      x = finalise(new Ctor(x), dp + 1, rm);\r\n\t      str = finiteToString(x, true, dp + 1);\r\n\t    }\r\n\t\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n\t   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n\t   * omitted.\r\n\t   *\r\n\t   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n\t   *\r\n\t   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n\t   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n\t   * (-0).toFixed(3) is '0.000'.\r\n\t   * (-0.5).toFixed(0) is '-0'.\r\n\t   *\r\n\t   */\r\n\t  P.toFixed = function (dp, rm) {\r\n\t    var str, y,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (dp === void 0) {\r\n\t      str = finiteToString(x);\r\n\t    } else {\r\n\t      checkInt32(dp, 0, MAX_DIGITS);\r\n\t\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t\r\n\t      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n\t      str = finiteToString(y, false, dp + y.e + 1);\r\n\t    }\r\n\t\r\n\t    // To determine whether to add the minus sign look at the value before it was rounded,\r\n\t    // i.e. look at `x` rather than `y`.\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n\t   * numerator and an integer denominator.\r\n\t   *\r\n\t   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n\t   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n\t   * value necessary to represent the number exactly.\r\n\t   *\r\n\t   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n\t   *\r\n\t   */\r\n\t  P.toFraction = function (maxD) {\r\n\t    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n\t      x = this,\r\n\t      xd = x.d,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (!xd) return new Ctor(x);\r\n\t\r\n\t    n1 = d0 = new Ctor(1);\r\n\t    d1 = n0 = new Ctor(0);\r\n\t\r\n\t    d = new Ctor(d1);\r\n\t    e = d.e = getPrecision(xd) - x.e - 1;\r\n\t    k = e % LOG_BASE;\r\n\t    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\t\r\n\t    if (maxD == null) {\r\n\t\r\n\t      // d is 10**e, the minimum max-denominator needed.\r\n\t      maxD = e > 0 ? d : n1;\r\n\t    } else {\r\n\t      n = new Ctor(maxD);\r\n\t      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n\t      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n\t    }\r\n\t\r\n\t    external = false;\r\n\t    n = new Ctor(digitsToString(xd));\r\n\t    pr = Ctor.precision;\r\n\t    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\t\r\n\t    for (;;)  {\r\n\t      q = divide(n, d, 0, 1, 1);\r\n\t      d2 = d0.plus(q.times(d1));\r\n\t      if (d2.cmp(maxD) == 1) break;\r\n\t      d0 = d1;\r\n\t      d1 = d2;\r\n\t      d2 = n1;\r\n\t      n1 = n0.plus(q.times(d2));\r\n\t      n0 = d2;\r\n\t      d2 = d;\r\n\t      d = n.minus(q.times(d2));\r\n\t      n = d2;\r\n\t    }\r\n\t\r\n\t    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n\t    n0 = n0.plus(d2.times(n1));\r\n\t    d0 = d0.plus(d2.times(d1));\r\n\t    n0.s = n1.s = x.s;\r\n\t\r\n\t    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n\t    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n\t        ? [n1, d1] : [n0, d0];\r\n\t\r\n\t    Ctor.precision = pr;\r\n\t    external = true;\r\n\t\r\n\t    return r;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n\t   * digits using rounding mode `rm`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present then return binary exponential notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n\t    return toStringBinary(this, 16, sd, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value\r\n\t   * of this Decimal.\r\n\t   *\r\n\t   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,\r\n\t   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.\r\n\t   *\r\n\t   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0\r\n\t   * (ROUND_UP), and so on.\r\n\t   *\r\n\t   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n\t   * or `y` is NaN, in which case the return value will be also be NaN.\r\n\t   *\r\n\t   * The return value is not affected by the value of `precision`.\r\n\t   *\r\n\t   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   * 'toNearest() rounding mode not an integer: {rm}'\r\n\t   * 'toNearest() rounding mode out of range: {rm}'\r\n\t   *\r\n\t   */\r\n\t  P.toNearest = function (y, rm) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    x = new Ctor(x);\r\n\t\r\n\t    if (y == null) {\r\n\t\r\n\t      // If x is not finite, return x.\r\n\t      if (!x.d) return x;\r\n\t\r\n\t      y = new Ctor(1);\r\n\t      rm = Ctor.rounding;\r\n\t    } else {\r\n\t      y = new Ctor(y);\r\n\t      if (rm !== void 0) checkInt32(rm, 0, 8);\r\n\t\r\n\t      // If x is not finite, return x if y is not NaN, else NaN.\r\n\t      if (!x.d) return y.s ? x : y;\r\n\t\r\n\t      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n\t      if (!y.d) {\r\n\t        if (y.s) y.s = x.s;\r\n\t        return y;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    // If y is not zero, calculate the nearest multiple of y to x.\r\n\t    if (y.d[0]) {\r\n\t      external = false;\r\n\t      if (rm < 4) rm = [4, 5, 7, 8][rm];\r\n\t      x = divide(x, y, 0, rm, 1).times(y);\r\n\t      external = true;\r\n\t      finalise(x);\r\n\t\r\n\t    // If y is zero, return zero with the sign of x.\r\n\t    } else {\r\n\t      y.s = x.s;\r\n\t      x = y;\r\n\t    }\r\n\t\r\n\t    return x;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return the value of this Decimal converted to a number primitive.\r\n\t   * Zero keeps its sign.\r\n\t   *\r\n\t   */\r\n\t  P.toNumber = function () {\r\n\t    return +this;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n\t   * digits using rounding mode `rm`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present then return binary exponential notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toOctal = function (sd, rm) {\r\n\t    return toStringBinary(this, 8, sd, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n\t   * to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * ECMAScript compliant.\r\n\t   *\r\n\t   *   pow(x, NaN)                           = NaN\r\n\t   *   pow(x, ±0)                            = 1\r\n\t\r\n\t   *   pow(NaN, non-zero)                    = NaN\r\n\t   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n\t   *   pow(abs(x) > 1, -Infinity)            = +0\r\n\t   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n\t   *   pow(abs(x) < 1, +Infinity)            = +0\r\n\t   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n\t   *   pow(+Infinity, y > 0)                 = +Infinity\r\n\t   *   pow(+Infinity, y < 0)                 = +0\r\n\t   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n\t   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n\t   *   pow(-Infinity, odd integer < 0)       = -0\r\n\t   *   pow(-Infinity, even integer < 0)      = +0\r\n\t   *   pow(+0, y > 0)                        = +0\r\n\t   *   pow(+0, y < 0)                        = +Infinity\r\n\t   *   pow(-0, odd integer > 0)              = -0\r\n\t   *   pow(-0, even integer > 0)             = +0\r\n\t   *   pow(-0, odd integer < 0)              = -Infinity\r\n\t   *   pow(-0, even integer < 0)             = +Infinity\r\n\t   *   pow(finite x < 0, finite non-integer) = NaN\r\n\t   *\r\n\t   * For non-integer or very large exponents pow(x, y) is calculated using\r\n\t   *\r\n\t   *   x^y = exp(y*ln(x))\r\n\t   *\r\n\t   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n\t   * probability of an incorrectly rounded result\r\n\t   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n\t   * i.e. 1 in 250,000,000,000,000\r\n\t   *\r\n\t   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n\t   *\r\n\t   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n\t   *\r\n\t   */\r\n\t  P.toPower = P.pow = function (y) {\r\n\t    var e, k, pr, r, rm, sign, yIsInt,\r\n\t      x = this,\r\n\t      Ctor = x.constructor,\r\n\t      yn = +(y = new Ctor(y));\r\n\t\r\n\t    // Either ±Infinity, NaN or ±0?\r\n\t    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return  new Ctor(mathpow(+x, yn));\r\n\t\r\n\t    x = new Ctor(x);\r\n\t\r\n\t    if (x.eq(1)) return x;\r\n\t\r\n\t    pr = Ctor.precision;\r\n\t    rm = Ctor.rounding;\r\n\t\r\n\t    if (y.eq(1)) return finalise(x, pr, rm);\r\n\t\r\n\t    e = mathfloor(y.e / LOG_BASE);\r\n\t    k = y.d.length - 1;\r\n\t    yIsInt = e >= k;\r\n\t    sign = x.s;\r\n\t\r\n\t    if (!yIsInt) {\r\n\t      if (sign < 0) return new Ctor(NaN);\r\n\t\r\n\t    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n\t    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n\t      r = intPow(Ctor, x, k, pr);\r\n\t      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n\t    }\r\n\t\r\n\t    // Result is negative if x is negative and the last digit of integer y is odd.\r\n\t    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\t\r\n\t    // Estimate result exponent.\r\n\t    // x^y = 10^e,  where e = y * log10(x)\r\n\t    // log10(x) = log10(x_significand) + x_exponent\r\n\t    // log10(x_significand) = ln(x_significand) / ln(10)\r\n\t    k = mathpow(+x, yn);\r\n\t    e = k == 0 || !isFinite(k)\r\n\t      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n\t      : new Ctor(k + '').e;\r\n\t\r\n\t    // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\t\r\n\t    // Overflow/underflow?\r\n\t    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? sign / 0 : 0);\r\n\t\r\n\t    external = false;\r\n\t    Ctor.rounding = x.s = 1;\r\n\t\r\n\t    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n\t    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n\t    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n\t    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n\t    k = Math.min(12, (e + '').length);\r\n\t\r\n\t    // r = x^y = exp(y*ln(x))\r\n\t    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\t\r\n\t    // Truncate to the required precision plus five rounding digits.\r\n\t    r = finalise(r, pr + 5, 1);\r\n\t\r\n\t    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n\t    // the result.\r\n\t    if (checkRoundingDigits(r.d, pr, rm)) {\r\n\t      e = pr + 10;\r\n\t\r\n\t      // Truncate to the increased precision plus five rounding digits.\r\n\t      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\t\r\n\t      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n\t      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n\t        r = finalise(r, pr + 1, 0);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    r.s = sign;\r\n\t    external = true;\r\n\t    Ctor.rounding = rm;\r\n\t\r\n\t    return finalise(r, pr, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n\t   * the integer part of the value in normal notation.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   */\r\n\t  P.toPrecision = function (sd, rm) {\r\n\t    var str,\r\n\t      x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (sd === void 0) {\r\n\t      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\t    } else {\r\n\t      checkInt32(sd, 1, MAX_DIGITS);\r\n\t\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t\r\n\t      x = finalise(new Ctor(x), sd, rm);\r\n\t      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n\t    }\r\n\t\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n\t   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n\t   * omitted.\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n\t   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t   *\r\n\t   * 'toSD() digits out of range: {sd}'\r\n\t   * 'toSD() digits not an integer: {sd}'\r\n\t   * 'toSD() rounding mode not an integer: {rm}'\r\n\t   * 'toSD() rounding mode out of range: {rm}'\r\n\t   *\r\n\t   */\r\n\t  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    if (sd === void 0) {\r\n\t      sd = Ctor.precision;\r\n\t      rm = Ctor.rounding;\r\n\t    } else {\r\n\t      checkInt32(sd, 1, MAX_DIGITS);\r\n\t\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t    }\r\n\t\r\n\t    return finalise(new Ctor(x), sd, rm);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal.\r\n\t   *\r\n\t   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n\t   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n\t   *\r\n\t   */\r\n\t  P.toString = function () {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor,\r\n\t      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\t\r\n\t    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n\t   *\r\n\t   */\r\n\t  P.truncated = P.trunc = function () {\r\n\t    return finalise(new this.constructor(this), this.e + 1, 1);\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a string representing the value of this Decimal.\r\n\t   * Unlike `toString`, negative zero will include the minus sign.\r\n\t   *\r\n\t   */\r\n\t  P.valueOf = P.toJSON = function () {\r\n\t    var x = this,\r\n\t      Ctor = x.constructor,\r\n\t      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\t\r\n\t    return x.isNeg() ? '-' + str : str;\r\n\t  };\r\n\t\r\n\t\r\n\t  /*\r\n\t  // Add aliases to match BigDecimal method names.\r\n\t  // P.add = P.plus;\r\n\t  P.subtract = P.minus;\r\n\t  P.multiply = P.times;\r\n\t  P.divide = P.div;\r\n\t  P.remainder = P.mod;\r\n\t  P.compareTo = P.cmp;\r\n\t  P.negate = P.neg;\r\n\t   */\r\n\t\r\n\t\r\n\t  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n\t   *                           finiteToString, naturalExponential, naturalLogarithm\r\n\t   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n\t   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n\t   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n\t   *  convertBase              toStringBinary, parseOther\r\n\t   *  cos                      P.cos\r\n\t   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n\t   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n\t   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n\t   *                           taylorSeries, atan2, parseOther\r\n\t   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n\t   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n\t   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n\t   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n\t   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n\t   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n\t   *                           naturalLogarithm, ceil, floor, round, trunc\r\n\t   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n\t   *                           toStringBinary\r\n\t   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n\t   *  getLn10                  P.logarithm, naturalLogarithm\r\n\t   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n\t   *  getPrecision             P.precision, P.toFraction\r\n\t   *  getZeroString            digitsToString, finiteToString\r\n\t   *  intPow                   P.toPower, parseOther\r\n\t   *  isOdd                    toLessThanHalfPi\r\n\t   *  maxOrMin                 max, min\r\n\t   *  naturalExponential       P.naturalExponential, P.toPower\r\n\t   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n\t   *                           P.toPower, naturalExponential\r\n\t   *  nonFiniteToString        finiteToString, toStringBinary\r\n\t   *  parseDecimal             Decimal\r\n\t   *  parseOther               Decimal\r\n\t   *  sin                      P.sin\r\n\t   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n\t   *  toLessThanHalfPi         P.cos, P.sin\r\n\t   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n\t   *  truncate                 intPow\r\n\t   *\r\n\t   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n\t   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n\t   */\r\n\t\r\n\t\r\n\t  function digitsToString(d) {\r\n\t    var i, k, ws,\r\n\t      indexOfLastWord = d.length - 1,\r\n\t      str = '',\r\n\t      w = d[0];\r\n\t\r\n\t    if (indexOfLastWord > 0) {\r\n\t      str += w;\r\n\t      for (i = 1; i < indexOfLastWord; i++) {\r\n\t        ws = d[i] + '';\r\n\t        k = LOG_BASE - ws.length;\r\n\t        if (k) str += getZeroString(k);\r\n\t        str += ws;\r\n\t      }\r\n\t\r\n\t      w = d[i];\r\n\t      ws = w + '';\r\n\t      k = LOG_BASE - ws.length;\r\n\t      if (k) str += getZeroString(k);\r\n\t    } else if (w === 0) {\r\n\t      return '0';\r\n\t    }\r\n\t\r\n\t    // Remove trailing zeros of last w.\r\n\t    for (; w % 10 === 0;) w /= 10;\r\n\t\r\n\t    return str + w;\r\n\t  }\r\n\t\r\n\t\r\n\t  function checkInt32(i, min, max) {\r\n\t    if (i !== ~~i || i < min || i > max) {\r\n\t      throw Error(invalidArgument + i);\r\n\t    }\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n\t   * `repeating == null` if caller is `log` or `pow`,\r\n\t   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n\t   */\r\n\t  function checkRoundingDigits(d, i, rm, repeating) {\r\n\t    var di, k, r, rd;\r\n\t\r\n\t    // Get the length of the first word of the array d.\r\n\t    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\t\r\n\t    // Is the rounding digit in the first word of d?\r\n\t    if (--i < 0) {\r\n\t      i += LOG_BASE;\r\n\t      di = 0;\r\n\t    } else {\r\n\t      di = Math.ceil((i + 1) / LOG_BASE);\r\n\t      i %= LOG_BASE;\r\n\t    }\r\n\t\r\n\t    // i is the index (0 - 6) of the rounding digit.\r\n\t    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n\t    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n\t    k = mathpow(10, LOG_BASE - i);\r\n\t    rd = d[di] % k | 0;\r\n\t\r\n\t    if (repeating == null) {\r\n\t      if (i < 3) {\r\n\t        if (i == 0) rd = rd / 100 | 0;\r\n\t        else if (i == 1) rd = rd / 10 | 0;\r\n\t        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n\t      } else {\r\n\t        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n\t          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n\t            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n\t      }\r\n\t    } else {\r\n\t      if (i < 4) {\r\n\t        if (i == 0) rd = rd / 1000 | 0;\r\n\t        else if (i == 1) rd = rd / 100 | 0;\r\n\t        else if (i == 2) rd = rd / 10 | 0;\r\n\t        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n\t      } else {\r\n\t        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n\t        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n\t          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return r;\r\n\t  }\r\n\t\r\n\t\r\n\t  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n\t  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n\t  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n\t  function convertBase(str, baseIn, baseOut) {\r\n\t    var j,\r\n\t      arr = [0],\r\n\t      arrL,\r\n\t      i = 0,\r\n\t      strL = str.length;\r\n\t\r\n\t    for (; i < strL;) {\r\n\t      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n\t      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n\t      for (j = 0; j < arr.length; j++) {\r\n\t        if (arr[j] > baseOut - 1) {\r\n\t          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n\t          arr[j + 1] += arr[j] / baseOut | 0;\r\n\t          arr[j] %= baseOut;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return arr.reverse();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n\t   * |x| < pi/2\r\n\t   *\r\n\t   */\r\n\t  function cosine(Ctor, x) {\r\n\t    var k, y,\r\n\t      len = x.d.length;\r\n\t\r\n\t    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n\t    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\t\r\n\t    // Estimate the optimum number of times to use the argument reduction.\r\n\t    if (len < 32) {\r\n\t      k = Math.ceil(len / 3);\r\n\t      y = Math.pow(4, -k).toString();\r\n\t    } else {\r\n\t      k = 16;\r\n\t      y = '2.3283064365386962890625e-10';\r\n\t    }\r\n\t\r\n\t    Ctor.precision += k;\r\n\t\r\n\t    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\t\r\n\t    // Reverse argument reduction\r\n\t    for (var i = k; i--;) {\r\n\t      var cos2x = x.times(x);\r\n\t      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n\t    }\r\n\t\r\n\t    Ctor.precision -= k;\r\n\t\r\n\t    return x;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Perform division in the specified base.\r\n\t   */\r\n\t  var divide = (function () {\r\n\t\r\n\t    // Assumes non-zero x and k, and hence non-zero result.\r\n\t    function multiplyInteger(x, k, base) {\r\n\t      var temp,\r\n\t        carry = 0,\r\n\t        i = x.length;\r\n\t\r\n\t      for (x = x.slice(); i--;) {\r\n\t        temp = x[i] * k + carry;\r\n\t        x[i] = temp % base | 0;\r\n\t        carry = temp / base | 0;\r\n\t      }\r\n\t\r\n\t      if (carry) x.unshift(carry);\r\n\t\r\n\t      return x;\r\n\t    }\r\n\t\r\n\t    function compare(a, b, aL, bL) {\r\n\t      var i, r;\r\n\t\r\n\t      if (aL != bL) {\r\n\t        r = aL > bL ? 1 : -1;\r\n\t      } else {\r\n\t        for (i = r = 0; i < aL; i++) {\r\n\t          if (a[i] != b[i]) {\r\n\t            r = a[i] > b[i] ? 1 : -1;\r\n\t            break;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t\r\n\t      return r;\r\n\t    }\r\n\t\r\n\t    function subtract(a, b, aL, base) {\r\n\t      var i = 0;\r\n\t\r\n\t      // Subtract b from a.\r\n\t      for (; aL--;) {\r\n\t        a[aL] -= i;\r\n\t        i = a[aL] < b[aL] ? 1 : 0;\r\n\t        a[aL] = i * base + a[aL] - b[aL];\r\n\t      }\r\n\t\r\n\t      // Remove leading zeros.\r\n\t      for (; !a[0] && a.length > 1;) a.shift();\r\n\t    }\r\n\t\r\n\t    return function (x, y, pr, rm, dp, base) {\r\n\t      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n\t        yL, yz,\r\n\t        Ctor = x.constructor,\r\n\t        sign = x.s == y.s ? 1 : -1,\r\n\t        xd = x.d,\r\n\t        yd = y.d;\r\n\t\r\n\t      // Either NaN, Infinity or 0?\r\n\t      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\t\r\n\t        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n\t          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\t\r\n\t          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n\t          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n\t      }\r\n\t\r\n\t      if (base) {\r\n\t        logBase = 1;\r\n\t        e = x.e - y.e;\r\n\t      } else {\r\n\t        base = BASE;\r\n\t        logBase = LOG_BASE;\r\n\t        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n\t      }\r\n\t\r\n\t      yL = yd.length;\r\n\t      xL = xd.length;\r\n\t      q = new Ctor(sign);\r\n\t      qd = q.d = [];\r\n\t\r\n\t      // Result exponent may be one less than e.\r\n\t      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n\t      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\t\r\n\t      if (yd[i] > (xd[i] || 0)) e--;\r\n\t\r\n\t      if (pr == null) {\r\n\t        sd = pr = Ctor.precision;\r\n\t        rm = Ctor.rounding;\r\n\t      } else if (dp) {\r\n\t        sd = pr + (x.e - y.e) + 1;\r\n\t      } else {\r\n\t        sd = pr;\r\n\t      }\r\n\t\r\n\t      if (sd < 0) {\r\n\t        qd.push(1);\r\n\t        more = true;\r\n\t      } else {\r\n\t\r\n\t        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n\t        sd = sd / logBase + 2 | 0;\r\n\t        i = 0;\r\n\t\r\n\t        // divisor < 1e7\r\n\t        if (yL == 1) {\r\n\t          k = 0;\r\n\t          yd = yd[0];\r\n\t          sd++;\r\n\t\r\n\t          // k is the carry.\r\n\t          for (; (i < xL || k) && sd--; i++) {\r\n\t            t = k * base + (xd[i] || 0);\r\n\t            qd[i] = t / yd | 0;\r\n\t            k = t % yd | 0;\r\n\t          }\r\n\t\r\n\t          more = k || i < xL;\r\n\t\r\n\t        // divisor >= 1e7\r\n\t        } else {\r\n\t\r\n\t          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n\t          k = base / (yd[0] + 1) | 0;\r\n\t\r\n\t          if (k > 1) {\r\n\t            yd = multiplyInteger(yd, k, base);\r\n\t            xd = multiplyInteger(xd, k, base);\r\n\t            yL = yd.length;\r\n\t            xL = xd.length;\r\n\t          }\r\n\t\r\n\t          xi = yL;\r\n\t          rem = xd.slice(0, yL);\r\n\t          remL = rem.length;\r\n\t\r\n\t          // Add zeros to make remainder as long as divisor.\r\n\t          for (; remL < yL;) rem[remL++] = 0;\r\n\t\r\n\t          yz = yd.slice();\r\n\t          yz.unshift(0);\r\n\t          yd0 = yd[0];\r\n\t\r\n\t          if (yd[1] >= base / 2) ++yd0;\r\n\t\r\n\t          do {\r\n\t            k = 0;\r\n\t\r\n\t            // Compare divisor and remainder.\r\n\t            cmp = compare(yd, rem, yL, remL);\r\n\t\r\n\t            // If divisor < remainder.\r\n\t            if (cmp < 0) {\r\n\t\r\n\t              // Calculate trial digit, k.\r\n\t              rem0 = rem[0];\r\n\t              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\t\r\n\t              // k will be how many times the divisor goes into the current remainder.\r\n\t              k = rem0 / yd0 | 0;\r\n\t\r\n\t              //  Algorithm:\r\n\t              //  1. product = divisor * trial digit (k)\r\n\t              //  2. if product > remainder: product -= divisor, k--\r\n\t              //  3. remainder -= product\r\n\t              //  4. if product was < remainder at 2:\r\n\t              //    5. compare new remainder and divisor\r\n\t              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\t\r\n\t              if (k > 1) {\r\n\t                if (k >= base) k = base - 1;\r\n\t\r\n\t                // product = divisor * trial digit.\r\n\t                prod = multiplyInteger(yd, k, base);\r\n\t                prodL = prod.length;\r\n\t                remL = rem.length;\r\n\t\r\n\t                // Compare product and remainder.\r\n\t                cmp = compare(prod, rem, prodL, remL);\r\n\t\r\n\t                // product > remainder.\r\n\t                if (cmp == 1) {\r\n\t                  k--;\r\n\t\r\n\t                  // Subtract divisor from product.\r\n\t                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n\t                }\r\n\t              } else {\r\n\t\r\n\t                // cmp is -1.\r\n\t                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n\t                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n\t                if (k == 0) cmp = k = 1;\r\n\t                prod = yd.slice();\r\n\t              }\r\n\t\r\n\t              prodL = prod.length;\r\n\t              if (prodL < remL) prod.unshift(0);\r\n\t\r\n\t              // Subtract product from remainder.\r\n\t              subtract(rem, prod, remL, base);\r\n\t\r\n\t              // If product was < previous remainder.\r\n\t              if (cmp == -1) {\r\n\t                remL = rem.length;\r\n\t\r\n\t                // Compare divisor and new remainder.\r\n\t                cmp = compare(yd, rem, yL, remL);\r\n\t\r\n\t                // If divisor < new remainder, subtract divisor from remainder.\r\n\t                if (cmp < 1) {\r\n\t                  k++;\r\n\t\r\n\t                  // Subtract divisor from remainder.\r\n\t                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n\t                }\r\n\t              }\r\n\t\r\n\t              remL = rem.length;\r\n\t            } else if (cmp === 0) {\r\n\t              k++;\r\n\t              rem = [0];\r\n\t            }    // if cmp === 1, k will be 0\r\n\t\r\n\t            // Add the next digit, k, to the result array.\r\n\t            qd[i++] = k;\r\n\t\r\n\t            // Update the remainder.\r\n\t            if (cmp && rem[0]) {\r\n\t              rem[remL++] = xd[xi] || 0;\r\n\t            } else {\r\n\t              rem = [xd[xi]];\r\n\t              remL = 1;\r\n\t            }\r\n\t\r\n\t          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\t\r\n\t          more = rem[0] !== void 0;\r\n\t        }\r\n\t\r\n\t        // Leading zero?\r\n\t        if (!qd[0]) qd.shift();\r\n\t      }\r\n\t\r\n\t      // logBase is 1 when divide is being used for base conversion.\r\n\t      if (logBase == 1) {\r\n\t        q.e = e;\r\n\t        inexact = more;\r\n\t      } else {\r\n\t\r\n\t        // To calculate q.e, first get the number of digits of qd[0].\r\n\t        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n\t        q.e = i + e * logBase - 1;\r\n\t\r\n\t        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n\t      }\r\n\t\r\n\t      return q;\r\n\t    };\r\n\t  })();\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n\t   * Check for over/under-flow.\r\n\t   */\r\n\t   function finalise(x, sd, rm, isTruncated) {\r\n\t    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n\t      Ctor = x.constructor;\r\n\t\r\n\t    // Don't round if sd is null or undefined.\r\n\t    out: if (sd != null) {\r\n\t      xd = x.d;\r\n\t\r\n\t      // Infinity/NaN.\r\n\t      if (!xd) return x;\r\n\t\r\n\t      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t      // w: the word of xd containing rd, a base 1e7 number.\r\n\t      // xdi: the index of w within xd.\r\n\t      // digits: the number of digits of w.\r\n\t      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n\t      // they had leading zeros)\r\n\t      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\t\r\n\t      // Get the length of the first word of the digits array xd.\r\n\t      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n\t      i = sd - digits;\r\n\t\r\n\t      // Is the rounding digit in the first word of xd?\r\n\t      if (i < 0) {\r\n\t        i += LOG_BASE;\r\n\t        j = sd;\r\n\t        w = xd[xdi = 0];\r\n\t\r\n\t        // Get the rounding digit at index j of w.\r\n\t        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n\t      } else {\r\n\t        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n\t        k = xd.length;\r\n\t        if (xdi >= k) {\r\n\t          if (isTruncated) {\r\n\t\r\n\t            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n\t            for (; k++ <= xdi;) xd.push(0);\r\n\t            w = rd = 0;\r\n\t            digits = 1;\r\n\t            i %= LOG_BASE;\r\n\t            j = i - LOG_BASE + 1;\r\n\t          } else {\r\n\t            break out;\r\n\t          }\r\n\t        } else {\r\n\t          w = k = xd[xdi];\r\n\t\r\n\t          // Get the number of digits of w.\r\n\t          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\t\r\n\t          // Get the index of rd within w.\r\n\t          i %= LOG_BASE;\r\n\t\r\n\t          // Get the index of rd within w, adjusted for leading zeros.\r\n\t          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n\t          j = i - LOG_BASE + digits;\r\n\t\r\n\t          // Get the rounding digit at index j of w.\r\n\t          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      // Are there any non-zero digits after the rounding digit?\r\n\t      isTruncated = isTruncated || sd < 0 ||\r\n\t        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\t\r\n\t      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n\t      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n\t      // will give 714.\r\n\t\r\n\t      roundUp = rm < 4\r\n\t        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n\t        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\t\r\n\t          // Check whether the digit to the left of the rounding digit is odd.\r\n\t          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n\t            rm == (x.s < 0 ? 8 : 7));\r\n\t\r\n\t      if (sd < 1 || !xd[0]) {\r\n\t        xd.length = 0;\r\n\t        if (roundUp) {\r\n\t\r\n\t          // Convert sd to decimal places.\r\n\t          sd -= x.e + 1;\r\n\t\r\n\t          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n\t          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n\t          x.e = -sd || 0;\r\n\t        } else {\r\n\t\r\n\t          // Zero.\r\n\t          xd[0] = x.e = 0;\r\n\t        }\r\n\t\r\n\t        return x;\r\n\t      }\r\n\t\r\n\t      // Remove excess digits.\r\n\t      if (i == 0) {\r\n\t        xd.length = xdi;\r\n\t        k = 1;\r\n\t        xdi--;\r\n\t      } else {\r\n\t        xd.length = xdi + 1;\r\n\t        k = mathpow(10, LOG_BASE - i);\r\n\t\r\n\t        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n\t        // j > 0 means i > number of leading zeros of w.\r\n\t        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n\t      }\r\n\t\r\n\t      if (roundUp) {\r\n\t        for (;;) {\r\n\t\r\n\t          // Is the digit to be rounded up in the first word of xd?\r\n\t          if (xdi == 0) {\r\n\t\r\n\t            // i will be the length of xd[0] before k is added.\r\n\t            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n\t            j = xd[0] += k;\r\n\t            for (k = 1; j >= 10; j /= 10) k++;\r\n\t\r\n\t            // if i != k the length has increased.\r\n\t            if (i != k) {\r\n\t              x.e++;\r\n\t              if (xd[0] == BASE) xd[0] = 1;\r\n\t            }\r\n\t\r\n\t            break;\r\n\t          } else {\r\n\t            xd[xdi] += k;\r\n\t            if (xd[xdi] != BASE) break;\r\n\t            xd[xdi--] = 0;\r\n\t            k = 1;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t\r\n\t      // Remove trailing zeros.\r\n\t      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\t    }\r\n\t\r\n\t    if (external) {\r\n\t\r\n\t      // Overflow?\r\n\t      if (x.e > Ctor.maxE) {\r\n\t\r\n\t        // Infinity.\r\n\t        x.d = null;\r\n\t        x.e = NaN;\r\n\t\r\n\t      // Underflow?\r\n\t      } else if (x.e < Ctor.minE) {\r\n\t\r\n\t        // Zero.\r\n\t        x.e = 0;\r\n\t        x.d = [0];\r\n\t        // Ctor.underflow = true;\r\n\t      } // else Ctor.underflow = false;\r\n\t    }\r\n\t\r\n\t    return x;\r\n\t  }\r\n\t\r\n\t\r\n\t  function finiteToString(x, isExp, sd) {\r\n\t    if (!x.isFinite()) return nonFiniteToString(x);\r\n\t    var k,\r\n\t      e = x.e,\r\n\t      str = digitsToString(x.d),\r\n\t      len = str.length;\r\n\t\r\n\t    if (isExp) {\r\n\t      if (sd && (k = sd - len) > 0) {\r\n\t        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n\t      } else if (len > 1) {\r\n\t        str = str.charAt(0) + '.' + str.slice(1);\r\n\t      }\r\n\t\r\n\t      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n\t    } else if (e < 0) {\r\n\t      str = '0.' + getZeroString(-e - 1) + str;\r\n\t      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n\t    } else if (e >= len) {\r\n\t      str += getZeroString(e + 1 - len);\r\n\t      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n\t    } else {\r\n\t      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n\t      if (sd && (k = sd - len) > 0) {\r\n\t        if (e + 1 === len) str += '.';\r\n\t        str += getZeroString(k);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return str;\r\n\t  }\r\n\t\r\n\t\r\n\t  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n\t  function getBase10Exponent(digits, e) {\r\n\t\r\n\t    // First get the number of digits of the first word of the digits array.\r\n\t    for (var i = 1, w = digits[0]; w >= 10; w /= 10) i++;\r\n\t    return i + e * LOG_BASE - 1;\r\n\t  }\r\n\t\r\n\t\r\n\t   function getLn10(Ctor, sd, pr) {\r\n\t    if (sd > LN10_PRECISION) {\r\n\t\r\n\t      // Reset global state in case the exception is caught.\r\n\t      external = true;\r\n\t      if (pr) Ctor.precision = pr;\r\n\t      throw Error(precisionLimitExceeded);\r\n\t    }\r\n\t    return finalise(new Ctor(LN10), sd, 1, true);\r\n\t  }\r\n\t\r\n\t\r\n\t  function getPi(Ctor, sd, rm) {\r\n\t    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n\t    return finalise(new Ctor(PI), sd, rm, true);\r\n\t  }\r\n\t\r\n\t\r\n\t  function getPrecision(digits) {\r\n\t    var w = digits.length - 1,\r\n\t      len = w * LOG_BASE + 1;\r\n\t\r\n\t    w = digits[w];\r\n\t\r\n\t    // If non-zero...\r\n\t    if (w) {\r\n\t\r\n\t      // Subtract the number of trailing zeros of the last word.\r\n\t      for (; w % 10 == 0; w /= 10) len--;\r\n\t\r\n\t      // Add the number of digits of the first word.\r\n\t      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n\t    }\r\n\t\r\n\t    return len;\r\n\t  }\r\n\t\r\n\t\r\n\t  function getZeroString(k) {\r\n\t    var zs = '';\r\n\t    for (; k--;) zs += '0';\r\n\t    return zs;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n\t   * integer of type number.\r\n\t   *\r\n\t   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n\t   *\r\n\t   */\r\n\t  function intPow(Ctor, x, n, pr) {\r\n\t    var isTruncated,\r\n\t      r = new Ctor(1),\r\n\t\r\n\t      // Max n of 9007199254740991 takes 53 loop iterations.\r\n\t      // Maximum digits array length; leaves [28, 34] guard digits.\r\n\t      k = Math.ceil(pr / LOG_BASE + 4);\r\n\t\r\n\t    external = false;\r\n\t\r\n\t    for (;;) {\r\n\t      if (n % 2) {\r\n\t        r = r.times(x);\r\n\t        if (truncate(r.d, k)) isTruncated = true;\r\n\t      }\r\n\t\r\n\t      n = mathfloor(n / 2);\r\n\t      if (n === 0) {\r\n\t\r\n\t        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n\t        n = r.d.length - 1;\r\n\t        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n\t        break;\r\n\t      }\r\n\t\r\n\t      x = x.times(x);\r\n\t      truncate(x.d, k);\r\n\t    }\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return r;\r\n\t  }\r\n\t\r\n\t\r\n\t  function isOdd(n) {\r\n\t    return n.d[n.d.length - 1] & 1;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n\t   */\r\n\t  function maxOrMin(Ctor, args, ltgt) {\r\n\t    var y,\r\n\t      x = new Ctor(args[0]),\r\n\t      i = 0;\r\n\t\r\n\t    for (; ++i < args.length;) {\r\n\t      y = new Ctor(args[i]);\r\n\t      if (!y.s) {\r\n\t        x = y;\r\n\t        break;\r\n\t      } else if (x[ltgt](y)) {\r\n\t        x = y;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return x;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n\t   * digits.\r\n\t   *\r\n\t   * Taylor/Maclaurin series.\r\n\t   *\r\n\t   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n\t   *\r\n\t   * Argument reduction:\r\n\t   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n\t   *   exp(x) = exp(x / 2^k)^(2^k)\r\n\t   *\r\n\t   * Previously, the argument was initially reduced by\r\n\t   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n\t   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n\t   * found to be slower than just dividing repeatedly by 32 as above.\r\n\t   *\r\n\t   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n\t   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n\t   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n\t   *\r\n\t   *  exp(Infinity)  = Infinity\r\n\t   *  exp(-Infinity) = 0\r\n\t   *  exp(NaN)       = NaN\r\n\t   *  exp(±0)        = 1\r\n\t   *\r\n\t   *  exp(x) is non-terminating for any finite, non-zero x.\r\n\t   *\r\n\t   *  The result will always be correctly rounded.\r\n\t   *\r\n\t   */\r\n\t  function naturalExponential(x, sd) {\r\n\t    var denominator, guard, j, pow, sum, t, wpr,\r\n\t      rep = 0,\r\n\t      i = 0,\r\n\t      k = 0,\r\n\t      Ctor = x.constructor,\r\n\t      rm = Ctor.rounding,\r\n\t      pr = Ctor.precision;\r\n\t\r\n\t    // 0/NaN/Infinity?\r\n\t    if (!x.d || !x.d[0] || x.e > 17) {\r\n\t\r\n\t      return new Ctor(x.d\r\n\t        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n\t        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n\t    }\r\n\t\r\n\t    if (sd == null) {\r\n\t      external = false;\r\n\t      wpr = pr;\r\n\t    } else {\r\n\t      wpr = sd;\r\n\t    }\r\n\t\r\n\t    t = new Ctor(0.03125);\r\n\t\r\n\t    // while abs(x) >= 0.1\r\n\t    while (x.e > -2) {\r\n\t\r\n\t      // x = x / 2^5\r\n\t      x = x.times(t);\r\n\t      k += 5;\r\n\t    }\r\n\t\r\n\t    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n\t    // necessary to ensure the first 4 rounding digits are correct.\r\n\t    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n\t    wpr += guard;\r\n\t    denominator = pow = sum = new Ctor(1);\r\n\t    Ctor.precision = wpr;\r\n\t\r\n\t    for (;;) {\r\n\t      pow = finalise(pow.times(x), wpr, 1);\r\n\t      denominator = denominator.times(++i);\r\n\t      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\t\r\n\t      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n\t        j = k;\r\n\t        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\t\r\n\t        // Check to see if the first 4 rounding digits are [49]999.\r\n\t        // If so, repeat the summation with a higher precision, otherwise\r\n\t        // e.g. with precision: 18, rounding: 1\r\n\t        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n\t        // `wpr - guard` is the index of first rounding digit.\r\n\t        if (sd == null) {\r\n\t\r\n\t          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n\t            Ctor.precision = wpr += 10;\r\n\t            denominator = pow = t = new Ctor(1);\r\n\t            i = 0;\r\n\t            rep++;\r\n\t          } else {\r\n\t            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n\t          }\r\n\t        } else {\r\n\t          Ctor.precision = pr;\r\n\t          return sum;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      sum = t;\r\n\t    }\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n\t   * digits.\r\n\t   *\r\n\t   *  ln(-n)        = NaN\r\n\t   *  ln(0)         = -Infinity\r\n\t   *  ln(-0)        = -Infinity\r\n\t   *  ln(1)         = 0\r\n\t   *  ln(Infinity)  = Infinity\r\n\t   *  ln(-Infinity) = NaN\r\n\t   *  ln(NaN)       = NaN\r\n\t   *\r\n\t   *  ln(n) (n != 1) is non-terminating.\r\n\t   *\r\n\t   */\r\n\t  function naturalLogarithm(y, sd) {\r\n\t    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n\t      n = 1,\r\n\t      guard = 10,\r\n\t      x = y,\r\n\t      xd = x.d,\r\n\t      Ctor = x.constructor,\r\n\t      rm = Ctor.rounding,\r\n\t      pr = Ctor.precision;\r\n\t\r\n\t    // Is x negative or Infinity, NaN, 0 or 1?\r\n\t    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n\t      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n\t    }\r\n\t\r\n\t    if (sd == null) {\r\n\t      external = false;\r\n\t      wpr = pr;\r\n\t    } else {\r\n\t      wpr = sd;\r\n\t    }\r\n\t\r\n\t    Ctor.precision = wpr += guard;\r\n\t    c = digitsToString(xd);\r\n\t    c0 = c.charAt(0);\r\n\t\r\n\t    if (Math.abs(e = x.e) < 1.5e15) {\r\n\t\r\n\t      // Argument reduction.\r\n\t      // The series converges faster the closer the argument is to 1, so using\r\n\t      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n\t      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n\t      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n\t      // later be divided by this number, then separate out the power of 10 using\r\n\t      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\t\r\n\t      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n\t      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n\t      // max n is 6 (gives 0.7 - 1.3)\r\n\t      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n\t        x = x.times(y);\r\n\t        c = digitsToString(x.d);\r\n\t        c0 = c.charAt(0);\r\n\t        n++;\r\n\t      }\r\n\t\r\n\t      e = x.e;\r\n\t\r\n\t      if (c0 > 1) {\r\n\t        x = new Ctor('0.' + c);\r\n\t        e++;\r\n\t      } else {\r\n\t        x = new Ctor(c0 + '.' + c.slice(1));\r\n\t      }\r\n\t    } else {\r\n\t\r\n\t      // The argument reduction method above may result in overflow if the argument y is a massive\r\n\t      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n\t      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n\t      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n\t      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\t      Ctor.precision = pr;\r\n\t\r\n\t      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n\t    }\r\n\t\r\n\t    // x1 is x reduced to a value near 1.\r\n\t    x1 = x;\r\n\t\r\n\t    // Taylor series.\r\n\t    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n\t    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n\t    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n\t    x2 = finalise(x.times(x), wpr, 1);\r\n\t    denominator = 3;\r\n\t\r\n\t    for (;;) {\r\n\t      numerator = finalise(numerator.times(x2), wpr, 1);\r\n\t      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\t\r\n\t      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n\t        sum = sum.times(2);\r\n\t\r\n\t        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n\t        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n\t        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n\t        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\t\r\n\t        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n\t        // been repeated previously) and the first 4 rounding digits 9999?\r\n\t        // If so, restart the summation with a higher precision, otherwise\r\n\t        // e.g. with precision: 12, rounding: 1\r\n\t        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n\t        // `wpr - guard` is the index of first rounding digit.\r\n\t        if (sd == null) {\r\n\t          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n\t            Ctor.precision = wpr += guard;\r\n\t            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n\t            x2 = finalise(x.times(x), wpr, 1);\r\n\t            denominator = rep = 1;\r\n\t          } else {\r\n\t            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n\t          }\r\n\t        } else {\r\n\t          Ctor.precision = pr;\r\n\t          return sum;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      sum = t;\r\n\t      denominator += 2;\r\n\t    }\r\n\t  }\r\n\t\r\n\t\r\n\t  // ±Infinity, NaN.\r\n\t  function nonFiniteToString(x) {\r\n\t    // Unsigned.\r\n\t    return String(x.s * x.s / 0);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Parse the value of a new Decimal `x` from string `str`.\r\n\t   */\r\n\t  function parseDecimal(x, str) {\r\n\t    var e, i, len;\r\n\t\r\n\t    // Decimal point?\r\n\t    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\t\r\n\t    // Exponential form?\r\n\t    if ((i = str.search(/e/i)) > 0) {\r\n\t\r\n\t      // Determine exponent.\r\n\t      if (e < 0) e = i;\r\n\t      e += +str.slice(i + 1);\r\n\t      str = str.substring(0, i);\r\n\t    } else if (e < 0) {\r\n\t\r\n\t      // Integer.\r\n\t      e = str.length;\r\n\t    }\r\n\t\r\n\t    // Determine leading zeros.\r\n\t    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\t\r\n\t    // Determine trailing zeros.\r\n\t    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n\t    str = str.slice(i, len);\r\n\t\r\n\t    if (str) {\r\n\t      len -= i;\r\n\t      x.e = e = e - i - 1;\r\n\t      x.d = [];\r\n\t\r\n\t      // Transform base\r\n\t\r\n\t      // e is the base 10 exponent.\r\n\t      // i is where to slice str to get the first word of the digits array.\r\n\t      i = (e + 1) % LOG_BASE;\r\n\t      if (e < 0) i += LOG_BASE;\r\n\t\r\n\t      if (i < len) {\r\n\t        if (i) x.d.push(+str.slice(0, i));\r\n\t        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n\t        str = str.slice(i);\r\n\t        i = LOG_BASE - str.length;\r\n\t      } else {\r\n\t        i -= len;\r\n\t      }\r\n\t\r\n\t      for (; i--;) str += '0';\r\n\t      x.d.push(+str);\r\n\t\r\n\t      if (external) {\r\n\t\r\n\t        // Overflow?\r\n\t        if (x.e > x.constructor.maxE) {\r\n\t\r\n\t          // Infinity.\r\n\t          x.d = null;\r\n\t          x.e = NaN;\r\n\t\r\n\t        // Underflow?\r\n\t        } else if (x.e < x.constructor.minE) {\r\n\t\r\n\t          // Zero.\r\n\t          x.e = 0;\r\n\t          x.d = [0];\r\n\t          // x.constructor.underflow = true;\r\n\t        } // else x.constructor.underflow = false;\r\n\t      }\r\n\t    } else {\r\n\t\r\n\t      // Zero.\r\n\t      x.e = 0;\r\n\t      x.d = [0];\r\n\t    }\r\n\t\r\n\t    return x;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n\t   */\r\n\t  function parseOther(x, str) {\r\n\t    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\t\r\n\t    if (str === 'Infinity' || str === 'NaN') {\r\n\t      if (!+str) x.s = NaN;\r\n\t      x.e = NaN;\r\n\t      x.d = null;\r\n\t      return x;\r\n\t    }\r\n\t\r\n\t    if (isHex.test(str))  {\r\n\t      base = 16;\r\n\t      str = str.toLowerCase();\r\n\t    } else if (isBinary.test(str))  {\r\n\t      base = 2;\r\n\t    } else if (isOctal.test(str))  {\r\n\t      base = 8;\r\n\t    } else {\r\n\t      throw Error(invalidArgument + str);\r\n\t    }\r\n\t\r\n\t    // Is there a binary exponent part?\r\n\t    i = str.search(/p/i);\r\n\t\r\n\t    if (i > 0) {\r\n\t      p = +str.slice(i + 1);\r\n\t      str = str.substring(2, i);\r\n\t    } else {\r\n\t      str = str.slice(2);\r\n\t    }\r\n\t\r\n\t    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n\t    // fraction part will be restored.\r\n\t    i = str.indexOf('.');\r\n\t    isFloat = i >= 0;\r\n\t    Ctor = x.constructor;\r\n\t\r\n\t    if (isFloat) {\r\n\t      str = str.replace('.', '');\r\n\t      len = str.length;\r\n\t      i = len - i;\r\n\t\r\n\t      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n\t      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n\t    }\r\n\t\r\n\t    xd = convertBase(str, base, BASE);\r\n\t    xe = xd.length - 1;\r\n\t\r\n\t    // Remove trailing zeros.\r\n\t    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n\t    if (i < 0) return new Ctor(x.s * 0);\r\n\t    x.e = getBase10Exponent(xd, xe);\r\n\t    x.d = xd;\r\n\t    external = false;\r\n\t\r\n\t    // At what precision to perform the division to ensure exact conversion?\r\n\t    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n\t    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n\t    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n\t    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n\t    // Therefore using 4 * the number of digits of str will always be enough.\r\n\t    if (isFloat) x = divide(x, divisor, len * 4);\r\n\t\r\n\t    // Multiply by the binary exponent part if present.\r\n\t    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n\t    external = true;\r\n\t\r\n\t    return x;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n\t   * |x| < pi/2\r\n\t   *\r\n\t   */\r\n\t  function sine(Ctor, x) {\r\n\t    var k,\r\n\t      len = x.d.length;\r\n\t\r\n\t    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\t\r\n\t    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n\t    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n\t    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\t\r\n\t    // Estimate the optimum number of times to use the argument reduction.\r\n\t    k = 1.4 * Math.sqrt(len);\r\n\t    k = k > 16 ? 16 : k | 0;\r\n\t\r\n\t    // Max k before Math.pow precision loss is 22\r\n\t    x = x.times(Math.pow(5, -k));\r\n\t    x = taylorSeries(Ctor, 2, x, x);\r\n\t\r\n\t    // Reverse argument reduction\r\n\t    var sin2_x,\r\n\t      d5 = new Ctor(5),\r\n\t      d16 = new Ctor(16),\r\n\t      d20 = new Ctor(20);\r\n\t    for (; k--;) {\r\n\t      sin2_x = x.times(x);\r\n\t      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n\t    }\r\n\t\r\n\t    return x;\r\n\t  }\r\n\t\r\n\t\r\n\t  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n\t  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n\t    var j, t, u, x2,\r\n\t      i = 1,\r\n\t      pr = Ctor.precision,\r\n\t      k = Math.ceil(pr / LOG_BASE);\r\n\t\r\n\t    external = false;\r\n\t    x2 = x.times(x);\r\n\t    u = new Ctor(y);\r\n\t\r\n\t    for (;;) {\r\n\t      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n\t      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n\t      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n\t      t = u.plus(y);\r\n\t\r\n\t      if (t.d[k] !== void 0) {\r\n\t        for (j = k; t.d[j] === u.d[j] && j--;);\r\n\t        if (j == -1) break;\r\n\t      }\r\n\t\r\n\t      j = u;\r\n\t      u = y;\r\n\t      y = t;\r\n\t      t = j;\r\n\t      i++;\r\n\t    }\r\n\t\r\n\t    external = true;\r\n\t    t.d.length = k + 1;\r\n\t\r\n\t    return t;\r\n\t  }\r\n\t\r\n\t\r\n\t  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n\t  function toLessThanHalfPi(Ctor, x) {\r\n\t    var t,\r\n\t      isNeg = x.s < 0,\r\n\t      pi = getPi(Ctor, Ctor.precision, 1),\r\n\t      halfPi = pi.times(0.5);\r\n\t\r\n\t    x = x.abs();\r\n\t\r\n\t    if (x.lte(halfPi)) {\r\n\t      quadrant = isNeg ? 4 : 1;\r\n\t      return x;\r\n\t    }\r\n\t\r\n\t    t = x.divToInt(pi);\r\n\t\r\n\t    if (t.isZero()) {\r\n\t      quadrant = isNeg ? 3 : 2;\r\n\t    } else {\r\n\t      x = x.minus(t.times(pi));\r\n\t\r\n\t      // 0 <= x < pi\r\n\t      if (x.lte(halfPi)) {\r\n\t        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n\t        return x;\r\n\t      }\r\n\t\r\n\t      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n\t    }\r\n\t\r\n\t    return x.minus(pi).abs();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n\t   *\r\n\t   * If the optional `sd` argument is present include a binary exponent suffix.\r\n\t   */\r\n\t  function toStringBinary(x, baseOut, sd, rm) {\r\n\t    var base, e, i, k, len, roundUp, str, xd, y,\r\n\t      Ctor = x.constructor,\r\n\t      isExp = sd !== void 0;\r\n\t\r\n\t    if (isExp) {\r\n\t      checkInt32(sd, 1, MAX_DIGITS);\r\n\t      if (rm === void 0) rm = Ctor.rounding;\r\n\t      else checkInt32(rm, 0, 8);\r\n\t    } else {\r\n\t      sd = Ctor.precision;\r\n\t      rm = Ctor.rounding;\r\n\t    }\r\n\t\r\n\t    if (!x.isFinite()) {\r\n\t      str = nonFiniteToString(x);\r\n\t    } else {\r\n\t      str = finiteToString(x);\r\n\t      i = str.indexOf('.');\r\n\t\r\n\t      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n\t      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n\t      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n\t      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\t\r\n\t      if (isExp) {\r\n\t        base = 2;\r\n\t        if (baseOut == 16) {\r\n\t          sd = sd * 4 - 3;\r\n\t        } else if (baseOut == 8) {\r\n\t          sd = sd * 3 - 2;\r\n\t        }\r\n\t      } else {\r\n\t        base = baseOut;\r\n\t      }\r\n\t\r\n\t      // Convert the number as an integer then divide the result by its base raised to a power such\r\n\t      // that the fraction part will be restored.\r\n\t\r\n\t      // Non-integer.\r\n\t      if (i >= 0) {\r\n\t        str = str.replace('.', '');\r\n\t        y = new Ctor(1);\r\n\t        y.e = str.length - i;\r\n\t        y.d = convertBase(finiteToString(y), 10, base);\r\n\t        y.e = y.d.length;\r\n\t      }\r\n\t\r\n\t      xd = convertBase(str, 10, base);\r\n\t      e = len = xd.length;\r\n\t\r\n\t      // Remove trailing zeros.\r\n\t      for (; xd[--len] == 0;) xd.pop();\r\n\t\r\n\t      if (!xd[0]) {\r\n\t        str = isExp ? '0p+0' : '0';\r\n\t      } else {\r\n\t        if (i < 0) {\r\n\t          e--;\r\n\t        } else {\r\n\t          x = new Ctor(x);\r\n\t          x.d = xd;\r\n\t          x.e = e;\r\n\t          x = divide(x, y, sd, rm, 0, base);\r\n\t          xd = x.d;\r\n\t          e = x.e;\r\n\t          roundUp = inexact;\r\n\t        }\r\n\t\r\n\t        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t        i = xd[sd];\r\n\t        k = base / 2;\r\n\t        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\t\r\n\t        roundUp = rm < 4\r\n\t          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n\t          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n\t            rm === (x.s < 0 ? 8 : 7));\r\n\t\r\n\t        xd.length = sd;\r\n\t\r\n\t        if (roundUp) {\r\n\t\r\n\t          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n\t          for (; ++xd[--sd] > base - 1;) {\r\n\t            xd[sd] = 0;\r\n\t            if (!sd) {\r\n\t              ++e;\r\n\t              xd.unshift(1);\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t        // Determine trailing zeros.\r\n\t        for (len = xd.length; !xd[len - 1]; --len);\r\n\t\r\n\t        // E.g. [4, 11, 15] becomes 4bf.\r\n\t        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\t\r\n\t        // Add binary exponent suffix?\r\n\t        if (isExp) {\r\n\t          if (len > 1) {\r\n\t            if (baseOut == 16 || baseOut == 8) {\r\n\t              i = baseOut == 16 ? 4 : 3;\r\n\t              for (--len; len % i; len++) str += '0';\r\n\t              xd = convertBase(str, base, baseOut);\r\n\t              for (len = xd.length; !xd[len - 1]; --len);\r\n\t\r\n\t              // xd[0] will always be be 1\r\n\t              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\t            } else {\r\n\t              str = str.charAt(0) + '.' + str.slice(1);\r\n\t            }\r\n\t          }\r\n\t\r\n\t          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n\t        } else if (e < 0) {\r\n\t          for (; ++e;) str = '0' + str;\r\n\t          str = '0.' + str;\r\n\t        } else {\r\n\t          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n\t          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n\t    }\r\n\t\r\n\t    return x.s < 0 ? '-' + str : str;\r\n\t  }\r\n\t\r\n\t\r\n\t  // Does not strip trailing zeros.\r\n\t  function truncate(arr, len) {\r\n\t    if (arr.length > len) {\r\n\t      arr.length = len;\r\n\t      return true;\r\n\t    }\r\n\t  }\r\n\t\r\n\t\r\n\t  // Decimal methods\r\n\t\r\n\t\r\n\t  /*\r\n\t   *  abs\r\n\t   *  acos\r\n\t   *  acosh\r\n\t   *  add\r\n\t   *  asin\r\n\t   *  asinh\r\n\t   *  atan\r\n\t   *  atanh\r\n\t   *  atan2\r\n\t   *  cbrt\r\n\t   *  ceil\r\n\t   *  clone\r\n\t   *  config\r\n\t   *  cos\r\n\t   *  cosh\r\n\t   *  div\r\n\t   *  exp\r\n\t   *  floor\r\n\t   *  hypot\r\n\t   *  ln\r\n\t   *  log\r\n\t   *  log2\r\n\t   *  log10\r\n\t   *  max\r\n\t   *  min\r\n\t   *  mod\r\n\t   *  mul\r\n\t   *  pow\r\n\t   *  random\r\n\t   *  round\r\n\t   *  set\r\n\t   *  sign\r\n\t   *  sin\r\n\t   *  sinh\r\n\t   *  sqrt\r\n\t   *  sub\r\n\t   *  tan\r\n\t   *  tanh\r\n\t   *  trunc\r\n\t   */\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the absolute value of `x`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function abs(x) {\r\n\t    return new this(x).abs();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function acos(x) {\r\n\t    return new this(x).acos();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function acosh(x) {\r\n\t    return new this(x).acosh();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function add(x, y) {\r\n\t    return new this(x).plus(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function asin(x) {\r\n\t    return new this(x).asin();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function asinh(x) {\r\n\t    return new this(x).asinh();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function atan(x) {\r\n\t    return new this(x).atan();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n\t   * `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function atanh(x) {\r\n\t    return new this(x).atanh();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n\t   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * Domain: [-Infinity, Infinity]\r\n\t   * Range: [-pi, pi]\r\n\t   *\r\n\t   * y {number|string|Decimal} The y-coordinate.\r\n\t   * x {number|string|Decimal} The x-coordinate.\r\n\t   *\r\n\t   * atan2(±0, -0)               = ±pi\r\n\t   * atan2(±0, +0)               = ±0\r\n\t   * atan2(±0, -x)               = ±pi for x > 0\r\n\t   * atan2(±0, x)                = ±0 for x > 0\r\n\t   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n\t   * atan2(y, ±0)                = pi/2 for y > 0\r\n\t   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n\t   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n\t   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n\t   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n\t   * atan2(±Infinity, +Infinity) = ±pi/4\r\n\t   * atan2(NaN, x) = NaN\r\n\t   * atan2(y, NaN) = NaN\r\n\t   *\r\n\t   */\r\n\t  function atan2(y, x) {\r\n\t    y = new this(y);\r\n\t    x = new this(x);\r\n\t    var r,\r\n\t      pr = this.precision,\r\n\t      rm = this.rounding,\r\n\t      wpr = pr + 4;\r\n\t\r\n\t    // Either NaN\r\n\t    if (!y.s || !x.s) {\r\n\t      r = new this(NaN);\r\n\t\r\n\t    // Both ±Infinity\r\n\t    } else if (!y.d && !x.d) {\r\n\t      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n\t      r.s = y.s;\r\n\t\r\n\t    // x is ±Infinity or y is ±0\r\n\t    } else if (!x.d || y.isZero()) {\r\n\t      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n\t      r.s = y.s;\r\n\t\r\n\t    // y is ±Infinity or x is ±0\r\n\t    } else if (!y.d || x.isZero()) {\r\n\t      r = getPi(this, wpr, 1).times(0.5);\r\n\t      r.s = y.s;\r\n\t\r\n\t    // Both non-zero and finite\r\n\t    } else if (x.s < 0) {\r\n\t      this.precision = wpr;\r\n\t      this.rounding = 1;\r\n\t      r = this.atan(divide(y, x, wpr, 1));\r\n\t      x = getPi(this, wpr, 1);\r\n\t      this.precision = pr;\r\n\t      this.rounding = rm;\r\n\t      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n\t    } else {\r\n\t      r = this.atan(divide(y, x, wpr, 1));\r\n\t    }\r\n\t\r\n\t    return r;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function cbrt(x) {\r\n\t    return new this(x).cbrt();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function ceil(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, 2);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Configure global settings for a Decimal constructor.\r\n\t   *\r\n\t   * `obj` is an object with one or more of the following properties,\r\n\t   *\r\n\t   *   precision  {number}\r\n\t   *   rounding   {number}\r\n\t   *   toExpNeg   {number}\r\n\t   *   toExpPos   {number}\r\n\t   *   maxE       {number}\r\n\t   *   minE       {number}\r\n\t   *   modulo     {number}\r\n\t   *   crypto     {boolean|number}\r\n\t   *\r\n\t   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n\t   *\r\n\t   */\r\n\t  function config(obj) {\r\n\t    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n\t    var i, p, v,\r\n\t      ps = [\r\n\t        'precision', 1, MAX_DIGITS,\r\n\t        'rounding', 0, 8,\r\n\t        'toExpNeg', -EXP_LIMIT, 0,\r\n\t        'toExpPos', 0, EXP_LIMIT,\r\n\t        'maxE', 0, EXP_LIMIT,\r\n\t        'minE', -EXP_LIMIT, 0,\r\n\t        'modulo', 0, 9\r\n\t      ];\r\n\t\r\n\t    for (i = 0; i < ps.length; i += 3) {\r\n\t      if ((v = obj[p = ps[i]]) !== void 0) {\r\n\t        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n\t        else throw Error(invalidArgument + p + ': ' + v);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    if ((v = obj[p = 'crypto']) !== void 0) {\r\n\t      if (v === true || v === false || v === 0 || v === 1) {\r\n\t        if (v) {\r\n\t          if (typeof crypto != 'undefined' && crypto &&\r\n\t            (crypto.getRandomValues || crypto.randomBytes)) {\r\n\t            this[p] = true;\r\n\t          } else {\r\n\t            throw Error(cryptoUnavailable);\r\n\t          }\r\n\t        } else {\r\n\t          this[p] = false;\r\n\t        }\r\n\t      } else {\r\n\t        throw Error(invalidArgument + p + ': ' + v);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return this;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function cos(x) {\r\n\t    return new this(x).cos();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function cosh(x) {\r\n\t    return new this(x).cosh();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n\t   * constructor.\r\n\t   *\r\n\t   */\r\n\t  function clone(obj) {\r\n\t    var i, p, ps;\r\n\t\r\n\t    /*\r\n\t     * The Decimal constructor and exported function.\r\n\t     * Return a new Decimal instance.\r\n\t     *\r\n\t     * v {number|string|Decimal} A numeric value.\r\n\t     *\r\n\t     */\r\n\t    function Decimal(v) {\r\n\t      var e, i, t,\r\n\t        x = this;\r\n\t\r\n\t      // Decimal called without new.\r\n\t      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\t\r\n\t      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n\t      // which points to Object.\r\n\t      x.constructor = Decimal;\r\n\t\r\n\t      // Duplicate.\r\n\t      if (v instanceof Decimal) {\r\n\t        x.s = v.s;\r\n\t        x.e = v.e;\r\n\t        x.d = (v = v.d) ? v.slice() : v;\r\n\t        return;\r\n\t      }\r\n\t\r\n\t      t = typeof v;\r\n\t\r\n\t      if (t === 'number') {\r\n\t        if (v === 0) {\r\n\t          x.s = 1 / v < 0 ? -1 : 1;\r\n\t          x.e = 0;\r\n\t          x.d = [0];\r\n\t          return;\r\n\t        }\r\n\t\r\n\t        if (v < 0) {\r\n\t          v = -v;\r\n\t          x.s = -1;\r\n\t        } else {\r\n\t          x.s = 1;\r\n\t        }\r\n\t\r\n\t        // Fast path for small integers.\r\n\t        if (v === ~~v && v < 1e7) {\r\n\t          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\t          x.e = e;\r\n\t          x.d = [v];\r\n\t          return;\r\n\t\r\n\t        // Infinity, NaN.\r\n\t        } else if (v * 0 !== 0) {\r\n\t          if (!v) x.s = NaN;\r\n\t          x.e = NaN;\r\n\t          x.d = null;\r\n\t          return;\r\n\t        }\r\n\t\r\n\t        return parseDecimal(x, v.toString());\r\n\t\r\n\t      } else if (t !== 'string') {\r\n\t        throw Error(invalidArgument + v);\r\n\t      }\r\n\t\r\n\t      // Minus sign?\r\n\t      if (v.charCodeAt(0) === 45) {\r\n\t        v = v.slice(1);\r\n\t        x.s = -1;\r\n\t      } else {\r\n\t        x.s = 1;\r\n\t      }\r\n\t\r\n\t      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n\t    }\r\n\t\r\n\t    Decimal.prototype = P;\r\n\t\r\n\t    Decimal.ROUND_UP = 0;\r\n\t    Decimal.ROUND_DOWN = 1;\r\n\t    Decimal.ROUND_CEIL = 2;\r\n\t    Decimal.ROUND_FLOOR = 3;\r\n\t    Decimal.ROUND_HALF_UP = 4;\r\n\t    Decimal.ROUND_HALF_DOWN = 5;\r\n\t    Decimal.ROUND_HALF_EVEN = 6;\r\n\t    Decimal.ROUND_HALF_CEIL = 7;\r\n\t    Decimal.ROUND_HALF_FLOOR = 8;\r\n\t    Decimal.EUCLID = 9;\r\n\t\r\n\t    Decimal.config = Decimal.set = config;\r\n\t    Decimal.clone = clone;\r\n\t\r\n\t    Decimal.abs = abs;\r\n\t    Decimal.acos = acos;\r\n\t    Decimal.acosh = acosh;        // ES6\r\n\t    Decimal.add = add;\r\n\t    Decimal.asin = asin;\r\n\t    Decimal.asinh = asinh;        // ES6\r\n\t    Decimal.atan = atan;\r\n\t    Decimal.atanh = atanh;        // ES6\r\n\t    Decimal.atan2 = atan2;\r\n\t    Decimal.cbrt = cbrt;          // ES6\r\n\t    Decimal.ceil = ceil;\r\n\t    Decimal.cos = cos;\r\n\t    Decimal.cosh = cosh;          // ES6\r\n\t    Decimal.div = div;\r\n\t    Decimal.exp = exp;\r\n\t    Decimal.floor = floor;\r\n\t    Decimal.hypot = hypot;        // ES6\r\n\t    Decimal.ln = ln;\r\n\t    Decimal.log = log;\r\n\t    Decimal.log10 = log10;        // ES6\r\n\t    Decimal.log2 = log2;          // ES6\r\n\t    Decimal.max = max;\r\n\t    Decimal.min = min;\r\n\t    Decimal.mod = mod;\r\n\t    Decimal.mul = mul;\r\n\t    Decimal.pow = pow;\r\n\t    Decimal.random = random;\r\n\t    Decimal.round = round;\r\n\t    Decimal.sign = sign;          // ES6\r\n\t    Decimal.sin = sin;\r\n\t    Decimal.sinh = sinh;          // ES6\r\n\t    Decimal.sqrt = sqrt;\r\n\t    Decimal.sub = sub;\r\n\t    Decimal.tan = tan;\r\n\t    Decimal.tanh = tanh;          // ES6\r\n\t    Decimal.trunc = trunc;        // ES6\r\n\t\r\n\t    if (obj === void 0) obj = {};\r\n\t    if (obj) {\r\n\t      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n\t      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n\t    }\r\n\t\r\n\t    Decimal.config(obj);\r\n\t\r\n\t    return Decimal;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function div(x, y) {\r\n\t    return new this(x).div(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n\t   *\r\n\t   */\r\n\t  function exp(x) {\r\n\t    return new this(x).exp();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function floor(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, 3);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n\t   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n\t   *\r\n\t   */\r\n\t  function hypot() {\r\n\t    var i, n,\r\n\t      t = new this(0);\r\n\t\r\n\t    external = false;\r\n\t\r\n\t    for (i = 0; i < arguments.length;) {\r\n\t      n = new this(arguments[i++]);\r\n\t      if (!n.d) {\r\n\t        if (n.s) {\r\n\t          external = true;\r\n\t          return new this(1 / 0);\r\n\t        }\r\n\t        t = n;\r\n\t      } else if (t.d) {\r\n\t        t = t.plus(n.times(n));\r\n\t      }\r\n\t    }\r\n\t\r\n\t    external = true;\r\n\t\r\n\t    return t.sqrt();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function ln(x) {\r\n\t    return new this(x).ln();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n\t   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * log[y](x)\r\n\t   *\r\n\t   * x {number|string|Decimal} The argument of the logarithm.\r\n\t   * y {number|string|Decimal} The base of the logarithm.\r\n\t   *\r\n\t   */\r\n\t  function log(x, y) {\r\n\t    return new this(x).log(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function log2(x) {\r\n\t    return new this(x).log(2);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function log10(x) {\r\n\t    return new this(x).log(10);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the maximum of the arguments.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function max() {\r\n\t    return maxOrMin(this, arguments, 'lt');\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the minimum of the arguments.\r\n\t   *\r\n\t   * arguments {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function min() {\r\n\t    return maxOrMin(this, arguments, 'gt');\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function mod(x, y) {\r\n\t    return new this(x).mod(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function mul(x, y) {\r\n\t    return new this(x).mul(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} The base.\r\n\t   * y {number|string|Decimal} The exponent.\r\n\t   *\r\n\t   */\r\n\t  function pow(x, y) {\r\n\t    return new this(x).pow(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n\t   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n\t   * are produced).\r\n\t   *\r\n\t   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n\t   *\r\n\t   */\r\n\t  function random(sd) {\r\n\t    var d, e, k, n,\r\n\t      i = 0,\r\n\t      r = new this(1),\r\n\t      rd = [];\r\n\t\r\n\t    if (sd === void 0) sd = this.precision;\r\n\t    else checkInt32(sd, 1, MAX_DIGITS);\r\n\t\r\n\t    k = Math.ceil(sd / LOG_BASE);\r\n\t\r\n\t    if (!this.crypto) {\r\n\t      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\t\r\n\t    // Browsers supporting crypto.getRandomValues.\r\n\t    } else if (crypto.getRandomValues) {\r\n\t      d = crypto.getRandomValues(new Uint32Array(k));\r\n\t\r\n\t      for (; i < k;) {\r\n\t        n = d[i];\r\n\t\r\n\t        // 0 <= n < 4294967296\r\n\t        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n\t        if (n >= 4.29e9) {\r\n\t          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n\t        } else {\r\n\t\r\n\t          // 0 <= n <= 4289999999\r\n\t          // 0 <= (n % 1e7) <= 9999999\r\n\t          rd[i++] = n % 1e7;\r\n\t        }\r\n\t      }\r\n\t\r\n\t    // Node.js supporting crypto.randomBytes.\r\n\t    } else if (crypto.randomBytes) {\r\n\t\r\n\t      // buffer\r\n\t      d = crypto.randomBytes(k *= 4);\r\n\t\r\n\t      for (; i < k;) {\r\n\t\r\n\t        // 0 <= n < 2147483648\r\n\t        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\t\r\n\t        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n\t        if (n >= 2.14e9) {\r\n\t          crypto.randomBytes(4).copy(d, i);\r\n\t        } else {\r\n\t\r\n\t          // 0 <= n <= 2139999999\r\n\t          // 0 <= (n % 1e7) <= 9999999\r\n\t          rd.push(n % 1e7);\r\n\t          i += 4;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      i = k / 4;\r\n\t    } else {\r\n\t      throw Error(cryptoUnavailable);\r\n\t    }\r\n\t\r\n\t    k = rd[--i];\r\n\t    sd %= LOG_BASE;\r\n\t\r\n\t    // Convert trailing digits to zeros according to sd.\r\n\t    if (k && sd) {\r\n\t      n = mathpow(10, LOG_BASE - sd);\r\n\t      rd[i] = (k / n | 0) * n;\r\n\t    }\r\n\t\r\n\t    // Remove trailing words which are zero.\r\n\t    for (; rd[i] === 0; i--) rd.pop();\r\n\t\r\n\t    // Zero?\r\n\t    if (i < 0) {\r\n\t      e = 0;\r\n\t      rd = [0];\r\n\t    } else {\r\n\t      e = -1;\r\n\t\r\n\t      // Remove leading words which are zero and adjust exponent accordingly.\r\n\t      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\t\r\n\t      // Count the digits of the first word of rd to determine leading zeros.\r\n\t      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\t\r\n\t      // Adjust the exponent for leading zeros of the first word of rd.\r\n\t      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n\t    }\r\n\t\r\n\t    r.e = e;\r\n\t    r.d = rd;\r\n\t\r\n\t    return r;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n\t   *\r\n\t   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function round(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return\r\n\t   *   1    if x > 0,\r\n\t   *  -1    if x < 0,\r\n\t   *   0    if x is 0,\r\n\t   *  -0    if x is -0,\r\n\t   *   NaN  otherwise\r\n\t   *\r\n\t   */\r\n\t  function sign(x) {\r\n\t    x = new this(x);\r\n\t    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function sin(x) {\r\n\t    return new this(x).sin();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function sinh(x) {\r\n\t    return new this(x).sinh();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function sqrt(x) {\r\n\t    return new this(x).sqrt();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n\t   * using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   * y {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function sub(x, y) {\r\n\t    return new this(x).sub(y);\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n\t   * digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function tan(x) {\r\n\t    return new this(x).tan();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n\t   * significant digits using rounding mode `rounding`.\r\n\t   *\r\n\t   * x {number|string|Decimal} A value in radians.\r\n\t   *\r\n\t   */\r\n\t  function tanh(x) {\r\n\t    return new this(x).tanh();\r\n\t  }\r\n\t\r\n\t\r\n\t  /*\r\n\t   * Return a new Decimal whose value is `x` truncated to an integer.\r\n\t   *\r\n\t   * x {number|string|Decimal}\r\n\t   *\r\n\t   */\r\n\t  function trunc(x) {\r\n\t    return finalise(x = new this(x), x.e + 1, 1);\r\n\t  }\r\n\t\r\n\t\r\n\t  // Create and configure initial Decimal constructor.\r\n\t  Decimal = clone(Decimal);\r\n\t\r\n\t  // Create the internal constants from their string values.\r\n\t  LN10 = new Decimal(LN10);\r\n\t  PI = new Decimal(PI);\r\n\t\r\n\t\r\n\t  // Export.\r\n\t\r\n\t\r\n\t  // AMD.\r\n\t  if (true) {\r\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\r\n\t      return Decimal;\r\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t\r\n\t  // Node and other environments that support module.exports.\r\n\t  } else if (typeof module != 'undefined' && module.exports) {\r\n\t    module.exports = Decimal.default = Decimal.Decimal = Decimal;\r\n\t\r\n\t  // Browser.\r\n\t  } else {\r\n\t    if (!globalScope) {\r\n\t      globalScope = typeof self != 'undefined' && self && self.self == self\r\n\t        ? self : Function('return this')();\r\n\t    }\r\n\t\r\n\t    noConflict = globalScope.Decimal;\r\n\t    Decimal.noConflict = function () {\r\n\t      globalScope.Decimal = noConflict;\r\n\t      return Decimal;\r\n\t    };\r\n\t\r\n\t    globalScope.Decimal = Decimal;\r\n\t  }\r\n\t})(this);\r\n\n\n/***/ }\n/******/ ])\n});\n;\n"],"sourceRoot":"/source/"}